/* **************************************************
 * 
 ************************************************** */
Text_with_features → features S1 {
  [vtense:$vtense] ⊂ ⇓2;
  [lexical_function:$lexical_function, vtense:$vtense, verbal_constr:$verbal_constr, $REST] ⊂ ↑;
  if (¬ $lexical_function)
    $lexical_function = none;
  if (¬ $vtense)
    $vtense = present;
  // not interrogative, not negative
  if (¬ $verbal_constr)
    $verbal_constr = no_int | no_neg;
  [vtense:$vtenseSth] ⊂ ⇓2;
  attest($vtenseSth != infinitive);
  ↓1 = [vtense:$vtenseSth];
  ↓2 = [lexical_function:$lexical_function, vtense:$vtense, verbal_constr:$verbal_constr, $REST];
}

Text → S1 strongPunct {
  [lexical_function:$lexical_function, vtense:$vtense, verbal_constr:$verbal_constr, $REST] ⊂ ↑;
  if (¬ $lexical_function)
    $lexical_function = none;
  if (¬ $vtense)
    $vtense = present;
  if (¬ $verbal_constr)
    $verbal_constr = no_int | no_neg;
  ↓1 = [lexical_function:$lexical_function, vtense:$vtense, verbal_constr:$verbal_constr, $REST];
  [punct:$punc] ⊂ ⇓1;
  ↓2 = [punct:$punc];
}

/* **************************************************
 * Sentence arguments
 ************************************************** */
S1 → S {
  [i:$i, ii:NIL, iii:NIL, $REST];
  ↓1 = [SUBJECT:$i, $REST];
  ⇑ = ⇓1;
}

S1 → S {
  [i:$i, ii:$ii, iii:NIL, $REST];
  ↓1 = [SUBJECT:$i, OBJECT:$ii, iiReal:OBJECT, $REST];
  ⇑ = ⇓1;
}

S1 → S {
  [i:$i, ii:$ii, iii:NIL, $REST];
  ↓1 = [SUBJECT:$i, PRED_ADJ:$ii, iiReal:PRED_ADJ, $REST];
  ⇑ = ⇓1;
}

S1 → S {
  [i:$i, ii:$ii, iii:NIL, $REST];
  ↓1 = [SUBJECT:$i, OBJ_THETA:$ii, iiReal:OBJ_THETA, $REST];
  ⇑ = ⇓1;
}

S1 → S {
  [i:$i, ii:$ii, iii:NIL, $REST];
  ↓1 = [SUBJECT:$i, SCOMP:$ii, iiReal:SCOMP, $REST];
  ⇑ = ⇓1;
}

// Infinitive subject controller
S1 → S {
  [i:$i, ii:$ii, iii:NIL, $REST];
  [i:[id:$ID], ii:[i:[idref:$ID], $iiRest]] ⊂ ↑;
  ↓1 = [SUBJECT:$i, VCOMP:[i:$i, $iiRest], iiReal:VCOMP, $REST];
  ⇑ = ⇓1;
}

S1 → S {
  [i:$i, ii:$ii, iii:$iii, $REST];
  ↓1 = [SUBJECT:$i, OBJECT:$ii, iiReal:OBJECT, OBJ_THETA:$iii, iiiReal:OBJ_THETA, $REST];
  ⇑ = ⇓1;
}

S1 → S {
  [i:$i, ii:$ii, iii:$iii, $REST];
  ↓1 = [SUBJECT:$i, OBJECT:$ii, iiReal:OBJECT, SCOMP:$iii, iiiReal:SCOMP, $REST];
  ⇑ = ⇓1;
}

/* **************************************************
 * Affirmative Sentence
 ************************************************** */
S → [NP|cln] VP {
  [SUBJECT:$SUBJECT, vtense:$vtense, $REST];
  [verbal_constr:$verbal_constr] ⊂ ↑;
  if (#1){
    ↓1 = $SUBJECT ∪ [case:nominative];
    $Synth_Subject = ⇓1;
    ↓2 = [SUBJECT:$Synth_Subject, vtense:$vtense, tensed:true, $REST];
    [SUBJECT:$expected_subject] ⊂ ⇓2;
    attest $Synth_Subject ∪ $expected_subject;
  }
  else {
    attest ($vtense == infinitive);
    ↓2 = [vtense:$vtense, $REST];
  }
    // not Interrogative form
  attest (($verbal_constr == no_int));
  ⇑ = ⇓2 ∪ [punct:dot];
}

/* **************************************************
 * Exclamatory Sentence
 ************************************************** */
S → VP {
  [SUBJECT:$SUBJECT, verbal_constr:$verbal_constr, vtense:$vtense, $REST];
  // not Interrogative form
  attest (($verbal_constr == excl));
  ↓1 = [SUBJECT:[@_2s], vtense:present] ∪ [SUBJECT:$SUBJECT, vtense:$vtense, tensed:true, verbal_constr:$verbal_constr, $REST];
  ⇑ = ⇓1 ∪ [form:excl];
}

/* **************************************************
 * Interrogative Sentence
 ************************************************** */
S → aux NP|cln VP strongPunct {
  [SUBJECT:$SUBJECT, vtense:$vtense, $REST];
  [verbal_constr:$verbal_constr] ⊂ ↑;
  ↓2 = $SUBJECT ∪ [case:nominative];
  $Synth_Subject = ⇓2;
  // Interrogative form
  attest (($verbal_constr == int));
  ↓1 = ↑ ∪ [SUBJECT:$Synth_Subject, tensed:true];
  [verbal_constr:$synth_verbal_constr, aux_form:$aux_form, verb_vform:$verb_vform] ⊂ ⇓1;
  ↓3 = $REST ∪ [aux_form:$aux_form, vtense:$verb_vform];
  ⇑ = ⇓1 ∪ [form:int];
}

/* **************************************************
 * Noun phrase
 ************************************************** */
NP → det N {
  ↓1 = ↑ ∪ ⇓2;
  ↓2 = ↑;
  ⇑ = ⇓2 ∪ [@_3];
}

NP → proper_noun {
  ↓1 = ↑;
  ⇑ = ⇓1;
}

NP → pro {
  ↓1 = ↑;
  ⇑ = ⇓1;
}

N → common_noun {
  ↓1 = ↑;
  ⇑ = ⇓1;
}

N → noun {
  ↓1 = ↑;
  ⇑ = ⇓1;
}

/* **************************************************
 * Verb and its complements
 ************************************************** */
VP → VN [NP] [part] [NP] [AP] [PP] [SCOMP|VCOMP] {
  // Given Arguments
  [OBJECT:$OBJECT, OBLIQUE:$OBLIQUE, OBJ_THETA:$OBJ_THETA, PRED_ADJ:$PRED_ADJ, SCOMP:$SCOMP, VCOMP:$VCOMP, lexical_function:$lexical_function, $REST] ⊂ ↑;
  // Idiomatic Arguments
  [OBJECT:$Synth_OBJECT, OBLIQUE:$Synth_OBLIQUE, OBJ_THETA:$Synth_OBJ_THETA, PRED_ADJ:$Synth_PRED_ADJ, SCOMP:$Synth_SCOMP, VCOMP:$Synth_VCOMP, particule:$particle] ⊂ ⇓1;
  ↓1 = $REST;
  
  if (#2) {
    if ($Synth_OBJECT)
      $OBJECT = $OBJECT ∪ $Synth_OBJECT; 
    ↓2 = [case:accusative, lexical_function:$lexical_function, $OBJECT];
  }
  else {
    attest (¬$OBJECT ∧ ¬$Synth_OBJECT);
  }
  
  if (#3) {
    attest ($particle);
    ↓3 = [particle:$particle];
  }
  else {
    attest (¬$particle);
  }
  
  if (#4) {
    if ($Synth_OBLIQUE)
      $OBLIQUE = $OBLIQUE ∪ $Synth_OBLIQUE; 
    ↓4 = [lexical_function:$lexical_function, $OBLIQUE];
  }
  else {
    attest (¬$OBLIQUE ∧ ¬$Synth_OBLIQUE);
  }
  
  if (#5) {
    if ($Synth_PRED_ADJ)
      $PRED_ADJ = $PRED_ADJ ∪ $Synth_PRED_ADJ; 
    ↓5 = [lexical_function:$lexical_function, $PRED_ADJ];
  }
  else {
    attest (¬$PRED_ADJ ∧ ¬$Synth_PRED_ADJ);
  }

  if (#6) {
    [pcase:$pcase] ⊂ ⇓1;
    if ($Synth_OBJ_THETA)
      $OBJ_THETA = $OBJ_THETA ∪ $Synth_OBJ_THETA; 
    ↓6 = [lexical_function:$lexical_function, pcase:$pcase, $OBJ_THETA];
  }
  else {
    attest (¬$OBJ_THETA ∧ ¬$Synth_OBJ_THETA);
  }
  
  if (#7.1) {
    if ($Synth_SCOMP)
      $SCOMP = $SCOMP ∪ $Synth_SCOMP; 
    ↓7 = [lexical_function:$lexical_function, $SCOMP];
  }
  else if (#7.2) {
    if ($Synth_VCOMP)
      $VCOMP = $VCOMP ∪ $Synth_VCOMP; 
    ↓7 = [lexical_function:$lexical_function, $VCOMP];
  }
  else {
    attest (¬$SCOMP ∧ ¬$Synth_SCOMP);
    attest (¬$VCOMP ∧ ¬$Synth_VCOMP);
  }
  
  ⇑ = ⇓1;
}

/* **************************************************
 * Verb 
 ************************************************** */
VN → VERB {
  [OBJECT:NIL, OBLIQUE:NIL, OBJ_THETA:NIL, PRED_ADJ:NIL, SCOMP:NIL, VCOMP:NIL, $REST];
  ↓1 = $REST;
  ⇑ = ⇓1;
}

/* **************************************************
 * Simple Verb 
 ************************************************** */
// he feels good
// does he [not] feel good
// he felt good
// did he [not] feel good
// is he [not] feeling good
// has he [not] felt good
// will he [not] feel good
// was he [not] feeling good
// had he [not] felt good
VERB → [not] verb {
  [verbal_constr:$verbal_constr, aux_form:none, $REST] ⊂ ↑;
  if (#1) {
    attest (($verbal_constr == neg));
    ↓1 = [];
    ↓2 = $REST ∪ [vtense:infinitive|past_participle|present_participle];
  } else {
    attest (($verbal_constr == no_neg));
    ↓2 = $REST ∪ [vtense:present|preterite|infinitive|past_participle|present_participle];
  }
  ⇑ = ⇓2;
}

// will he [not] have felt good
// has he [not] been feeling good
// had he [not] been feeling good
VERB → [not] have|be|been|have_been verb {
  [aux_form:have|be|been|have_been];
  [aux_form:_, verbal_constr:$verbal_constr, $REST] ⊂ ↑;
  if (#1) {
    attest (($verbal_constr == neg));
    ↓1 = [];
  } else {
    attest (($verbal_constr == no_neg));
  }
  ↓3 = $REST ∪ [vtense:infinitive|past_participle|present_participle];
  [aux_form:$aux_form] ⊂ ↑;
  [aux_form:$synth_aux_form] ⊂ ⇓3;
  ↓2 = [aux_form:$aux_form] ∪ [aux_form:$synth_aux_form];
  ⇑ = ⇓3;
}

// he doesn't feel good
// he didn't feel good
// he is [not] feeling good
// he has [not] felt good
// he will [not] feel good
// he was [not] feeling good
// he had [not] felt good

// he didn't feel good
// he didn't feel good
// he didn't feel good
// he will feel good

// he will have [not] felt good
VERB → aux [not] [have|be|been|have_been] verb {
  ↓1 = ↑;
  [verbal_constr:$verbal_constr, aux_form:$aux_form] ⊂ ↑;
  //attest ((¬ $verbal_constr) ∨ ($verbal_constr == int|neg));
  [vtense:_, tensed:_, $REST] ⊂ ↑;
  [verbal_constr:$synth_verbal_constr, aux_form:$synth_aux_form, verb_vform:$verb_vform] ⊂ ⇓1;
  if (#2) {
    attest (($verbal_constr == neg));
    ↓2 = [];
  } else {
    attest (($verbal_constr == no_neg));
  }
  if (#3) {
    attest ($synth_aux_form);
    ↓3 = [aux_form:$aux_form] ∪ [aux_form:$synth_aux_form];
  }
  else {
    attest ((¬ $synth_aux_form) ∨ ($synth_aux_form == none));
  }
  ↓4 = $REST ∪ [vtense:$verb_vform];
  [vtense:_, tensed:_, $Rest4] ⊂ ⇓4;
  ⇑ = ⇓1 ∪ $Rest4;
}

/* **************************************************
 * Adjective phrase
 ************************************************** */
AP → [adv] adj {
  ↓2 = ↑;
  [MOD:$MOD] ⊂ ↑;
  [MOD:$Synth_MOD] ⊂ ⇓2;
  if (#1) {
    attest ($MOD ∨ $Synth_MOD);
    if ($MOD ∧ $Synth_MOD)
      ↓1 = $Synth_MOD ∪ $MOD;
    else if ($MOD)
      ↓1 = $MOD;
    if ($Synth_MOD)
      ↓1 = $Synth_MOD;
  }  else {
    attest ((¬ $MOD) ∧ (¬ $Synth_MOD));
  }
  ⇑ = ⇓2;
}

/* **************************************************
 * Prep phrase
 ************************************************** */
PP → prep NP {
  ↓1 = ↑;
  ↓2 = ↑;
  ⇑ = ⇓2;
}

/* **************************************************
 * 
 ************************************************** */
SCOMP → csu S1 {
  [compl:$compl] ⊂ ↑;
  ↓1 = [];
  if (¬ $lexical_function)
    $lexical_function = none;
  if (¬ $vtense)
    $vtense = present;
  // not interrogative, not negative
  if (¬ $verbal_constr)
    $verbal_constr = no_int | no_neg;
  [lexical_function:$lexical_function, vtense:$vtense, verbal_constr:$verbal_constr, $REST] ⊂ ↑;
  ↓2 = [lexical_function:$lexical_function, vtense:$vtense, verbal_constr:$verbal_constr, $REST];
  ⇑ = ⇓2;
}

/* **************************************************
 * 
 ************************************************** */
VCOMP → to S1 {
  ↓1 = [];
  if (¬ $lexical_function)
    $lexical_function = none;
  // not interrogative, not negative
  if (¬ $verbal_constr)
    $verbal_constr = no_int | no_neg;
  [lexical_function:$lexical_function, verbal_constr:$verbal_constr, $REST] ⊂ ↑;
  ↓2 = [lexical_function:$lexical_function, vtense:infinitive, verbal_constr:$verbal_constr, $REST];
  ⇑ = ⇓1;
}
