// from fr-slang.rules
#include fr-slang.illocution.rules

/* **************************************************
 *  * Cause, reason
 * en effet, effectivement
 * à cause de, pour, par, grâce à, du fait de, en raison de
 * car
 * parce que, du fait que, comme, sachant que, puisque, comme, vu que, étant donné que
 *
 * 
 *  * consequence, effect
 * finalement, bref, ainsi, c’est pourquoi
 * donc, et
 * de sorte que, si bien que, si…que, tant…que, tellement…que, au point que
 * 
 * 
 * * but
 * pour, afin de, dans l’idée de, en vue de
 * pour que, afin que, de façon que, de peur que
 * 
 * * opposition ou concession
 * pourtant, cependant néanmoins, toutefois, certes, en revanche, au contraire, malgré tout
 * malgré, en dépit de
 * mais, or
 * bien que, quoique, alors que, même si
 * 
 * 
 * comparaison
 * comme, ainsi
 * ainsi que, comme, tel que
 * 
 * 
 * * hypothèse ou condition
 * en cas de
 * si, à condition que, pourvu que
 * 
 * 
 * * addition
 * d’abord, premièrement, de plus, en outre, mais encore, aussi, ensuite
 * et
 * 
 * 
 ************************************************** */

/* **************************************************
 * Default
 ************************************************** */

rhetoricalStructure → illocutionaryAct {
  [rhet:NIL, $rest];
  ↓1 = $rest;
  ⇑ = ⇓1;
}

/* **************************************************
 * Cause
 ************************************************** */
/* **************************************************
 * Je prends mon parapluie parce qu'il pleut.
 ************************************************** */
/*
rhetoricalStructure → conclusion parce_que | du_fait_que | comma premise dot {
  [rhet:cause, i:$I, ii:$II, $rest];
  [language_register:familiar|slang] ⊂ ↑;
  ↓4 = [];
  ↓6 = [];
  // Coréférence
  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;

  attest ($ID_I_I ⇒ (($ID_I_I ≠ $ID_II_I) ∧ ($ID_I_I ≠ $ID_II_II)));
  attest ($ID_I_II ⇒ (($ID_I_II ≠ $ID_II_I) ∧ ($ID_I_II ≠ $ID_II_II)));

  [modSType:$modSType, modS:$modS, language_register:$language_register, mode:$mode, tense:$tense, aspect:$aspect] ⊂ $rest;
  [modality:$modalityI, illocutionary:$illocutionaryI] ⊂ $I;
  if (¬ $modalityI) 
    $modalityI = default;
  if (¬ $illocutionaryI)
    $illocutionaryI = default;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
  if (¬ $modalityII)
    $modalityII = default;
  if (¬ $illocutionaryII)
    $illocutionaryII = default;

  if (¬ $mode)
    $mode = indicative;
  
  ↓3 = $II ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register, modSType:$modSType, modS:$modS];
  ↓5 = $I ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register];
}
*/

/* **************************************************
 * Je prends mon parapluie parce qu'il pleut.
 ************************************************** */
/*
rhetoricalStructure → premise comma conclusion dot {
  [rhet:cause, i:$I, ii:$II, $rest];
  [language_register:familiar|slang] ⊂ ↑;
  [language_register:$language_register] ⊂ ↑;
  ↓2 = [];
  ↓4 = [];

  // Coréférence
  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;
  [ii:[i:[idref:$IDREF_II_I], $IDREF_II_I_Rest]] ⊂ ↑;
  [ii:[ii:[idref:$IDREF_II_II]]] ⊂ ↑;

  //attest ($ID_I_I ⇒ (($ID_I_I ≠ $ID_II_I) ∧ ($ID_I_I ≠ $ID_II_II)));
  //attest ($ID_I_II ⇒ (($ID_I_II ≠ $ID_II_I) ∧ ($ID_I_II ≠ $ID_II_II)));

  if ($IDREF_II_I == $ID_I_II) {
        [i:[ii:[PRED:$P_ID_I_II, $ID_I_II_Rest]]] ⊂ ↑;
        [ii:[gender:$GSynth, number:$NSynth, person:$PSynth]] ⊂ ⇓1;
        $IIbis = [i:[PRED:$P_ID_I_II, sem:hyper, def:yes, $ID_I_II_Rest], $IDREF_II_I_Rest];
        [i:[sem:$SSynth]] ⊂ ⇓3;
        //println $IIbis;
        //attest ($SSynth == hyper);
        //$IIbis = [i:[PRED:_pro, gender:$GSynth, number:$NSynth, person:$PSynth], $IDREF_II_I_Rest];
        //$IIbis = [i:[PRED:_pro, gender:$GSynth], $IDREF_II_I_Rest];
        //$IIbis = [i:[PRED:_pro], $IDREF_II_I_Rest];
      } else {
        $IIbis = $II;
  }

  [language_register:$language_register, mode:$mode, tense:$tense, aspect:$aspect, time:$time] ⊂ $rest;
  [modality:$modalityI, illocutionary:$illocutionaryI] ⊂ $I;
  if (¬ $modalityI) 
    $modalityI = default;
  if (¬ $illocutionaryI)
    $illocutionaryI = default;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
  if (¬ $modalityII)
    $modalityII = default;
  if (¬ $illocutionaryII)
    $illocutionaryII = default;

  if (¬ $mode)
    $mode = indicative;
  
  ↓1 = $I ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register, time:$time];
  ↓3 = $IIbis ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];

}
*/

/* **************************************************
 * Cause
 ************************************************** */
/* **************************************************
 * Coreference with synonym or hyperonym
 ************************************************** */

rhetoricalStructure → premise_conclusion {
  [rhet:cause, i:$I, ii:$II, $rest];
  //[language_register:default] ⊂ ↑;
  
  // Coréférence
  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;
  [ii:[i:[id:$ID_II_I]]] ⊂ ↑;
  [ii:[ii:[id:$ID_II_II]]] ⊂ ↑;
  
  $isI_I = $ID_I_I && $ID_II_I && ($ID_I_I == $ID_II_I);
  $isII_I = $ID_I_II && $ID_II_I && ($ID_I_II == $ID_II_I);
  $isI_II = $ID_I_I && $ID_II_II && ($ID_I_I == $ID_II_II);
  $isII_II = $ID_I_II && $ID_II_II && ($ID_I_II == $ID_II_II);
  
  // objet principale coréfère avec sujet subordonnée
  if ($isII_I) {
    [i:[ii:[PRED:$P_I_II, id:_, def:_, $Rest_I_II]]] ⊂ ↑;
    [ii:[i:[id:_], $Rest_II]] ⊂ ↑;
    $IIbis = [i:[PRED:$P_I_II, sem:syn|hyper, def:yes], $Rest_II];
    [i:[ii:$I_II, $Rest_I]] ⊂ ↑;
    $Ibis = [ii:[sem:default, $I_II], $Rest_I];
    
    [ii:[i:[LEMMA:$lemma]]] ⊂ ⇓1;
    attest ($lemma != $P_I_II);

    [i:[ii:[number:$NSynth_I_II]], ii:[i:[number:$NSynth_II_I]]] ⊂ ⇓1;
    attest ($NSynth_I_II == $NSynth_II_I);
  }

  // Sujets coréfèrent
  else if ($isI_I) {
    print (__FILE__, " (", __LINE__, ")");
  }

  // Sujet principale coréfère avec objet subordonnée
  else if ($isI_II) {
    print (__FILE__, " (", __LINE__, ")");
  }

  // Objet principale coréfère avec objet subordonnée
  else if ($isII_II) {
    print (__FILE__, " (", __LINE__, ")");
  }

  else {
    $Ibis = $I;
    $IIbis = $II;
  }
  
  ↓1 = [i:$Ibis, ii:$IIbis, $rest];
}

/* **************************************************
 * Coreference with pro
 ************************************************** */

rhetoricalStructure → premise_conclusion {
  [rhet:cause, i:$I, ii:$II, $rest];
  //[language_register:default] ⊂ ↑;

  // Coréférence
  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;
  [ii:[i:[id:$ID_II_I]]] ⊂ ↑;
  [ii:[ii:[id:$ID_II_II]]] ⊂ ↑;

  $isI_I = $ID_I_I && $ID_II_I && ($ID_I_I == $ID_II_I);
  $isII_I = $ID_I_II && $ID_II_I && ($ID_I_II == $ID_II_I);
  $isI_II = $ID_I_I && $ID_II_II && ($ID_I_I == $ID_II_II);
  $isII_II = $ID_I_II && $ID_II_II && ($ID_I_II == $ID_II_II);

  // objet principale coréfère avec sujet subordonnée
  if ($isII_I) {
    [i:[ii:[PRED:$P_I_II, id:_, def:_, $Rest_I_II]]] ⊂ ↑;
    [ii:[i:[id:_], $Rest_II]] ⊂ ↑;
    [i:[ii:[number:$NSynth]]] ⊂ ⇓1;
    $IIbis = [i:[PRED:_pro], $Rest_II];
    [i:[ii:$I_II, $Rest_I]] ⊂ ↑;
    $Ibis = [ii:[sem:default, $I_II], $Rest_I];

    [i:[ii:[number:$NSynth_I_II, gender:$GSynth_I_II, person:$PSynth_I_II]],
     ii:[i:[number:$NSynth_II_I, gender:$GSynth_II_I, person:$PSynth_II_I]]] ⊂ ⇓1;
    attest ($NSynth_I_II == $NSynth_II_I);
    attest ($GSynth_I_II == $GSynth_II_I);
    attest ($PSynth_I_II == $PSynth_II_I);
  }

  // Sujets coréfèrent
  else if ($isI_I) {
    print (__FILE__, " (", __LINE__, ")");
  }

  // Sujet principale coréfère avec objet subordonnée
  else if ($isI_II) {
    print (__FILE__, " (", __LINE__, ")");
  }

  // Objet principale coréfère avec objet subordonnée
  else if ($isII_II) {
    print (__FILE__, " (", __LINE__, ")");
  }

  ↓1 = [i:$Ibis, ii:$IIbis, $rest];
}


premise_conclusion → premise conclusion dot {
  //println __FILE__ + " (" + __LINE__ + ")";
  //println ("↑:", ↑);
  [i:$I, ii:$II, $rest];
  [language_register:$language_register, mode:$mode] ⊂ $rest;
  [modality:$modalityI, illocutionary:$illocutionaryI, time:$timeI] ⊂ $I;
  if (¬ $modalityI)
    $modalityI = default;
  if (¬ $illocutionaryI)
    $illocutionaryI = default;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
  if (¬ $modalityII)
    $modalityII = default;
  if (¬ $illocutionaryII)
    $illocutionaryII = default;
  
  if (¬ $mode)
    $mode = indicative;
  
  ↓1 = $I ∪ [vform:tensed, mode:$mode, time:$timeI, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register];
  ↓2 = $II ∪ [vform:tensed, mode:$mode, time:$timeI, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];
  ↓3 = [];
  $ISynth = ⇓1;
  $IISynth = ⇓2;
  ⇑ = [i:$ISynth, ii:$IISynth];
}


zzzrhetoricalStructure → form premise conclusion dot form {
  //println (__FILE__ + " (" + __LINE__ + ")");
  //println ("↑:", ↑);
  [rhet:cause, i:$I, ii:$II, $rest];
  [language_register:default] ⊂ ↑;
  //↓1 = [FORM:"<rhetoricalStructure line="+__LINE__+">"];
  //↓5 = [FORM:"</rhetoricalStructure>"];
  ↓1 = [FORM:""];
  ↓5 = [FORM:""];
  ↓4 = [];

  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;
  [ii:[i:[id:$ID_II_I]]] ⊂ ↑;
  [ii:[ii:[id:$ID_II_II]]] ⊂ ↑;

$I_I = $ID_I_I && $ID_II_I && ($ID_I_I == $ID_II_I);
$II_I = $ID_I_II && $ID_II_I && ($ID_I_II == $ID_II_I);
$I_II = $ID_I_I && $ID_II_II && ($ID_I_I == $ID_II_II);
$II_II = $ID_I_II && $ID_II_II && ($ID_I_II == $ID_II_II);

if ($I_I)
    println (".sujets coréfèrent");
if ($II_I)
    println (".objet principale coréfère avec sujet subordonnée");
if ($I_II)
    println (".sujet principale coréfère avec objet subordonnée");
if ($II_II)
    println (".objet principale coréfère avec objet subordonnée");

if ($II_I) {
        [i:[ii:[PRED:$P_I_II, id:_, def:_, $Rest_I_II]]] ⊂ ↑;
        [ii:[i:[id:_], $Rest_II]] ⊂ ↑;
        [ii:[number:$NSynth]] ⊂ ⇓2;
        $IIbis = [i:[PRED:_pro, gender:$GSynth, number:$NSynth, person:$PSynth], $Rest_II];

      } else {
        $IIbis = $II;
  }


  [language_register:$language_register, mode:$mode, time:$time] ⊂ $rest;
  [modality:$modalityI, illocutionary:$illocutionaryI] ⊂ $I;
  if (¬ $modalityI)
    $modalityI = default;
  if (¬ $illocutionaryI)
    $illocutionaryI = default;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
  if (¬ $modalityII)
    $modalityII = default;
  if (¬ $illocutionaryII)
    $illocutionaryII = default;

  if (($language_register == slang) ∧ ($illocutionaryII ≠ ask)) {
     ↓3 = [];
     attest (#3);
  }

  if (¬ $mode)
    $mode = indicative;

  ↓2 = $I ∪ [vform:tensed, mode:$mode, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register, time:$time];
  ↓3 = $IIbis ∪ [vform:tensed, mode:$mode, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register, time:$time];
}

/* **************************************************
 * Cause
 ************************************************** */

zzzrhetoricalStructure → form premise [parce_que] conclusion form {
  print (__FILE__ + " (" + __LINE__ + ")");
  println (↑);
  [rhet:cause, i:[i:[id:$ID]], ii:[i:[idref:$ID]], $rest];
  //↓1 = [FORM:"<rhetoricalStructure line="+__LINE__+">"];
  //↓5 = [FORM:"</rhetoricalStructure>"];
  ↓1 = [FORM:""];
  ↓5 = [FORM:""];
  // Coréférence i:[i] avec ii:[i]
  [i:$I, ii:$II] ⊂ ↑;
  [i:[i:$I_I], ii:[i:$II_I, $II_rest]] ⊂ ↑;

  [modSType:$modSType, modS:$modS, language_register:$language_register, mode:$mode, tense:$tense, aspect:$aspect] ⊂ ↑;
  [modality:$modalityI, illocutionary:$illocutionaryI] ⊂ $I;
  if (¬ $modalityI) 
    $modalityI = default;
  if (¬ $illocutionaryI)
    $illocutionaryI = default;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
  if (¬ $modalityII)
    $modalityII = default;
  if (¬ $illocutionaryII)
    $illocutionaryII = default;

  if (($language_register == slang) ∧ ($illocutionaryII ≠ ask)) {
     ↓3 = [];
     attest (#3);
  }

  ↓2 = $I ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register, modSType:$modSType, modS:$modS];
  [i:$I_ISynt] ⊂ ⇓2;

   [PRED:$I_IPred, def:$I_ID, gender:$I_IG, number:$I_IN, person:$I_IP] ⊂ $I_ISynt;
   //[def:$II_ID, gender:$II_IG, number:$II_IN, person:$II_IP] ⊂ $II_I;
   // indéfinie => hypéronyme défini
   // Le garagiste a changé les pneus du camion. Il l'a réparé.
   // Un garagiste a changé les pneus du camion. L'homme l'a réparé.
   // vrai sur deux phrases
   //if ($I_ID == no){
   //$II_Inh = [i:[PRED:$I_IPred, gender:$I_IG, number:$I_IN, def:yes, sem:hyper], vform:tensed, $II_rest];
   //}
   //else {
     $II_Inh = [i:[PRED:__pro, gender:$I_IG, number:$I_IN, person:$I_IP], vform:tensed, $II_rest];
     //}
   ↓4 = $II_Inh ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];
}

/* **************************************************
 * Si hier tu avais gagné...
 * Si aujourd'hui tu gagnais...
 * Si demain tu gagnais...
 ************************************************** */

premise → form si modalClause comma form {
  //println (__FILE__ + " (" + __LINE__ + ")");
  //println ("↑:", ↑);
  //↓1 = [FORM:"<premise line="+__LINE__+">"];
  //↓5 = [FORM:"</premise>"];
  ↓1 = [FORM:""];
  ↓5 = [FORM:""];
  [language_register:default] ⊂ ↑;
  [modSType:$modSType, modS:$modS, language_register:$language_register, time:$time, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  $mode = indicative;
  if (¬ $aspect)
     $aspect = default;

  [modality:$modalityI] ⊂ ↑;

  if ($time == tomorrow) {
      $tense = present;
  }
  else if ($time == yesterday) {
    if ($aspect == continuous) {
      $mode = indicative; $tense = past;
    }
    else {
      $mode = indicative; $tense = past; $aspect = pluperfect;
    }
  }
  else if (¬ $tense ∨ ($tense == present)) {
    if ($aspect == continuous) {
      $tense = present;
    }
    else {
      $tense = present;
    }
  }
  else if ($tense == past) {
    if ($aspect == continuous) {
      $mode = indicative; $tense = past;
    }
    else {
      $mode = indicative; $tense = past; $aspect = pluperfect;
    }
  }
  else if ($tense == future) {
    if ($aspect == continuous) {
      $mode = indicative; $tense = past;
    }
    else {
      $mode = indicative; $tense = present;
    }
  }

  [modality:$modality] ⊂ ↑;
  if (¬ $modality) 
    $modality = default;
  ↓2 = [];
  ↓4 = [];
  ↓3 = $rest ∪ [vform:tensed, time:$time, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:default, modality:$modality, language_register:$language_register, modSType:$modSType, modS:$modS];
  ⇑ = ⇓3;
}

/* **************************************************
 * je gagnerais
 ************************************************** */

zzzpremise → form modalClause form {
  println (__FILE__ + " (" + __LINE__ + ")");
  println ("↑:", ↑);
  ↓1 = [FORM:"<premise line="+__LINE__+">"];
  ↓3 = [FORM:"</premise>"];
  ↓1 = [FORM:""];
  ↓3 = [FORM:""];
  [language_register:familiar|slang];
  [modSType:$modSType, modS:$modS, language_register:$language_register, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  if (¬ $aspect)
     $aspect = default;
  [modality:$modality] ⊂ ↑;
  if (¬ $tense ∨ ($tense == present) ∨ ($tense == future)) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense = present; $aspect = continuous;
    }
    else {
      $mode = conditional; $tense = present;
    }
  }
  else if ($tense == past) { 
    if ($aspect == continuous) {
      println ("à faire: deux auxiliaires (aurait été en train de)");
      $mode = conditional; $tense = past; $aspect = continuous;
    }
    else {
      $mode = conditional; $tense = past; $aspect = pluperfect;
    }
  }
  
  if (¬ $modality) 
    $modality = default;
  ↓2 = $rest ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:default, modality:$modality, language_register:$language_register, modSType:$modSType, modS:$modS];
  ⇑ = ⇓2;
  
}

/* **************************************************
 * Si hier tu avais gagné... tu aurais remporté le pactole
 * Si aujourd'hui tu gagnes... tu remporteras le pactole
 * Si aujourd'hui le garagiste répare ta voiture... tu pourras aller à la campagne.
 * Si aujourd'hui le garagiste répare ta voiture... elle pourra démarer.
 * Si demain tu gagnais... tu remporterais le pactole
 ************************************************** */

conclusion → form modalClause form {
  //println __FILE__ + " (" + __LINE__ + ")";
  //println ("↑:", ↑);
  //↓1 = [FORM:"<conclusion line="+__LINE__+">"];
  //↓3 = [FORM:"</conclusion>"];
  ↓1 = [FORM:""];
  ↓3 = [FORM:""];
  [language_register:default] ⊂ ↑;
  [language_register:$language_register, mode:$mode, aspect:$aspect, time:$time, $rest] ⊂ ↑;

  if ($time == yesterday) {
      $mode = conditional; $tense = past; $aspect = default;
     }
  else if ($time == today|now) {
      $mode = indicative; $tense = future;
     }
  else if ($time == tomorrow) {
      $mode = indicative; $tense = future;
     }

  else if ($tense == future) {
    if ($aspect == continuous) {
      $mode = conditional; $tense  = present;
    }
    else {
      $mode = conditional; $tense  = present; $aspect = default;
    }
  }
  
  [modality:$modality, illocutionary:$illocutionary] ⊂ ↑;
  if (¬ $modality)
    $modality = default;
  if (¬ $illocutionary)
    $illocutionary = default;
  
  ↓2 = [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionary, modality:$modality, language_register:$language_register, $rest];
  
  ⇑ = ⇓2;
}

/* **************************************************
 * Je gagnerais le pactole
 ************************************************** */

conclusion → form modalClause form {
  println (__FILE__ + " (" + __LINE__ + ")");
  println ("↑:", ↑);
  //↓1 = [FORM:"<conclusion line="+__LINE__+">"];
  //↓3 = [FORM:"</conclusion>"];
  ↓1 = [FORM:""];
  ↓3 = [FORM:""];
  [language_register:familiar|slang];
  [language_register:$language_register, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  if (¬ $tense ∨ ($tense == present)) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense  = present; $aspect = default;
    }
    else {
      $mode = conditional; $tense = present;
    }
  }
  else if ($tense == past) { 
    if ($aspect == continuous) {
      println ("à faire: deux auxiliaires (aurait été en train de)");
      $mode = conditional; $tense  = past; $aspect = default;
    }
    else {
      $mode = conditional; $tense  = past;
    }
  }
  else if ($tense == future) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense  = present; $aspect = default;
    }
    else {
      $mode = conditional; $tense  = present; $aspect = default;
    }
  }
  
  [modality:$modality, illocutionary:$illocutionary] ⊂ ↑;
  if (¬ $modality)
    $modality = default;
  if (¬ $illocutionary)
    $illocutionary = default;
  
  ↓2 = $rest ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionary, modality:$modality, language_register:$language_register];
  
  ⇑ = ⇓2;
}

/* **************************************************
 * succession
 ************************************************** */

rhetoricalStructure → modalClause et illocutionaryAct {
  [PRED:et, i:$I, ii:$II];
  [vform:$vform, mode:$mode, illocutionary:$illocutionary, modality:$modality] ⊂ ↑;
  if (¬ $mode)
    $mode = indicative;
  if (¬ $vform)
    $vform = tensed;
  ↓1 = $I ∪ [vform:$vform, mode:$mode, illocutionary:$illocutionary, modality:$modality];
  ↓2 = [];
  ↓3 = $II ∪ [vform:$vform, mode:$mode, illocutionary:$illocutionary, modality:$modality];
}

// /* **************************************************
//  * Coréférence objet de la cause avec agent de l'effet
//  * Si j'avais brûlé la voiture, elle marcherait forcément moins bien.
//  * J'ai brûlé une voiture. Le véhicule marche forcément moins bien.
//  ************************************************** */
// 
// rhetoricalStructure → form premise conclusion form {
//   ↓1 = [FORM:"<VP line="+__LINE__+">"];
//   ↓4 = [FORM:"</VP>"];
//   //↓1 = [FORM:""];
//   //↓4 = [FORM:""];
//   [PRED:cause, i:[ii:[id:$ID]], ii:[i:[idref:$ID]], $rest];
//   [i:$I, ii:[i:_, $iiRest]] ⊂ ↑;
//   [ii:$II] ⊂ ↑;
//   $inhI = $I;
//   [i:$iSynt, ii:$iiSynt] ⊂ ⇓2;

//   [modSType:$modSType, modS:$modS, language_register:$language_register, mode:$mode, tense:$tense, aspect:$aspect] ⊂ ↑;
//   if (¬ $aspect)
//      $aspect = default;
//   [modality:$modalityI] ⊂ $I;
//   if (¬ $modalityI) 
//     $modalityI = default;
//   [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
//   if (¬ $modalityII)
//     $modalityII = default;
//   if (¬ $illocutionaryII)
//     $illocutionaryII = default;

//   [PRED:$pred, def:$iiD, gender:$iiG, number:$iiN, person:$iiP] ⊂ $iiSynt;
//   [gender:$iG, number:$iN, person:$iP] ⊂ $iSynt;
//   // indéfinie => hypéronyme défini
//   if ($iiD == no){
//     $inhII = [i:[PRED:$pred, gender:$iiG, number:$iiN, def:yes, sem:hyper], vform:tensed, $iiRest];
//   }
//   else if ($iN ≠ $iiN ∨ $iG ≠ $iiG)
//     $inhII = [i:[PRED:__pro, gender:$iiG, number:$iiN, person:$iiP], vform:tensed, $iiRest];
//   else 
//     $inhII = [i:[PRED:celui_ci, gender:$iiG, number:$iiN, person:$iiP, dem:yes], vform:tensed, $iiRest];
//   ↓2 = $inhI ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:default, modality:$modalityI, language_register:$language_register, modSType:$modSType, modS:$modS];
//   ↓3 = $inhII ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];
// }

// /* **************************************************
//  * Coréférence objet de la cause avec agent de l'effet
//  * Si j'avais brûlé la voiture, elle marcherait forcément moins bien.
//  * J'ai brûlé une voiture. Le véhicule marche forcément moins bien.
//  ************************************************** */
// 
// rhetoricalStructure → illocutionaryAct illocutionaryAct {
//   [PRED:cause, i:[i:[id:$ID]], ii:[i:[idref:$ID]]];
//   [i:$I, ii:[i:_, $iiRest]] ⊂ ↑;
//   ↓1 = $I ∪ [vform:tensed];
//   [i:$iSynt] ⊂ ⇓1;

//   // On cherche la référence précédente
//   [PRED:$pred, def:$D, gender:$G, number:$N, person:$P, human:$H] ⊂ $iSynt;
  
//   // indéfinie => hypéronyme défini
//   if ($D == no){
//     if ($H == yes)
//       ↓2 = [i:[PRED:$pred, gender:$G, number:$N, def:yes, sem:hyper], vform:tensed, $iiRest];
//     else
//       ↓2 = [i:[PRED:$pred, number:$N, def:yes, sem:hyper], vform:tensed, $iiRest];
//   }
//   else
//     ↓2 = [i:[PRED:__pro, gender:$G, number:$N, person:$P], vform:tensed, $iiRest];
// }

// /* **************************************************
//  * Succession
//  ************************************************** */
// 
// rhetoricalStructure → timeClause comma form illocutionaryAct {
//   [PRED:succ, i:[ii:[id:$ID]], ii:[i:[idref:$ID]]];
//   [i:$I, ii:[i:_, $iiRest]] ⊂ ↑;
//   ↓1 = $I ∪ [vform:tensed];
//   [i:$iSynt, ii:$iiSynt] ⊂ ⇓1;

//   [PRED:$pred, def:$iiD, gender:$iiG, number:$iiN, person:$iiP] ⊂ $iiSynt;

//   [gender:$iG, number:$iN, person:$iP] ⊂ $iSynt;

//   ↓2 = [];
//   ↓3 = [FORM:"puis"];

//   // indéfinie => hypéronyme défini
//   if ($iiD == no)
//     ↓4 = [i:[PRED:$pred, gender:$iiG, number:$iiN, def:yes, sem:hyper], vform:tensed, $iiRest];
//   else if ($iN ≠ $iiN ∨ $iG ≠ $iiG)
//     ↓4 = [i:[PRED:__pro, gender:$iiG, number:$iiN, person:$iiP], vform:tensed, $iiRest];
//   else 
//     ↓4 = [i:[PRED:celui_ci, gender:$iiG, number:$iiN, person:$iiP, dem:yes], vform:tensed, $iiRest];
// }

// 
// rhetoricalStructure → timeClause comma form illocutionaryAct {
//   [PRED:succ, i:[i:[id:$ID]], ii:[i:[idref:$ID]]];
//   [i:$I, ii:[i:_, $iiRest]] ⊂ ↑;
//   ↓1 = $I ∪ [vform:tensed];
//   [i:$iSynt] ⊂ ⇓1;

//   // On cherche la référence précédente
//   [PRED:$pred, def:$D, gender:$G, number:$N, person:$P, human:$H] ⊂ $iSynt;
  
//   ↓2 = [];

//   ↓3 = [FORM:"puis"];

//   // indéfinie => hypéronyme défini
//   if ($D == no){
//     if ($H == yes)
//       ↓4 = [i:[PRED:$pred, gender:$G, number:$N, def:yes, sem:hyper], vform:tensed, $iiRest];
//     else
//       ↓4 = [i:[PRED:$pred, number:$N, def:yes, sem:hyper], vform:tensed, $iiRest];
//   }
//   else
//     ↓4 = [i:[PRED:__pro, gender:$G, number:$N, person:$P], vform:tensed, $iiRest];
// }

