Exo → KALABA P newline GLOSS P newline FRENCH P_fr newline
{
  //println __LINE__;
  ↓1 = [];
  ↓2 = ↑ ∪ [fs:no];
  ↓3 = [];
  ↓4 = [];
  ↓5 = ↑ ∪ [fs:yes];
  ↓6 = [];
  ↓7 = [];
  ↓8 = ↑;
  ↓9 = [];
}

// VI
P → [PP] NP V
{
  //println __LINE__;
  [i:$i, ii:NIL, iii:NIL, fs:$fs, $rest];
  if (#1){
    [mod:$mod] ⊂ ↑;
    ↓1 = $mod;
  }
  [valency:VI] ⊂ ⇓3;
  ↓2 = $i ∪ [case:erg, fs:$fs];
  [gender:$G, person:$P, number:$N] ⊂ ⇓2;
  ↓3 = [gender:$G, person:$P, number:$N, fs:$fs, $rest];
}

// VI
P → [PP] NP [NP|PP] V
{
  //println __LINE__;
  [i:$i, ii:$ii, iii:NIL, fs:$fs, $rest];
  if (#1){
    [mod:$mod] ⊂ ↑;
    ↓1 = $mod;
  }
  [valency:VI] ⊂ ⇓3;
  ↓2 = $i ∪ [case:erg, fs:$fs];
  [gender:$G, person:$P, number:$N] ⊂ ⇓2;
  ↓3 = [gender:$G, person:$P, number:$N, fs:$fs, $rest];
}

/***
P → [PP] NP [NP] [PP] V
{
  //println __LINE__;
  [i:$i, ii:$ii, $rest];
  //[iii:$iii, mod:$mod] ⊂ ↑;
  ↓1 = $mod;
  [realii:$realii, realiii:$realiii] ⊂ ⇓5;
  ↓2 = $i;
  [gender:$G, person:$P, number:$N] ⊂ ⇓2;
  ↓5 = [gender:$G, person:$P, number:$N, $rest];

  if ($realii == none){
    attest (!#3);
  }
  if ($realii == cod){
    ↓3 = $ii;
  }
  else if ($realii == coi){
    ↓3 = $ii ∪ [cas:dat];
  }
  else if ($realii == prepobj){
    ↓4 = $ii;
  }

  if ($realiii == coi){
    ↓4 = $iii ∪ [cas:dat];
  }
  else if ($realiii == prepobj){
    ↓4 = $iii;
  }
}
***/

NP → N DET
{
  //println __LINE__;
  ↓1 = ↑;
  [gender:$G, number:$N, case:$C] ⊂ ⇓1;
  ↓2 = ↑ ∪ [gender:$G, number:$N, case:$C];
  ⇑ = ⇓1 ∪ [person:three];
}

/***
NP → [PP] N [AP] DET
{
  //println __LINE__;
  ↓2 = ↑;
  [gender:$G, number:$N, case:$C] ⊂ ⇓2;
  ↓4 = ↑ ∪ [gender:$G];
  ⇑ = ⇓2 ∪ [person:three];
}
***/
PP → NP PREP
{
  //println __LINE__;
  ↓1 = ↑;
  ↓2 = ↑;
}    

AP → [PP] ADJ [ADV]
{
  //println __LINE__;
  ↓2 = ↑;
}


/* **************************************************
 * Morphology
 ************************************************** */
// N
N → noun_pref_case [case_fs] noun [noun_fs] noun_suff_number [number_fs] noun_suff_case [case_fs] {
  //println __LINE__;
  //println $fs;
  [number:$N, case:$C, fs:$fs] ⊂ ↑;
  [case:$CSynt] ⊂ ⇓1;
  [number:$NSynt] ⊂ ⇓5;
  [PRED:$pred, FC:$FC, CFC:$CFC, gender:$GSynt] ⊂ ⇓3;
  ↓1 = [FC:$FC, CFC:$CFC, case:$C, number:$N];
  if (#2){
    attest ($fs == yes);
    ↓2 = [case:$CSynt];
  }
  else
    attest ($fs == no);
  ↓3 = ↑;
  if (#4){
    attest ($fs == yes);
    ↓4 = [pred:$pred, fc:$FC, cfc:$CFC, gender:$GSynt];
  }
  else
    attest ($fs == no);
  ↓5 = [FC:$FC, CFC:$CFC, number:$N];
  if (#6){
    attest ($fs == yes);
    ↓6 = [number:$NSynt];
  }
  else
    attest ($fs == no);
  ↓7 = [FC:$FC, CFC:$CFC, case:$C, number:$N];
  if (#8){
    attest ($fs == yes);
    ↓8 = [case:$CSynt];
  }
  else
    attest ($fs == no);
  ⇑ = ⇓3;
}

// V
V → verb_pref_tense [tense_fs] verb [verb_fs] verb_suff_gender [gender_fs] verb_suff_person [person_fs] {
  //println __LINE__;
  [tense:$T, gender:$G, person:$P, number:$N, fs:$fs] ⊂ ↑;
  ↓1 = [tense:$T];
  if (#2){
    attest ($fs == yes);
    ↓2 = [tense:$TSynt];
  }
  else
    attest ($fs == no);
  ↓3 = ↑;
  [PRED:$pred, FC:$FC, valency:$valencySynt, tense:$TSynt, gender:$GSynt, person:$PSynt, number:$NSynt] ⊂ ⇓3;
  if (#4){
    attest ($fs == yes);
    ↓4 = [pred:$pred, valency:$valencySynt];
  }
  else
    attest ($fs == no);
  ↓5 = [FC:$FC, gender:$G];
  if (#6){
    attest ($fs == yes);
    ↓6 = [gender:$GSynt];
  }
  else
    attest ($fs == no);
  ↓7 = [FC:$FC, person:$P, number:$N];
  if (#8){
    attest ($fs == yes);
    ↓8 = [person:$PSynt, number:$NSynt];
  }
  else
    attest ($fs == no);
  ⇑ = ⇓3;
}

// ADJ
A → adj_pref_number adj adj_suff_gender adj_suff_number {
  //println __LINE__;
  [gender:$G, number:$N] ⊂ ↑;
  [FC:$FC] ⊂ ⇓2;
  ↓1 = [FC:$FC, number:$N];
  ↓2 = ↑;
  ↓3 = [FC:$FC, gender:$G];
  ↓4 = [FC:$FC, number:$N];
  ⇑ = ⇓2;
}

// DET
DET → det_pref_case [case_fs] det_pref_number [number_fs] det [det_fs] det_suff_gender [gender_fs] det_suff_case [case_fs] {
  println __LINE__;
  [case:$C, number:$N, gender:$G, fs:$fs] ⊂ ↑;
  ↓1 = [case:$C];
  if (#2){
    attest ($fs == yes);
    ↓2 = [case:$C];
  }
  else
    attest ($fs == no);
  ↓3 = [number:$N];
  if (#4){
    attest ($fs == yes);
    ↓4 = [number:$N];
  }
  else
    attest ($fs == no);
  ↓5 = ↑;
  [def:$DefSynt, dem:$DemSynt] ⊂ ⇓5;
  if (#6){
    attest ($fs == yes);
    ↓6 = [def:$DefSynt, dem:$DemSynt, gender:$G];
  }
  else
    attest ($fs == no);
  ↓7 = [gender:$G];
  if (#8){
    attest ($fs == yes);
    ↓8 = [gender:$G];
  }
  else
    attest ($fs == no);
  ↓9 = [case:$C];
  if (#10){
    attest ($fs == yes);
    ↓10 = [case:$C];
  }
  else
    attest ($fs == no);
  ⇑ = ⇓5;
}

/* ************************************************************
 * Français
 ************************************************************ */
// VI
P_fr → NP_fr V_fr
{
  //println __LINE__;
  [i:$i, ii:NIL, iii:NIL, $rest];
  [valency:VI] ⊂ ⇓2;
  ↓1 = $i;
  [person:$P, number:$N] ⊂ ⇓1;
  ↓2 = [person:$P, number:$N, $rest];
}

NP_fr → DET_fr N_fr 
{
  //println __LINE__;
  ↓2 = ↑;
  [gender:$G, number:$N] ⊂ ⇓2;
  ↓1 = ↑ ∪ [gender:$G];
  ⇑ = ⇓2 ∪ [person:three];
}

PP_fr → PREP_fr NP_fr
{
  //println __LINE__;
  ↓1 = ↑;
  ↓2 = ↑;
}    

AP_fr → [ADV_fr] ADJ_fr [PP_fr] 
{
  //println __LINE__;
  ↓2 = ↑;
}
