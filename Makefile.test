#*************************************************
#
# ELVEX
#
# Copyright 2014-2023 LABRI,
# CNRS (UMR 5800), the University of Bordeaux,
# and the Bordeaux INP
#
# Author:
# Lionel Clément
# LaBRI - Université Bordeaux 
# 351, cours de la Libération
# 33405 Talence Cedex - France
# lionel.clement@u-bordeaux.fr
#
# This file is part of ELVEX.
#
#**************************************************

# Phony targets to avoid conflicts with files of the same name
.PHONY: test all_pdf clean

.SUFFIXES: .input .rules .lexicon .output .xml .dot .pdf .fsa .html .morpho .pattern .fromScratch

# Name of the Elvex program
elvex = bin/elvex
elvexbuildlexicon = bin/elvexbuildlexicon
# Check the existence of dot (Graphviz)
DOT = $(shell command -v dot 2> /dev/null)
# Check the existence of xsltproc
XSLTPROC = $(shell command -v xsltproc 2> /dev/null)
xslfile = xsl/xml2CS-dot-graph.xsl

# Directory where test files are located
test_dir = test

# List of all *.input files
input_files = $(wildcard $(test_dir)/*.input)

# Specific targets to generate all *.output files
all_output: $(patsubst $(test_dir)/%.input,$(test_dir)/%.output,$(input_files))

# Target to run tests
test: all_output
	@for file in $(input_files); do \
		base=$$(basename $$file .input); \
		sort $(test_dir)/$$base.output > $(test_dir)/$$base.output.sorted; \
		sort $(test_dir)/$$base.test > $(test_dir)/$$base.test.sorted; \
		if diff $(test_dir)/$$base.output.sorted $(test_dir)/$$base.test.sorted> /dev/null 2>&1; then \
			echo "Test $$base passed."; \
		else \
			echo "Test $$base failed. Please check the trace with --trace options."; \
		fi; \
		rm  $(test_dir)/$$base.output.sorted $(test_dir)/$$base.test.sorted; \
	done

# Specific targets to generate all *.pdf files
all_pdf: $(patsubst $(test_dir)/%.input,$(test_dir)/%.pdf,$(input_files))

# Rule to generate an *.output file from an *.input file
%.output: %.input %.rules %.lexicon $(elvex)
	@echo "build $@ from $^"
	@if test -f $*.fromScratch; then \
		make -f Makefile.test $*.pattern $*.morpho ; \
	fi
	@if test -f $*.pattern; then \
		make -f Makefile.test $*.fsa ; \
		$(if $(wildcard $*.macros), \
			$(elvex) -macrosFile $*.macros -cld test -clf $(notdir $(basename $<)) -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< > $@, \
			$(elvex) -cld test -clf $(notdir $(basename $<)) -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< > $@); \
	else \
		$(if $(wildcard $*.macros),\
		 	$(elvex) -macrosFile $*.macros -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< > $@, \
		 	$(elvex) -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< > $@); \
	fi

# Rule to generate an *.output file from an *.input file
%.html: %.input %.rules %.lexicon $(elvex)
	@echo "build $@ from $^"
	@if test -f $*.pattern; then \
		make -f Makefile.test $*.fsa ; \
		$(if $(wildcard $*.macros), \
			$(elvex) --trace -macrosFile $*.macros -cld test -clf $(notdir $(basename $<)) -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< > $@, \
			$(elvex) --trace -cld test -clf $(notdir $(basename $<)) -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< > $@); \
	else \
		$(if $(wildcard $*.macros),\
		 	$(elvex) --trace -macrosFile $*.macros -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< > $@, \
		 	$(elvex) --trace -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< > $@); \
	fi

%.xml: %.input %.rules %.lexicon $(elvex)
	@echo "build $@ from $^"
	@if test -f $*.pattern; then \
		make -f Makefile.test $*.fsa ; \
		$(if $(wildcard $*.macros), \
			$(elvex) -macrosFile $*.macros -cld test -clf $(notdir $(basename $<)) -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< -xml $*.xml > /dev/null 2>&1, \
			$(elvex) -cld test -clf $(notdir $(basename $<)) -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< -xml $*.xml > /dev/null 2>&1); \
	else \
		$(if $(wildcard $*.macros),\
		 	$(elvex) -macrosFile $*.macros -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< -xml $*.xml > /dev/null 2>&1, \
		 	$(elvex) -rulesFile $*.rules -lexiconFile $*.lexicon -inputFile $< -xml $*.xml > /dev/null 2>&1); \
	fi

# Check the existence of xsltproc
%.dot: %.xml $(xslfile)
	@echo "build $@ from $^"
	@if test -z "$(XSLTPROC)"; then \
		echo "Error: xsltproc is not installed."; \
	else \
		$(XSLTPROC) $(xslfile) $*.xml > $@; \
	fi

# Check the existence of dot (Graphviz)
%.pdf: %.dot
	@echo "build $@ from $^"
	@if test -z "$(DOT)" ; then \
		echo "Error: dot (Graphviz) is not installed."; \
	else \
		$(DOT) -T pdf -o $@ $<; \
	fi

%.fsa: %.tmp-morpho %.tmp-pattern
	@echo "build $@ from $^"
	@$(if $(wildcard $*.macros), \
			$(elvexbuildlexicon) -cld . -clf $* -macrosFile $*.macros -patternFile $*.tmp-pattern -morphoFile $*.tmp-morpho build, \
			$(elvexbuildlexicon) -cld . -clf $* -patternFile $*.tmp-pattern -morphoFile $*.tmp-morpho build ); \
	

%.tmp-morpho: %.tmp-form %.tmp-pos %.tmp-lemma %.tmp-features
	@echo "build $@ from $^"
	@paste $*.tmp-form $*.tmp-pos $*.tmp-lemma $*.tmp-features > $@

%.tmp-form: %.tmp-fplf
	@echo "build $@ from $^"
	@grep -v '^//' < $< | cut -f1 > $@

%.tmp-pos: %.tmp-fplf
	@echo "build $@ from $^"
	@grep -v '^//' < $< | cut -f2 > $@

%.tmp-lemma: %.tmp-fplf
	@echo "build $@ from $^"
	@cut -f3 < $< | tr '\-/\.' '____' > $@

%.tmp-features: %.tmp-fplf
	@echo "build $@ from $^"
	@cut -f4 < $< | tr '\-/\.' '____' > $@

%.tmp-pattern: %.pattern
	@echo "build $@ from $^"
	@sed -e '/^#/d' -e '/^\/\//d' -e '/^[ 	]*$$/d' < $< | tr '\-/\.' '____' | sort -u > $@

%.tmp-fplf: %.morpho
	@echo "build $@ from $^"
	@sed -e '/^#/d' -e '/^\/\//d' -e '/^[ 	]*$$/d' < $< | sort -u > $@

%.morpho:
	@echo "build $@"
	@if [ -e $*.fromScratch ]; then \
		python script.py $@ $*.pattern; \
	fi

%.pattern:
	@echo "build $@"
	@if [ -e $*.fromScratch ]; then \
		python script.py $@ $*.pattern; \
	fi

# Cleaning generated files
clean:
	@rm -f $(test_dir)/*.output $(test_dir)/*.pdf $(test_dir)/*.fsa $(test_dir)/*.tbl
	@for fromScratchFile in $(test_dir)/*.fromScratch; do \
		base=$$(basename $$fromScratchFile .fromScratch); \
		rm -f $(test_dir)/$$base.morpho $(test_dir)/$$base.pattern; \
	done
