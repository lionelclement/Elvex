# Makefile.in generated by automake 1.16.2 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# ##################################################
#
# ELVEX
#
# Copyright 2019 LABRI, 
# CNRS (UMR 5800), the University of Bordeaux,
# and the Bordeaux INP
#
# Author: 
# Lionel Clément
# LaBRI -- Université Bordeaux 
# 351, cours de la Libération
# 33405 Talence Cedex - France
# lionel.clement@labri.fr
# 
# This file is part of ELVEX.
#
################################################## #


am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/elvex
pkgincludedir = $(includedir)/elvex
pkglibdir = $(libdir)/elvex
pkglibexecdir = $(libexecdir)/elvex
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = elvex$(EXEEXT) elvexdebug$(EXEEXT) \
	elvexbuildlexicon$(EXEEXT) elvexpostedition_fr$(EXEEXT) \
	elvexpostedition_en$(EXEEXT)
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_elvex_OBJECTS = elvex-rulesyacc.$(OBJEXT) elvex-ruleslex.$(OBJEXT) \
	elvex-bitset.$(OBJEXT) elvex-compact-lexicon-buffer.$(OBJEXT) \
	elvex-compact-lexicon-fsa.$(OBJEXT) \
	elvex-compact-lexicon-info.$(OBJEXT) \
	elvex-compact-lexicon-tree.$(OBJEXT) \
	elvex-compact-lexicon.$(OBJEXT) elvex-entries.$(OBJEXT) \
	elvex-entry.$(OBJEXT) elvex-environment.$(OBJEXT) \
	elvex-feature.$(OBJEXT) elvex-features.$(OBJEXT) \
	elvex-flags.$(OBJEXT) elvex-forest.$(OBJEXT) \
	elvex-forestidentifier.$(OBJEXT) elvex-forestmap.$(OBJEXT) \
	elvex-grammar.$(OBJEXT) elvex-id.$(OBJEXT) \
	elvex-item.$(OBJEXT) elvex-itemset.$(OBJEXT) \
	elvex-lexicon.$(OBJEXT) elvex-list.$(OBJEXT) \
	elvex-listfeatures.$(OBJEXT) elvex-main.$(OBJEXT) \
	elvex-memoization-map.$(OBJEXT) \
	elvex-memoization-value.$(OBJEXT) elvex-node.$(OBJEXT) \
	elvex-parser.$(OBJEXT) elvex-rule.$(OBJEXT) \
	elvex-serializable.$(OBJEXT) elvex-statement.$(OBJEXT) \
	elvex-statements.$(OBJEXT) elvex-synthesizer.$(OBJEXT) \
	elvex-term.$(OBJEXT) elvex-terms.$(OBJEXT) \
	elvex-value.$(OBJEXT) elvex-variableflag.$(OBJEXT) \
	elvex-vartable.$(OBJEXT)
elvex_OBJECTS = $(am_elvex_OBJECTS)
elvex_DEPENDENCIES =
elvex_LINK = $(CXXLD) $(elvex_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
am_elvexbuildlexicon_OBJECTS = elvexbuildlexicon-rulesyacc.$(OBJEXT) \
	elvexbuildlexicon-ruleslex.$(OBJEXT) \
	elvexbuildlexicon-bitset.$(OBJEXT) \
	elvexbuildlexicon-buildlexicon.$(OBJEXT) \
	elvexbuildlexicon-compact-lexicon-buffer.$(OBJEXT) \
	elvexbuildlexicon-compact-lexicon-fsa.$(OBJEXT) \
	elvexbuildlexicon-compact-lexicon-info.$(OBJEXT) \
	elvexbuildlexicon-compact-lexicon-tree.$(OBJEXT) \
	elvexbuildlexicon-compact-lexicon.$(OBJEXT) \
	elvexbuildlexicon-entries.$(OBJEXT) \
	elvexbuildlexicon-entry.$(OBJEXT) \
	elvexbuildlexicon-environment.$(OBJEXT) \
	elvexbuildlexicon-feature.$(OBJEXT) \
	elvexbuildlexicon-features.$(OBJEXT) \
	elvexbuildlexicon-flags.$(OBJEXT) \
	elvexbuildlexicon-forest.$(OBJEXT) \
	elvexbuildlexicon-forestidentifier.$(OBJEXT) \
	elvexbuildlexicon-forestmap.$(OBJEXT) \
	elvexbuildlexicon-grammar.$(OBJEXT) \
	elvexbuildlexicon-id.$(OBJEXT) \
	elvexbuildlexicon-item.$(OBJEXT) \
	elvexbuildlexicon-itemset.$(OBJEXT) \
	elvexbuildlexicon-lexicon.$(OBJEXT) \
	elvexbuildlexicon-list.$(OBJEXT) \
	elvexbuildlexicon-listfeatures.$(OBJEXT) \
	elvexbuildlexicon-node.$(OBJEXT) \
	elvexbuildlexicon-parser.$(OBJEXT) \
	elvexbuildlexicon-rule.$(OBJEXT) \
	elvexbuildlexicon-serializable.$(OBJEXT) \
	elvexbuildlexicon-statement.$(OBJEXT) \
	elvexbuildlexicon-statements.$(OBJEXT) \
	elvexbuildlexicon-synthesizer.$(OBJEXT) \
	elvexbuildlexicon-term.$(OBJEXT) \
	elvexbuildlexicon-terms.$(OBJEXT) \
	elvexbuildlexicon-value.$(OBJEXT) \
	elvexbuildlexicon-variableflag.$(OBJEXT) \
	elvexbuildlexicon-vartable.$(OBJEXT)
elvexbuildlexicon_OBJECTS = $(am_elvexbuildlexicon_OBJECTS)
elvexbuildlexicon_DEPENDENCIES =
elvexbuildlexicon_LINK = $(CXXLD) $(elvexbuildlexicon_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
am_elvexdebug_OBJECTS = elvexdebug-rulesyacc.$(OBJEXT) \
	elvexdebug-ruleslex.$(OBJEXT) elvexdebug-bitset.$(OBJEXT) \
	elvexdebug-compact-lexicon-buffer.$(OBJEXT) \
	elvexdebug-compact-lexicon-fsa.$(OBJEXT) \
	elvexdebug-compact-lexicon-info.$(OBJEXT) \
	elvexdebug-compact-lexicon-tree.$(OBJEXT) \
	elvexdebug-compact-lexicon.$(OBJEXT) \
	elvexdebug-entries.$(OBJEXT) elvexdebug-entry.$(OBJEXT) \
	elvexdebug-environment.$(OBJEXT) elvexdebug-feature.$(OBJEXT) \
	elvexdebug-features.$(OBJEXT) elvexdebug-flags.$(OBJEXT) \
	elvexdebug-forest.$(OBJEXT) \
	elvexdebug-forestidentifier.$(OBJEXT) \
	elvexdebug-forestmap.$(OBJEXT) elvexdebug-grammar.$(OBJEXT) \
	elvexdebug-id.$(OBJEXT) elvexdebug-item.$(OBJEXT) \
	elvexdebug-itemset.$(OBJEXT) elvexdebug-lexicon.$(OBJEXT) \
	elvexdebug-list.$(OBJEXT) elvexdebug-listfeatures.$(OBJEXT) \
	elvexdebug-main.$(OBJEXT) elvexdebug-memoization-map.$(OBJEXT) \
	elvexdebug-memoization-value.$(OBJEXT) \
	elvexdebug-node.$(OBJEXT) elvexdebug-parser.$(OBJEXT) \
	elvexdebug-rule.$(OBJEXT) elvexdebug-serializable.$(OBJEXT) \
	elvexdebug-statement.$(OBJEXT) elvexdebug-statements.$(OBJEXT) \
	elvexdebug-synthesizer.$(OBJEXT) elvexdebug-term.$(OBJEXT) \
	elvexdebug-terms.$(OBJEXT) elvexdebug-value.$(OBJEXT) \
	elvexdebug-variableflag.$(OBJEXT) \
	elvexdebug-vartable.$(OBJEXT)
elvexdebug_OBJECTS = $(am_elvexdebug_OBJECTS)
elvexdebug_DEPENDENCIES =
elvexdebug_LINK = $(CXXLD) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
am_elvexpostedition_en_OBJECTS = postedition_en.$(OBJEXT)
elvexpostedition_en_OBJECTS = $(am_elvexpostedition_en_OBJECTS)
elvexpostedition_en_LDADD = $(LDADD)
am_elvexpostedition_fr_OBJECTS = postedition_fr.$(OBJEXT)
elvexpostedition_fr_OBJECTS = $(am_elvexpostedition_fr_OBJECTS)
elvexpostedition_fr_LDADD = $(LDADD)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = ./$(DEPDIR)/elvex-bitset.Po \
	./$(DEPDIR)/elvex-compact-lexicon-buffer.Po \
	./$(DEPDIR)/elvex-compact-lexicon-fsa.Po \
	./$(DEPDIR)/elvex-compact-lexicon-info.Po \
	./$(DEPDIR)/elvex-compact-lexicon-tree.Po \
	./$(DEPDIR)/elvex-compact-lexicon.Po \
	./$(DEPDIR)/elvex-entries.Po ./$(DEPDIR)/elvex-entry.Po \
	./$(DEPDIR)/elvex-environment.Po ./$(DEPDIR)/elvex-feature.Po \
	./$(DEPDIR)/elvex-features.Po ./$(DEPDIR)/elvex-flags.Po \
	./$(DEPDIR)/elvex-forest.Po \
	./$(DEPDIR)/elvex-forestidentifier.Po \
	./$(DEPDIR)/elvex-forestmap.Po ./$(DEPDIR)/elvex-grammar.Po \
	./$(DEPDIR)/elvex-id.Po ./$(DEPDIR)/elvex-item.Po \
	./$(DEPDIR)/elvex-itemset.Po ./$(DEPDIR)/elvex-lexicon.Po \
	./$(DEPDIR)/elvex-list.Po ./$(DEPDIR)/elvex-listfeatures.Po \
	./$(DEPDIR)/elvex-main.Po ./$(DEPDIR)/elvex-memoization-map.Po \
	./$(DEPDIR)/elvex-memoization-value.Po \
	./$(DEPDIR)/elvex-node.Po ./$(DEPDIR)/elvex-parser.Po \
	./$(DEPDIR)/elvex-rule.Po ./$(DEPDIR)/elvex-ruleslex.Po \
	./$(DEPDIR)/elvex-rulesyacc.Po \
	./$(DEPDIR)/elvex-serializable.Po \
	./$(DEPDIR)/elvex-statement.Po ./$(DEPDIR)/elvex-statements.Po \
	./$(DEPDIR)/elvex-synthesizer.Po ./$(DEPDIR)/elvex-term.Po \
	./$(DEPDIR)/elvex-terms.Po ./$(DEPDIR)/elvex-value.Po \
	./$(DEPDIR)/elvex-variableflag.Po \
	./$(DEPDIR)/elvex-vartable.Po \
	./$(DEPDIR)/elvexbuildlexicon-bitset.Po \
	./$(DEPDIR)/elvexbuildlexicon-buildlexicon.Po \
	./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Po \
	./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Po \
	./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Po \
	./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Po \
	./$(DEPDIR)/elvexbuildlexicon-compact-lexicon.Po \
	./$(DEPDIR)/elvexbuildlexicon-entries.Po \
	./$(DEPDIR)/elvexbuildlexicon-entry.Po \
	./$(DEPDIR)/elvexbuildlexicon-environment.Po \
	./$(DEPDIR)/elvexbuildlexicon-feature.Po \
	./$(DEPDIR)/elvexbuildlexicon-features.Po \
	./$(DEPDIR)/elvexbuildlexicon-flags.Po \
	./$(DEPDIR)/elvexbuildlexicon-forest.Po \
	./$(DEPDIR)/elvexbuildlexicon-forestidentifier.Po \
	./$(DEPDIR)/elvexbuildlexicon-forestmap.Po \
	./$(DEPDIR)/elvexbuildlexicon-grammar.Po \
	./$(DEPDIR)/elvexbuildlexicon-id.Po \
	./$(DEPDIR)/elvexbuildlexicon-item.Po \
	./$(DEPDIR)/elvexbuildlexicon-itemset.Po \
	./$(DEPDIR)/elvexbuildlexicon-lexicon.Po \
	./$(DEPDIR)/elvexbuildlexicon-list.Po \
	./$(DEPDIR)/elvexbuildlexicon-listfeatures.Po \
	./$(DEPDIR)/elvexbuildlexicon-node.Po \
	./$(DEPDIR)/elvexbuildlexicon-parser.Po \
	./$(DEPDIR)/elvexbuildlexicon-rule.Po \
	./$(DEPDIR)/elvexbuildlexicon-ruleslex.Po \
	./$(DEPDIR)/elvexbuildlexicon-rulesyacc.Po \
	./$(DEPDIR)/elvexbuildlexicon-serializable.Po \
	./$(DEPDIR)/elvexbuildlexicon-statement.Po \
	./$(DEPDIR)/elvexbuildlexicon-statements.Po \
	./$(DEPDIR)/elvexbuildlexicon-synthesizer.Po \
	./$(DEPDIR)/elvexbuildlexicon-term.Po \
	./$(DEPDIR)/elvexbuildlexicon-terms.Po \
	./$(DEPDIR)/elvexbuildlexicon-value.Po \
	./$(DEPDIR)/elvexbuildlexicon-variableflag.Po \
	./$(DEPDIR)/elvexbuildlexicon-vartable.Po \
	./$(DEPDIR)/elvexdebug-bitset.Po \
	./$(DEPDIR)/elvexdebug-compact-lexicon-buffer.Po \
	./$(DEPDIR)/elvexdebug-compact-lexicon-fsa.Po \
	./$(DEPDIR)/elvexdebug-compact-lexicon-info.Po \
	./$(DEPDIR)/elvexdebug-compact-lexicon-tree.Po \
	./$(DEPDIR)/elvexdebug-compact-lexicon.Po \
	./$(DEPDIR)/elvexdebug-entries.Po \
	./$(DEPDIR)/elvexdebug-entry.Po \
	./$(DEPDIR)/elvexdebug-environment.Po \
	./$(DEPDIR)/elvexdebug-feature.Po \
	./$(DEPDIR)/elvexdebug-features.Po \
	./$(DEPDIR)/elvexdebug-flags.Po \
	./$(DEPDIR)/elvexdebug-forest.Po \
	./$(DEPDIR)/elvexdebug-forestidentifier.Po \
	./$(DEPDIR)/elvexdebug-forestmap.Po \
	./$(DEPDIR)/elvexdebug-grammar.Po ./$(DEPDIR)/elvexdebug-id.Po \
	./$(DEPDIR)/elvexdebug-item.Po \
	./$(DEPDIR)/elvexdebug-itemset.Po \
	./$(DEPDIR)/elvexdebug-lexicon.Po \
	./$(DEPDIR)/elvexdebug-list.Po \
	./$(DEPDIR)/elvexdebug-listfeatures.Po \
	./$(DEPDIR)/elvexdebug-main.Po \
	./$(DEPDIR)/elvexdebug-memoization-map.Po \
	./$(DEPDIR)/elvexdebug-memoization-value.Po \
	./$(DEPDIR)/elvexdebug-node.Po \
	./$(DEPDIR)/elvexdebug-parser.Po \
	./$(DEPDIR)/elvexdebug-rule.Po \
	./$(DEPDIR)/elvexdebug-ruleslex.Po \
	./$(DEPDIR)/elvexdebug-rulesyacc.Po \
	./$(DEPDIR)/elvexdebug-serializable.Po \
	./$(DEPDIR)/elvexdebug-statement.Po \
	./$(DEPDIR)/elvexdebug-statements.Po \
	./$(DEPDIR)/elvexdebug-synthesizer.Po \
	./$(DEPDIR)/elvexdebug-term.Po ./$(DEPDIR)/elvexdebug-terms.Po \
	./$(DEPDIR)/elvexdebug-value.Po \
	./$(DEPDIR)/elvexdebug-variableflag.Po \
	./$(DEPDIR)/elvexdebug-vartable.Po \
	./$(DEPDIR)/postedition_en.Po ./$(DEPDIR)/postedition_fr.Po
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(elvex_SOURCES) $(elvexbuildlexicon_SOURCES) \
	$(elvexdebug_SOURCES) $(elvexpostedition_en_SOURCES) \
	$(elvexpostedition_fr_SOURCES)
DIST_SOURCES = $(elvex_SOURCES) $(elvexbuildlexicon_SOURCES) \
	$(elvexdebug_SOURCES) $(elvexpostedition_en_SOURCES) \
	$(elvexpostedition_fr_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/clement/workspace/Elvex/missing aclocal-1.16
ALLOCA = 
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AUTOCONF = ${SHELL} /Users/clement/workspace/Elvex/missing autoconf
AUTOHEADER = ${SHELL} /Users/clement/workspace/Elvex/missing autoheader
AUTOMAKE = ${SHELL} /Users/clement/workspace/Elvex/missing automake-1.16
AWK = awk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -std=c++11 -O3 -Wall -Wno-unused-label -Wno-unneeded-internal-declaration -Wno-deprecated-register  
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"elvex\" -DPACKAGE_TARNAME=\"elvex\" -DPACKAGE_VERSION=\"2.15.0\" -DPACKAGE_STRING=\"elvex\ 2.15.0\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DPACKAGE=\"elvex\" -DVERSION=\"2.15.0\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_ALLOCA_H=1 -DHAVE_ALLOCA=1 -DHAVE_ERRNO_H=1 -DHAVE_SIGNAL_H=1 -DHAVE_STDIO_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_SYS_RESOURCE_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_TIME_H=1 -DHAVE_UNISTD_H=1 -DHAVE_FORK=1 -DHAVE_VFORK=1 -DHAVE_WORKING_VFORK=1 -DHAVE_WORKING_FORK=1 -DHAVE_STDLIB_H=1 -DHAVE_MALLOC=1 -DHAVE_STDLIB_H=1 -DHAVE_REALLOC=1 -DHAVE_ALARM=1 -DHAVE_BZERO=1 -DHAVE_GETHOSTBYNAME=1 -DHAVE_INET_NTOA=1 -DHAVE_MEMSET=1 -DHAVE_STRDUP=1 -DHAVE_STRTOL=1
DEPDIR = .deps
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
GREP = /usr/bin/grep
INSTALL = /usr/local/bin/ginstall -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LEX = flex
LEXLIB = 
LEX_OUTPUT_ROOT = lex.yy
LIBOBJS =  ${LIBOBJDIR}error$U.o
LIBS = 
LTLIBOBJS =  ${LIBOBJDIR}error$U.lo
MAKEINFO = ${SHELL} /Users/clement/workspace/Elvex/missing makeinfo
MKDIR_P = /usr/local/bin/gmkdir -p
OBJEXT = o
PACKAGE = elvex
PACKAGE_BUGREPORT = 
PACKAGE_NAME = elvex
PACKAGE_STRING = elvex 2.15.0
PACKAGE_TARNAME = elvex
PACKAGE_URL = 
PACKAGE_VERSION = 2.15.0
PATH_SEPARATOR = :
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 2.15.0
YACC = bison -y
YFLAGS = -v --defines --report=all
abs_builddir = /Users/clement/workspace/Elvex/src
abs_srcdir = /Users/clement/workspace/Elvex/src
abs_top_builddir = /Users/clement/workspace/Elvex
abs_top_srcdir = /Users/clement/workspace/Elvex
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/clement/workspace/Elvex/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
SUFFIXES = .cc .o .ll .yy
#############################################
# Do not edit
AUTOMAKE_OPTIONS = foreign
NAME = elvex
LFLAGS = -8
elvex_SOURCES = \
rulesyacc.cc\
ruleslex.cc\
bitset.cc\
compact-lexicon-buffer.cc\
compact-lexicon-fsa.cc\
compact-lexicon-info.cc\
compact-lexicon-tree.cc\
compact-lexicon.cc\
entries.cc\
entry.cc\
environment.cc\
feature.cc\
features.cc\
flags.cc\
forest.cc\
forestidentifier.cc\
forestmap.cc\
grammar.cc\
id.cc\
item.cc\
itemset.cc\
lexicon.cc\
list.cc\
listfeatures.cc\
main.cc\
memoization-map.cc\
memoization-value.cc\
node.cc\
parser.cc\
rule.cc\
serializable.cc\
statement.cc\
statements.cc\
synthesizer.cc\
term.cc\
terms.cc\
value.cc\
variableflag.cc\
vartable.cc

elvex_OPTIONS = -DRESTORE_MEMORY -DMEMOIZATION -DMAXLENGTH=1000 \
	-DMAXUSAGES=10000 -DMAXCARDINAL=1000000 -DMAXATTEMPTS=100 \
	-DMAXBITS=512
elvex_CXXFLAGS = -std=c++11 -O3 -Wall $(elvex_OPTIONS)
elvex_LDADD = 
elvexdebug_SOURCES = \
rulesyacc.cc\
ruleslex.cc\
bitset.cc\
compact-lexicon-buffer.cc\
compact-lexicon-fsa.cc\
compact-lexicon-info.cc\
compact-lexicon-tree.cc\
compact-lexicon.cc\
entries.cc\
entry.cc\
environment.cc\
feature.cc\
features.cc\
flags.cc\
forest.cc\
forestidentifier.cc\
forestmap.cc\
grammar.cc\
id.cc\
item.cc\
itemset.cc\
lexicon.cc\
list.cc\
listfeatures.cc\
main.cc\
memoization-map.cc\
memoization-value.cc\
node.cc\
parser.cc\
rule.cc\
serializable.cc\
statement.cc\
statements.cc\
synthesizer.cc\
term.cc\
terms.cc\
value.cc\
variableflag.cc\
vartable.cc 

#elvexdebug_OPTIONS += -DTRACE_DIFF
#elvexdebug_OPTIONS += -DTRACE_MALLOC
#elvexdebug_OPTIONS += -DTRACE_SUCCESSOR
#elvexdebug_OPTIONS += -DTRACE_INSERT
#elvexdebug_OPTIONS += -DTRACE_UNHIDE
#elvexdebug_OPTIONS += -DTRACE_UNFOLD
#elvexdebug_OPTIONS += -DTRACE_EVAL
#elvexdebug_OPTIONS += -DTRACE_APPLY
#elvexdebug_OPTIONS += -DTRACE_LEXICON
#elvexdebug_OPTIONS += -DTRACE_MEMOIZATION
elvexdebug_OPTIONS = -DTRACE_OPTION -DRESTORE_MEMORY -DOUTPUT_XML \
	-DMEMOIZATION -DMAXLENGTH=10000 -DMAXUSAGES=10000 \
	-DMAXCARDINAL=1000000 -DMAXATTEMPTS=100 -DMAXBITS=512
elvexdebug_CXXFLAGS = -std=c++11 -Wall -O3 `xml2-config --cflags` $(elvexdebug_OPTIONS)
elvexdebug_LDADD = -lxml2
elvexbuildlexicon_SOURCES = \
rulesyacc.cc\
ruleslex.cc\
bitset.cc\
buildlexicon.cc\
compact-lexicon-buffer.cc\
compact-lexicon-fsa.cc\
compact-lexicon-info.cc\
compact-lexicon-tree.cc\
compact-lexicon.cc\
entries.cc\
entry.cc\
environment.cc\
feature.cc\
features.cc\
flags.cc\
forest.cc\
forestidentifier.cc\
forestmap.cc\
grammar.cc\
id.cc\
item.cc\
itemset.cc\
lexicon.cc\
list.cc\
listfeatures.cc\
node.cc\
parser.cc\
rule.cc\
serializable.cc\
statement.cc\
statements.cc\
synthesizer.cc\
term.cc\
terms.cc\
value.cc\
variableflag.cc\
vartable.cc 

#elvexbuildlexicon_OPTIONS += -DTRACE_DIFF
elvexbuildlexicon_OPTIONS = -DRESTORE_MEMORY
elvexbuildlexicon_CXXFLAGS = -std=c++11 -Wall -O3 -Wno-deprecated-register -Wno-unneeded-internal-declaration $(elvexbuildlexicon_OPTIONS)
elvexbuildlexicon_LDADD = 
elvexpostedition_fr_SOURCES = postedition_fr.cc
elvexpostedition_en_SOURCES = postedition_en.cc
BUILT_SOURCES = 
DIST_COMMON = Makefile.in Makefile.am
EXTRA_DIST = 
CLEANFILES = rulesyacc.cc rulesyacc.hh rulesyacc.output ruleslex.cc postedition_fr.cc postedition_en.cc
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cc .o .ll .yy .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

elvex$(EXEEXT): $(elvex_OBJECTS) $(elvex_DEPENDENCIES) $(EXTRA_elvex_DEPENDENCIES) 
	@rm -f elvex$(EXEEXT)
	$(AM_V_CXXLD)$(elvex_LINK) $(elvex_OBJECTS) $(elvex_LDADD) $(LIBS)

elvexbuildlexicon$(EXEEXT): $(elvexbuildlexicon_OBJECTS) $(elvexbuildlexicon_DEPENDENCIES) $(EXTRA_elvexbuildlexicon_DEPENDENCIES) 
	@rm -f elvexbuildlexicon$(EXEEXT)
	$(AM_V_CXXLD)$(elvexbuildlexicon_LINK) $(elvexbuildlexicon_OBJECTS) $(elvexbuildlexicon_LDADD) $(LIBS)

elvexdebug$(EXEEXT): $(elvexdebug_OBJECTS) $(elvexdebug_DEPENDENCIES) $(EXTRA_elvexdebug_DEPENDENCIES) 
	@rm -f elvexdebug$(EXEEXT)
	$(AM_V_CXXLD)$(elvexdebug_LINK) $(elvexdebug_OBJECTS) $(elvexdebug_LDADD) $(LIBS)

elvexpostedition_en$(EXEEXT): $(elvexpostedition_en_OBJECTS) $(elvexpostedition_en_DEPENDENCIES) $(EXTRA_elvexpostedition_en_DEPENDENCIES) 
	@rm -f elvexpostedition_en$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(elvexpostedition_en_OBJECTS) $(elvexpostedition_en_LDADD) $(LIBS)

elvexpostedition_fr$(EXEEXT): $(elvexpostedition_fr_OBJECTS) $(elvexpostedition_fr_DEPENDENCIES) $(EXTRA_elvexpostedition_fr_DEPENDENCIES) 
	@rm -f elvexpostedition_fr$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(elvexpostedition_fr_OBJECTS) $(elvexpostedition_fr_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/elvex-bitset.Po # am--include-marker
include ./$(DEPDIR)/elvex-compact-lexicon-buffer.Po # am--include-marker
include ./$(DEPDIR)/elvex-compact-lexicon-fsa.Po # am--include-marker
include ./$(DEPDIR)/elvex-compact-lexicon-info.Po # am--include-marker
include ./$(DEPDIR)/elvex-compact-lexicon-tree.Po # am--include-marker
include ./$(DEPDIR)/elvex-compact-lexicon.Po # am--include-marker
include ./$(DEPDIR)/elvex-entries.Po # am--include-marker
include ./$(DEPDIR)/elvex-entry.Po # am--include-marker
include ./$(DEPDIR)/elvex-environment.Po # am--include-marker
include ./$(DEPDIR)/elvex-feature.Po # am--include-marker
include ./$(DEPDIR)/elvex-features.Po # am--include-marker
include ./$(DEPDIR)/elvex-flags.Po # am--include-marker
include ./$(DEPDIR)/elvex-forest.Po # am--include-marker
include ./$(DEPDIR)/elvex-forestidentifier.Po # am--include-marker
include ./$(DEPDIR)/elvex-forestmap.Po # am--include-marker
include ./$(DEPDIR)/elvex-grammar.Po # am--include-marker
include ./$(DEPDIR)/elvex-id.Po # am--include-marker
include ./$(DEPDIR)/elvex-item.Po # am--include-marker
include ./$(DEPDIR)/elvex-itemset.Po # am--include-marker
include ./$(DEPDIR)/elvex-lexicon.Po # am--include-marker
include ./$(DEPDIR)/elvex-list.Po # am--include-marker
include ./$(DEPDIR)/elvex-listfeatures.Po # am--include-marker
include ./$(DEPDIR)/elvex-main.Po # am--include-marker
include ./$(DEPDIR)/elvex-memoization-map.Po # am--include-marker
include ./$(DEPDIR)/elvex-memoization-value.Po # am--include-marker
include ./$(DEPDIR)/elvex-node.Po # am--include-marker
include ./$(DEPDIR)/elvex-parser.Po # am--include-marker
include ./$(DEPDIR)/elvex-rule.Po # am--include-marker
include ./$(DEPDIR)/elvex-ruleslex.Po # am--include-marker
include ./$(DEPDIR)/elvex-rulesyacc.Po # am--include-marker
include ./$(DEPDIR)/elvex-serializable.Po # am--include-marker
include ./$(DEPDIR)/elvex-statement.Po # am--include-marker
include ./$(DEPDIR)/elvex-statements.Po # am--include-marker
include ./$(DEPDIR)/elvex-synthesizer.Po # am--include-marker
include ./$(DEPDIR)/elvex-term.Po # am--include-marker
include ./$(DEPDIR)/elvex-terms.Po # am--include-marker
include ./$(DEPDIR)/elvex-value.Po # am--include-marker
include ./$(DEPDIR)/elvex-variableflag.Po # am--include-marker
include ./$(DEPDIR)/elvex-vartable.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-bitset.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-buildlexicon.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-entries.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-entry.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-environment.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-feature.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-features.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-flags.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-forest.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-forestidentifier.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-forestmap.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-grammar.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-id.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-item.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-itemset.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-lexicon.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-list.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-listfeatures.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-node.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-parser.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-rule.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-ruleslex.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-rulesyacc.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-serializable.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-statement.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-statements.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-synthesizer.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-term.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-terms.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-value.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-variableflag.Po # am--include-marker
include ./$(DEPDIR)/elvexbuildlexicon-vartable.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-bitset.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-compact-lexicon-buffer.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-compact-lexicon-fsa.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-compact-lexicon-info.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-compact-lexicon-tree.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-compact-lexicon.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-entries.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-entry.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-environment.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-feature.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-features.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-flags.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-forest.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-forestidentifier.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-forestmap.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-grammar.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-id.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-item.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-itemset.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-lexicon.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-list.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-listfeatures.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-main.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-memoization-map.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-memoization-value.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-node.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-parser.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-rule.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-ruleslex.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-rulesyacc.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-serializable.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-statement.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-statements.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-synthesizer.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-term.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-terms.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-value.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-variableflag.Po # am--include-marker
include ./$(DEPDIR)/elvexdebug-vartable.Po # am--include-marker
include ./$(DEPDIR)/postedition_en.Po # am--include-marker
include ./$(DEPDIR)/postedition_fr.Po # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.cc.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

elvex-rulesyacc.o: rulesyacc.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-rulesyacc.o -MD -MP -MF $(DEPDIR)/elvex-rulesyacc.Tpo -c -o elvex-rulesyacc.o `test -f 'rulesyacc.cc' || echo '$(srcdir)/'`rulesyacc.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-rulesyacc.Tpo $(DEPDIR)/elvex-rulesyacc.Po
#	$(AM_V_CXX)source='rulesyacc.cc' object='elvex-rulesyacc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-rulesyacc.o `test -f 'rulesyacc.cc' || echo '$(srcdir)/'`rulesyacc.cc

elvex-rulesyacc.obj: rulesyacc.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-rulesyacc.obj -MD -MP -MF $(DEPDIR)/elvex-rulesyacc.Tpo -c -o elvex-rulesyacc.obj `if test -f 'rulesyacc.cc'; then $(CYGPATH_W) 'rulesyacc.cc'; else $(CYGPATH_W) '$(srcdir)/rulesyacc.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-rulesyacc.Tpo $(DEPDIR)/elvex-rulesyacc.Po
#	$(AM_V_CXX)source='rulesyacc.cc' object='elvex-rulesyacc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-rulesyacc.obj `if test -f 'rulesyacc.cc'; then $(CYGPATH_W) 'rulesyacc.cc'; else $(CYGPATH_W) '$(srcdir)/rulesyacc.cc'; fi`

elvex-ruleslex.o: ruleslex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-ruleslex.o -MD -MP -MF $(DEPDIR)/elvex-ruleslex.Tpo -c -o elvex-ruleslex.o `test -f 'ruleslex.cc' || echo '$(srcdir)/'`ruleslex.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-ruleslex.Tpo $(DEPDIR)/elvex-ruleslex.Po
#	$(AM_V_CXX)source='ruleslex.cc' object='elvex-ruleslex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-ruleslex.o `test -f 'ruleslex.cc' || echo '$(srcdir)/'`ruleslex.cc

elvex-ruleslex.obj: ruleslex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-ruleslex.obj -MD -MP -MF $(DEPDIR)/elvex-ruleslex.Tpo -c -o elvex-ruleslex.obj `if test -f 'ruleslex.cc'; then $(CYGPATH_W) 'ruleslex.cc'; else $(CYGPATH_W) '$(srcdir)/ruleslex.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-ruleslex.Tpo $(DEPDIR)/elvex-ruleslex.Po
#	$(AM_V_CXX)source='ruleslex.cc' object='elvex-ruleslex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-ruleslex.obj `if test -f 'ruleslex.cc'; then $(CYGPATH_W) 'ruleslex.cc'; else $(CYGPATH_W) '$(srcdir)/ruleslex.cc'; fi`

elvex-bitset.o: bitset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-bitset.o -MD -MP -MF $(DEPDIR)/elvex-bitset.Tpo -c -o elvex-bitset.o `test -f 'bitset.cc' || echo '$(srcdir)/'`bitset.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-bitset.Tpo $(DEPDIR)/elvex-bitset.Po
#	$(AM_V_CXX)source='bitset.cc' object='elvex-bitset.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-bitset.o `test -f 'bitset.cc' || echo '$(srcdir)/'`bitset.cc

elvex-bitset.obj: bitset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-bitset.obj -MD -MP -MF $(DEPDIR)/elvex-bitset.Tpo -c -o elvex-bitset.obj `if test -f 'bitset.cc'; then $(CYGPATH_W) 'bitset.cc'; else $(CYGPATH_W) '$(srcdir)/bitset.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-bitset.Tpo $(DEPDIR)/elvex-bitset.Po
#	$(AM_V_CXX)source='bitset.cc' object='elvex-bitset.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-bitset.obj `if test -f 'bitset.cc'; then $(CYGPATH_W) 'bitset.cc'; else $(CYGPATH_W) '$(srcdir)/bitset.cc'; fi`

elvex-compact-lexicon-buffer.o: compact-lexicon-buffer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon-buffer.o -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon-buffer.Tpo -c -o elvex-compact-lexicon-buffer.o `test -f 'compact-lexicon-buffer.cc' || echo '$(srcdir)/'`compact-lexicon-buffer.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon-buffer.Tpo $(DEPDIR)/elvex-compact-lexicon-buffer.Po
#	$(AM_V_CXX)source='compact-lexicon-buffer.cc' object='elvex-compact-lexicon-buffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon-buffer.o `test -f 'compact-lexicon-buffer.cc' || echo '$(srcdir)/'`compact-lexicon-buffer.cc

elvex-compact-lexicon-buffer.obj: compact-lexicon-buffer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon-buffer.obj -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon-buffer.Tpo -c -o elvex-compact-lexicon-buffer.obj `if test -f 'compact-lexicon-buffer.cc'; then $(CYGPATH_W) 'compact-lexicon-buffer.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-buffer.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon-buffer.Tpo $(DEPDIR)/elvex-compact-lexicon-buffer.Po
#	$(AM_V_CXX)source='compact-lexicon-buffer.cc' object='elvex-compact-lexicon-buffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon-buffer.obj `if test -f 'compact-lexicon-buffer.cc'; then $(CYGPATH_W) 'compact-lexicon-buffer.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-buffer.cc'; fi`

elvex-compact-lexicon-fsa.o: compact-lexicon-fsa.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon-fsa.o -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon-fsa.Tpo -c -o elvex-compact-lexicon-fsa.o `test -f 'compact-lexicon-fsa.cc' || echo '$(srcdir)/'`compact-lexicon-fsa.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon-fsa.Tpo $(DEPDIR)/elvex-compact-lexicon-fsa.Po
#	$(AM_V_CXX)source='compact-lexicon-fsa.cc' object='elvex-compact-lexicon-fsa.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon-fsa.o `test -f 'compact-lexicon-fsa.cc' || echo '$(srcdir)/'`compact-lexicon-fsa.cc

elvex-compact-lexicon-fsa.obj: compact-lexicon-fsa.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon-fsa.obj -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon-fsa.Tpo -c -o elvex-compact-lexicon-fsa.obj `if test -f 'compact-lexicon-fsa.cc'; then $(CYGPATH_W) 'compact-lexicon-fsa.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-fsa.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon-fsa.Tpo $(DEPDIR)/elvex-compact-lexicon-fsa.Po
#	$(AM_V_CXX)source='compact-lexicon-fsa.cc' object='elvex-compact-lexicon-fsa.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon-fsa.obj `if test -f 'compact-lexicon-fsa.cc'; then $(CYGPATH_W) 'compact-lexicon-fsa.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-fsa.cc'; fi`

elvex-compact-lexicon-info.o: compact-lexicon-info.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon-info.o -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon-info.Tpo -c -o elvex-compact-lexicon-info.o `test -f 'compact-lexicon-info.cc' || echo '$(srcdir)/'`compact-lexicon-info.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon-info.Tpo $(DEPDIR)/elvex-compact-lexicon-info.Po
#	$(AM_V_CXX)source='compact-lexicon-info.cc' object='elvex-compact-lexicon-info.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon-info.o `test -f 'compact-lexicon-info.cc' || echo '$(srcdir)/'`compact-lexicon-info.cc

elvex-compact-lexicon-info.obj: compact-lexicon-info.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon-info.obj -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon-info.Tpo -c -o elvex-compact-lexicon-info.obj `if test -f 'compact-lexicon-info.cc'; then $(CYGPATH_W) 'compact-lexicon-info.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-info.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon-info.Tpo $(DEPDIR)/elvex-compact-lexicon-info.Po
#	$(AM_V_CXX)source='compact-lexicon-info.cc' object='elvex-compact-lexicon-info.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon-info.obj `if test -f 'compact-lexicon-info.cc'; then $(CYGPATH_W) 'compact-lexicon-info.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-info.cc'; fi`

elvex-compact-lexicon-tree.o: compact-lexicon-tree.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon-tree.o -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon-tree.Tpo -c -o elvex-compact-lexicon-tree.o `test -f 'compact-lexicon-tree.cc' || echo '$(srcdir)/'`compact-lexicon-tree.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon-tree.Tpo $(DEPDIR)/elvex-compact-lexicon-tree.Po
#	$(AM_V_CXX)source='compact-lexicon-tree.cc' object='elvex-compact-lexicon-tree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon-tree.o `test -f 'compact-lexicon-tree.cc' || echo '$(srcdir)/'`compact-lexicon-tree.cc

elvex-compact-lexicon-tree.obj: compact-lexicon-tree.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon-tree.obj -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon-tree.Tpo -c -o elvex-compact-lexicon-tree.obj `if test -f 'compact-lexicon-tree.cc'; then $(CYGPATH_W) 'compact-lexicon-tree.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-tree.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon-tree.Tpo $(DEPDIR)/elvex-compact-lexicon-tree.Po
#	$(AM_V_CXX)source='compact-lexicon-tree.cc' object='elvex-compact-lexicon-tree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon-tree.obj `if test -f 'compact-lexicon-tree.cc'; then $(CYGPATH_W) 'compact-lexicon-tree.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-tree.cc'; fi`

elvex-compact-lexicon.o: compact-lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon.o -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon.Tpo -c -o elvex-compact-lexicon.o `test -f 'compact-lexicon.cc' || echo '$(srcdir)/'`compact-lexicon.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon.Tpo $(DEPDIR)/elvex-compact-lexicon.Po
#	$(AM_V_CXX)source='compact-lexicon.cc' object='elvex-compact-lexicon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon.o `test -f 'compact-lexicon.cc' || echo '$(srcdir)/'`compact-lexicon.cc

elvex-compact-lexicon.obj: compact-lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-compact-lexicon.obj -MD -MP -MF $(DEPDIR)/elvex-compact-lexicon.Tpo -c -o elvex-compact-lexicon.obj `if test -f 'compact-lexicon.cc'; then $(CYGPATH_W) 'compact-lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-compact-lexicon.Tpo $(DEPDIR)/elvex-compact-lexicon.Po
#	$(AM_V_CXX)source='compact-lexicon.cc' object='elvex-compact-lexicon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-compact-lexicon.obj `if test -f 'compact-lexicon.cc'; then $(CYGPATH_W) 'compact-lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon.cc'; fi`

elvex-entries.o: entries.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-entries.o -MD -MP -MF $(DEPDIR)/elvex-entries.Tpo -c -o elvex-entries.o `test -f 'entries.cc' || echo '$(srcdir)/'`entries.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-entries.Tpo $(DEPDIR)/elvex-entries.Po
#	$(AM_V_CXX)source='entries.cc' object='elvex-entries.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-entries.o `test -f 'entries.cc' || echo '$(srcdir)/'`entries.cc

elvex-entries.obj: entries.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-entries.obj -MD -MP -MF $(DEPDIR)/elvex-entries.Tpo -c -o elvex-entries.obj `if test -f 'entries.cc'; then $(CYGPATH_W) 'entries.cc'; else $(CYGPATH_W) '$(srcdir)/entries.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-entries.Tpo $(DEPDIR)/elvex-entries.Po
#	$(AM_V_CXX)source='entries.cc' object='elvex-entries.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-entries.obj `if test -f 'entries.cc'; then $(CYGPATH_W) 'entries.cc'; else $(CYGPATH_W) '$(srcdir)/entries.cc'; fi`

elvex-entry.o: entry.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-entry.o -MD -MP -MF $(DEPDIR)/elvex-entry.Tpo -c -o elvex-entry.o `test -f 'entry.cc' || echo '$(srcdir)/'`entry.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-entry.Tpo $(DEPDIR)/elvex-entry.Po
#	$(AM_V_CXX)source='entry.cc' object='elvex-entry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-entry.o `test -f 'entry.cc' || echo '$(srcdir)/'`entry.cc

elvex-entry.obj: entry.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-entry.obj -MD -MP -MF $(DEPDIR)/elvex-entry.Tpo -c -o elvex-entry.obj `if test -f 'entry.cc'; then $(CYGPATH_W) 'entry.cc'; else $(CYGPATH_W) '$(srcdir)/entry.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-entry.Tpo $(DEPDIR)/elvex-entry.Po
#	$(AM_V_CXX)source='entry.cc' object='elvex-entry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-entry.obj `if test -f 'entry.cc'; then $(CYGPATH_W) 'entry.cc'; else $(CYGPATH_W) '$(srcdir)/entry.cc'; fi`

elvex-environment.o: environment.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-environment.o -MD -MP -MF $(DEPDIR)/elvex-environment.Tpo -c -o elvex-environment.o `test -f 'environment.cc' || echo '$(srcdir)/'`environment.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-environment.Tpo $(DEPDIR)/elvex-environment.Po
#	$(AM_V_CXX)source='environment.cc' object='elvex-environment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-environment.o `test -f 'environment.cc' || echo '$(srcdir)/'`environment.cc

elvex-environment.obj: environment.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-environment.obj -MD -MP -MF $(DEPDIR)/elvex-environment.Tpo -c -o elvex-environment.obj `if test -f 'environment.cc'; then $(CYGPATH_W) 'environment.cc'; else $(CYGPATH_W) '$(srcdir)/environment.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-environment.Tpo $(DEPDIR)/elvex-environment.Po
#	$(AM_V_CXX)source='environment.cc' object='elvex-environment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-environment.obj `if test -f 'environment.cc'; then $(CYGPATH_W) 'environment.cc'; else $(CYGPATH_W) '$(srcdir)/environment.cc'; fi`

elvex-feature.o: feature.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-feature.o -MD -MP -MF $(DEPDIR)/elvex-feature.Tpo -c -o elvex-feature.o `test -f 'feature.cc' || echo '$(srcdir)/'`feature.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-feature.Tpo $(DEPDIR)/elvex-feature.Po
#	$(AM_V_CXX)source='feature.cc' object='elvex-feature.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-feature.o `test -f 'feature.cc' || echo '$(srcdir)/'`feature.cc

elvex-feature.obj: feature.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-feature.obj -MD -MP -MF $(DEPDIR)/elvex-feature.Tpo -c -o elvex-feature.obj `if test -f 'feature.cc'; then $(CYGPATH_W) 'feature.cc'; else $(CYGPATH_W) '$(srcdir)/feature.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-feature.Tpo $(DEPDIR)/elvex-feature.Po
#	$(AM_V_CXX)source='feature.cc' object='elvex-feature.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-feature.obj `if test -f 'feature.cc'; then $(CYGPATH_W) 'feature.cc'; else $(CYGPATH_W) '$(srcdir)/feature.cc'; fi`

elvex-features.o: features.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-features.o -MD -MP -MF $(DEPDIR)/elvex-features.Tpo -c -o elvex-features.o `test -f 'features.cc' || echo '$(srcdir)/'`features.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-features.Tpo $(DEPDIR)/elvex-features.Po
#	$(AM_V_CXX)source='features.cc' object='elvex-features.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-features.o `test -f 'features.cc' || echo '$(srcdir)/'`features.cc

elvex-features.obj: features.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-features.obj -MD -MP -MF $(DEPDIR)/elvex-features.Tpo -c -o elvex-features.obj `if test -f 'features.cc'; then $(CYGPATH_W) 'features.cc'; else $(CYGPATH_W) '$(srcdir)/features.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-features.Tpo $(DEPDIR)/elvex-features.Po
#	$(AM_V_CXX)source='features.cc' object='elvex-features.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-features.obj `if test -f 'features.cc'; then $(CYGPATH_W) 'features.cc'; else $(CYGPATH_W) '$(srcdir)/features.cc'; fi`

elvex-flags.o: flags.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-flags.o -MD -MP -MF $(DEPDIR)/elvex-flags.Tpo -c -o elvex-flags.o `test -f 'flags.cc' || echo '$(srcdir)/'`flags.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-flags.Tpo $(DEPDIR)/elvex-flags.Po
#	$(AM_V_CXX)source='flags.cc' object='elvex-flags.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-flags.o `test -f 'flags.cc' || echo '$(srcdir)/'`flags.cc

elvex-flags.obj: flags.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-flags.obj -MD -MP -MF $(DEPDIR)/elvex-flags.Tpo -c -o elvex-flags.obj `if test -f 'flags.cc'; then $(CYGPATH_W) 'flags.cc'; else $(CYGPATH_W) '$(srcdir)/flags.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-flags.Tpo $(DEPDIR)/elvex-flags.Po
#	$(AM_V_CXX)source='flags.cc' object='elvex-flags.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-flags.obj `if test -f 'flags.cc'; then $(CYGPATH_W) 'flags.cc'; else $(CYGPATH_W) '$(srcdir)/flags.cc'; fi`

elvex-forest.o: forest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-forest.o -MD -MP -MF $(DEPDIR)/elvex-forest.Tpo -c -o elvex-forest.o `test -f 'forest.cc' || echo '$(srcdir)/'`forest.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-forest.Tpo $(DEPDIR)/elvex-forest.Po
#	$(AM_V_CXX)source='forest.cc' object='elvex-forest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-forest.o `test -f 'forest.cc' || echo '$(srcdir)/'`forest.cc

elvex-forest.obj: forest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-forest.obj -MD -MP -MF $(DEPDIR)/elvex-forest.Tpo -c -o elvex-forest.obj `if test -f 'forest.cc'; then $(CYGPATH_W) 'forest.cc'; else $(CYGPATH_W) '$(srcdir)/forest.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-forest.Tpo $(DEPDIR)/elvex-forest.Po
#	$(AM_V_CXX)source='forest.cc' object='elvex-forest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-forest.obj `if test -f 'forest.cc'; then $(CYGPATH_W) 'forest.cc'; else $(CYGPATH_W) '$(srcdir)/forest.cc'; fi`

elvex-forestidentifier.o: forestidentifier.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-forestidentifier.o -MD -MP -MF $(DEPDIR)/elvex-forestidentifier.Tpo -c -o elvex-forestidentifier.o `test -f 'forestidentifier.cc' || echo '$(srcdir)/'`forestidentifier.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-forestidentifier.Tpo $(DEPDIR)/elvex-forestidentifier.Po
#	$(AM_V_CXX)source='forestidentifier.cc' object='elvex-forestidentifier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-forestidentifier.o `test -f 'forestidentifier.cc' || echo '$(srcdir)/'`forestidentifier.cc

elvex-forestidentifier.obj: forestidentifier.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-forestidentifier.obj -MD -MP -MF $(DEPDIR)/elvex-forestidentifier.Tpo -c -o elvex-forestidentifier.obj `if test -f 'forestidentifier.cc'; then $(CYGPATH_W) 'forestidentifier.cc'; else $(CYGPATH_W) '$(srcdir)/forestidentifier.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-forestidentifier.Tpo $(DEPDIR)/elvex-forestidentifier.Po
#	$(AM_V_CXX)source='forestidentifier.cc' object='elvex-forestidentifier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-forestidentifier.obj `if test -f 'forestidentifier.cc'; then $(CYGPATH_W) 'forestidentifier.cc'; else $(CYGPATH_W) '$(srcdir)/forestidentifier.cc'; fi`

elvex-forestmap.o: forestmap.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-forestmap.o -MD -MP -MF $(DEPDIR)/elvex-forestmap.Tpo -c -o elvex-forestmap.o `test -f 'forestmap.cc' || echo '$(srcdir)/'`forestmap.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-forestmap.Tpo $(DEPDIR)/elvex-forestmap.Po
#	$(AM_V_CXX)source='forestmap.cc' object='elvex-forestmap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-forestmap.o `test -f 'forestmap.cc' || echo '$(srcdir)/'`forestmap.cc

elvex-forestmap.obj: forestmap.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-forestmap.obj -MD -MP -MF $(DEPDIR)/elvex-forestmap.Tpo -c -o elvex-forestmap.obj `if test -f 'forestmap.cc'; then $(CYGPATH_W) 'forestmap.cc'; else $(CYGPATH_W) '$(srcdir)/forestmap.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-forestmap.Tpo $(DEPDIR)/elvex-forestmap.Po
#	$(AM_V_CXX)source='forestmap.cc' object='elvex-forestmap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-forestmap.obj `if test -f 'forestmap.cc'; then $(CYGPATH_W) 'forestmap.cc'; else $(CYGPATH_W) '$(srcdir)/forestmap.cc'; fi`

elvex-grammar.o: grammar.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-grammar.o -MD -MP -MF $(DEPDIR)/elvex-grammar.Tpo -c -o elvex-grammar.o `test -f 'grammar.cc' || echo '$(srcdir)/'`grammar.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-grammar.Tpo $(DEPDIR)/elvex-grammar.Po
#	$(AM_V_CXX)source='grammar.cc' object='elvex-grammar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-grammar.o `test -f 'grammar.cc' || echo '$(srcdir)/'`grammar.cc

elvex-grammar.obj: grammar.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-grammar.obj -MD -MP -MF $(DEPDIR)/elvex-grammar.Tpo -c -o elvex-grammar.obj `if test -f 'grammar.cc'; then $(CYGPATH_W) 'grammar.cc'; else $(CYGPATH_W) '$(srcdir)/grammar.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-grammar.Tpo $(DEPDIR)/elvex-grammar.Po
#	$(AM_V_CXX)source='grammar.cc' object='elvex-grammar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-grammar.obj `if test -f 'grammar.cc'; then $(CYGPATH_W) 'grammar.cc'; else $(CYGPATH_W) '$(srcdir)/grammar.cc'; fi`

elvex-id.o: id.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-id.o -MD -MP -MF $(DEPDIR)/elvex-id.Tpo -c -o elvex-id.o `test -f 'id.cc' || echo '$(srcdir)/'`id.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-id.Tpo $(DEPDIR)/elvex-id.Po
#	$(AM_V_CXX)source='id.cc' object='elvex-id.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-id.o `test -f 'id.cc' || echo '$(srcdir)/'`id.cc

elvex-id.obj: id.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-id.obj -MD -MP -MF $(DEPDIR)/elvex-id.Tpo -c -o elvex-id.obj `if test -f 'id.cc'; then $(CYGPATH_W) 'id.cc'; else $(CYGPATH_W) '$(srcdir)/id.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-id.Tpo $(DEPDIR)/elvex-id.Po
#	$(AM_V_CXX)source='id.cc' object='elvex-id.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-id.obj `if test -f 'id.cc'; then $(CYGPATH_W) 'id.cc'; else $(CYGPATH_W) '$(srcdir)/id.cc'; fi`

elvex-item.o: item.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-item.o -MD -MP -MF $(DEPDIR)/elvex-item.Tpo -c -o elvex-item.o `test -f 'item.cc' || echo '$(srcdir)/'`item.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-item.Tpo $(DEPDIR)/elvex-item.Po
#	$(AM_V_CXX)source='item.cc' object='elvex-item.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-item.o `test -f 'item.cc' || echo '$(srcdir)/'`item.cc

elvex-item.obj: item.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-item.obj -MD -MP -MF $(DEPDIR)/elvex-item.Tpo -c -o elvex-item.obj `if test -f 'item.cc'; then $(CYGPATH_W) 'item.cc'; else $(CYGPATH_W) '$(srcdir)/item.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-item.Tpo $(DEPDIR)/elvex-item.Po
#	$(AM_V_CXX)source='item.cc' object='elvex-item.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-item.obj `if test -f 'item.cc'; then $(CYGPATH_W) 'item.cc'; else $(CYGPATH_W) '$(srcdir)/item.cc'; fi`

elvex-itemset.o: itemset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-itemset.o -MD -MP -MF $(DEPDIR)/elvex-itemset.Tpo -c -o elvex-itemset.o `test -f 'itemset.cc' || echo '$(srcdir)/'`itemset.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-itemset.Tpo $(DEPDIR)/elvex-itemset.Po
#	$(AM_V_CXX)source='itemset.cc' object='elvex-itemset.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-itemset.o `test -f 'itemset.cc' || echo '$(srcdir)/'`itemset.cc

elvex-itemset.obj: itemset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-itemset.obj -MD -MP -MF $(DEPDIR)/elvex-itemset.Tpo -c -o elvex-itemset.obj `if test -f 'itemset.cc'; then $(CYGPATH_W) 'itemset.cc'; else $(CYGPATH_W) '$(srcdir)/itemset.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-itemset.Tpo $(DEPDIR)/elvex-itemset.Po
#	$(AM_V_CXX)source='itemset.cc' object='elvex-itemset.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-itemset.obj `if test -f 'itemset.cc'; then $(CYGPATH_W) 'itemset.cc'; else $(CYGPATH_W) '$(srcdir)/itemset.cc'; fi`

elvex-lexicon.o: lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-lexicon.o -MD -MP -MF $(DEPDIR)/elvex-lexicon.Tpo -c -o elvex-lexicon.o `test -f 'lexicon.cc' || echo '$(srcdir)/'`lexicon.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-lexicon.Tpo $(DEPDIR)/elvex-lexicon.Po
#	$(AM_V_CXX)source='lexicon.cc' object='elvex-lexicon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-lexicon.o `test -f 'lexicon.cc' || echo '$(srcdir)/'`lexicon.cc

elvex-lexicon.obj: lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-lexicon.obj -MD -MP -MF $(DEPDIR)/elvex-lexicon.Tpo -c -o elvex-lexicon.obj `if test -f 'lexicon.cc'; then $(CYGPATH_W) 'lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/lexicon.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-lexicon.Tpo $(DEPDIR)/elvex-lexicon.Po
#	$(AM_V_CXX)source='lexicon.cc' object='elvex-lexicon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-lexicon.obj `if test -f 'lexicon.cc'; then $(CYGPATH_W) 'lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/lexicon.cc'; fi`

elvex-list.o: list.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-list.o -MD -MP -MF $(DEPDIR)/elvex-list.Tpo -c -o elvex-list.o `test -f 'list.cc' || echo '$(srcdir)/'`list.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-list.Tpo $(DEPDIR)/elvex-list.Po
#	$(AM_V_CXX)source='list.cc' object='elvex-list.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-list.o `test -f 'list.cc' || echo '$(srcdir)/'`list.cc

elvex-list.obj: list.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-list.obj -MD -MP -MF $(DEPDIR)/elvex-list.Tpo -c -o elvex-list.obj `if test -f 'list.cc'; then $(CYGPATH_W) 'list.cc'; else $(CYGPATH_W) '$(srcdir)/list.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-list.Tpo $(DEPDIR)/elvex-list.Po
#	$(AM_V_CXX)source='list.cc' object='elvex-list.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-list.obj `if test -f 'list.cc'; then $(CYGPATH_W) 'list.cc'; else $(CYGPATH_W) '$(srcdir)/list.cc'; fi`

elvex-listfeatures.o: listfeatures.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-listfeatures.o -MD -MP -MF $(DEPDIR)/elvex-listfeatures.Tpo -c -o elvex-listfeatures.o `test -f 'listfeatures.cc' || echo '$(srcdir)/'`listfeatures.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-listfeatures.Tpo $(DEPDIR)/elvex-listfeatures.Po
#	$(AM_V_CXX)source='listfeatures.cc' object='elvex-listfeatures.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-listfeatures.o `test -f 'listfeatures.cc' || echo '$(srcdir)/'`listfeatures.cc

elvex-listfeatures.obj: listfeatures.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-listfeatures.obj -MD -MP -MF $(DEPDIR)/elvex-listfeatures.Tpo -c -o elvex-listfeatures.obj `if test -f 'listfeatures.cc'; then $(CYGPATH_W) 'listfeatures.cc'; else $(CYGPATH_W) '$(srcdir)/listfeatures.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-listfeatures.Tpo $(DEPDIR)/elvex-listfeatures.Po
#	$(AM_V_CXX)source='listfeatures.cc' object='elvex-listfeatures.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-listfeatures.obj `if test -f 'listfeatures.cc'; then $(CYGPATH_W) 'listfeatures.cc'; else $(CYGPATH_W) '$(srcdir)/listfeatures.cc'; fi`

elvex-main.o: main.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-main.o -MD -MP -MF $(DEPDIR)/elvex-main.Tpo -c -o elvex-main.o `test -f 'main.cc' || echo '$(srcdir)/'`main.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-main.Tpo $(DEPDIR)/elvex-main.Po
#	$(AM_V_CXX)source='main.cc' object='elvex-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-main.o `test -f 'main.cc' || echo '$(srcdir)/'`main.cc

elvex-main.obj: main.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-main.obj -MD -MP -MF $(DEPDIR)/elvex-main.Tpo -c -o elvex-main.obj `if test -f 'main.cc'; then $(CYGPATH_W) 'main.cc'; else $(CYGPATH_W) '$(srcdir)/main.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-main.Tpo $(DEPDIR)/elvex-main.Po
#	$(AM_V_CXX)source='main.cc' object='elvex-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-main.obj `if test -f 'main.cc'; then $(CYGPATH_W) 'main.cc'; else $(CYGPATH_W) '$(srcdir)/main.cc'; fi`

elvex-memoization-map.o: memoization-map.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-memoization-map.o -MD -MP -MF $(DEPDIR)/elvex-memoization-map.Tpo -c -o elvex-memoization-map.o `test -f 'memoization-map.cc' || echo '$(srcdir)/'`memoization-map.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-memoization-map.Tpo $(DEPDIR)/elvex-memoization-map.Po
#	$(AM_V_CXX)source='memoization-map.cc' object='elvex-memoization-map.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-memoization-map.o `test -f 'memoization-map.cc' || echo '$(srcdir)/'`memoization-map.cc

elvex-memoization-map.obj: memoization-map.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-memoization-map.obj -MD -MP -MF $(DEPDIR)/elvex-memoization-map.Tpo -c -o elvex-memoization-map.obj `if test -f 'memoization-map.cc'; then $(CYGPATH_W) 'memoization-map.cc'; else $(CYGPATH_W) '$(srcdir)/memoization-map.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-memoization-map.Tpo $(DEPDIR)/elvex-memoization-map.Po
#	$(AM_V_CXX)source='memoization-map.cc' object='elvex-memoization-map.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-memoization-map.obj `if test -f 'memoization-map.cc'; then $(CYGPATH_W) 'memoization-map.cc'; else $(CYGPATH_W) '$(srcdir)/memoization-map.cc'; fi`

elvex-memoization-value.o: memoization-value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-memoization-value.o -MD -MP -MF $(DEPDIR)/elvex-memoization-value.Tpo -c -o elvex-memoization-value.o `test -f 'memoization-value.cc' || echo '$(srcdir)/'`memoization-value.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-memoization-value.Tpo $(DEPDIR)/elvex-memoization-value.Po
#	$(AM_V_CXX)source='memoization-value.cc' object='elvex-memoization-value.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-memoization-value.o `test -f 'memoization-value.cc' || echo '$(srcdir)/'`memoization-value.cc

elvex-memoization-value.obj: memoization-value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-memoization-value.obj -MD -MP -MF $(DEPDIR)/elvex-memoization-value.Tpo -c -o elvex-memoization-value.obj `if test -f 'memoization-value.cc'; then $(CYGPATH_W) 'memoization-value.cc'; else $(CYGPATH_W) '$(srcdir)/memoization-value.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-memoization-value.Tpo $(DEPDIR)/elvex-memoization-value.Po
#	$(AM_V_CXX)source='memoization-value.cc' object='elvex-memoization-value.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-memoization-value.obj `if test -f 'memoization-value.cc'; then $(CYGPATH_W) 'memoization-value.cc'; else $(CYGPATH_W) '$(srcdir)/memoization-value.cc'; fi`

elvex-node.o: node.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-node.o -MD -MP -MF $(DEPDIR)/elvex-node.Tpo -c -o elvex-node.o `test -f 'node.cc' || echo '$(srcdir)/'`node.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-node.Tpo $(DEPDIR)/elvex-node.Po
#	$(AM_V_CXX)source='node.cc' object='elvex-node.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-node.o `test -f 'node.cc' || echo '$(srcdir)/'`node.cc

elvex-node.obj: node.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-node.obj -MD -MP -MF $(DEPDIR)/elvex-node.Tpo -c -o elvex-node.obj `if test -f 'node.cc'; then $(CYGPATH_W) 'node.cc'; else $(CYGPATH_W) '$(srcdir)/node.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-node.Tpo $(DEPDIR)/elvex-node.Po
#	$(AM_V_CXX)source='node.cc' object='elvex-node.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-node.obj `if test -f 'node.cc'; then $(CYGPATH_W) 'node.cc'; else $(CYGPATH_W) '$(srcdir)/node.cc'; fi`

elvex-parser.o: parser.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-parser.o -MD -MP -MF $(DEPDIR)/elvex-parser.Tpo -c -o elvex-parser.o `test -f 'parser.cc' || echo '$(srcdir)/'`parser.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-parser.Tpo $(DEPDIR)/elvex-parser.Po
#	$(AM_V_CXX)source='parser.cc' object='elvex-parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-parser.o `test -f 'parser.cc' || echo '$(srcdir)/'`parser.cc

elvex-parser.obj: parser.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-parser.obj -MD -MP -MF $(DEPDIR)/elvex-parser.Tpo -c -o elvex-parser.obj `if test -f 'parser.cc'; then $(CYGPATH_W) 'parser.cc'; else $(CYGPATH_W) '$(srcdir)/parser.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-parser.Tpo $(DEPDIR)/elvex-parser.Po
#	$(AM_V_CXX)source='parser.cc' object='elvex-parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-parser.obj `if test -f 'parser.cc'; then $(CYGPATH_W) 'parser.cc'; else $(CYGPATH_W) '$(srcdir)/parser.cc'; fi`

elvex-rule.o: rule.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-rule.o -MD -MP -MF $(DEPDIR)/elvex-rule.Tpo -c -o elvex-rule.o `test -f 'rule.cc' || echo '$(srcdir)/'`rule.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-rule.Tpo $(DEPDIR)/elvex-rule.Po
#	$(AM_V_CXX)source='rule.cc' object='elvex-rule.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-rule.o `test -f 'rule.cc' || echo '$(srcdir)/'`rule.cc

elvex-rule.obj: rule.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-rule.obj -MD -MP -MF $(DEPDIR)/elvex-rule.Tpo -c -o elvex-rule.obj `if test -f 'rule.cc'; then $(CYGPATH_W) 'rule.cc'; else $(CYGPATH_W) '$(srcdir)/rule.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-rule.Tpo $(DEPDIR)/elvex-rule.Po
#	$(AM_V_CXX)source='rule.cc' object='elvex-rule.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-rule.obj `if test -f 'rule.cc'; then $(CYGPATH_W) 'rule.cc'; else $(CYGPATH_W) '$(srcdir)/rule.cc'; fi`

elvex-serializable.o: serializable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-serializable.o -MD -MP -MF $(DEPDIR)/elvex-serializable.Tpo -c -o elvex-serializable.o `test -f 'serializable.cc' || echo '$(srcdir)/'`serializable.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-serializable.Tpo $(DEPDIR)/elvex-serializable.Po
#	$(AM_V_CXX)source='serializable.cc' object='elvex-serializable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-serializable.o `test -f 'serializable.cc' || echo '$(srcdir)/'`serializable.cc

elvex-serializable.obj: serializable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-serializable.obj -MD -MP -MF $(DEPDIR)/elvex-serializable.Tpo -c -o elvex-serializable.obj `if test -f 'serializable.cc'; then $(CYGPATH_W) 'serializable.cc'; else $(CYGPATH_W) '$(srcdir)/serializable.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-serializable.Tpo $(DEPDIR)/elvex-serializable.Po
#	$(AM_V_CXX)source='serializable.cc' object='elvex-serializable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-serializable.obj `if test -f 'serializable.cc'; then $(CYGPATH_W) 'serializable.cc'; else $(CYGPATH_W) '$(srcdir)/serializable.cc'; fi`

elvex-statement.o: statement.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-statement.o -MD -MP -MF $(DEPDIR)/elvex-statement.Tpo -c -o elvex-statement.o `test -f 'statement.cc' || echo '$(srcdir)/'`statement.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-statement.Tpo $(DEPDIR)/elvex-statement.Po
#	$(AM_V_CXX)source='statement.cc' object='elvex-statement.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-statement.o `test -f 'statement.cc' || echo '$(srcdir)/'`statement.cc

elvex-statement.obj: statement.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-statement.obj -MD -MP -MF $(DEPDIR)/elvex-statement.Tpo -c -o elvex-statement.obj `if test -f 'statement.cc'; then $(CYGPATH_W) 'statement.cc'; else $(CYGPATH_W) '$(srcdir)/statement.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-statement.Tpo $(DEPDIR)/elvex-statement.Po
#	$(AM_V_CXX)source='statement.cc' object='elvex-statement.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-statement.obj `if test -f 'statement.cc'; then $(CYGPATH_W) 'statement.cc'; else $(CYGPATH_W) '$(srcdir)/statement.cc'; fi`

elvex-statements.o: statements.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-statements.o -MD -MP -MF $(DEPDIR)/elvex-statements.Tpo -c -o elvex-statements.o `test -f 'statements.cc' || echo '$(srcdir)/'`statements.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-statements.Tpo $(DEPDIR)/elvex-statements.Po
#	$(AM_V_CXX)source='statements.cc' object='elvex-statements.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-statements.o `test -f 'statements.cc' || echo '$(srcdir)/'`statements.cc

elvex-statements.obj: statements.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-statements.obj -MD -MP -MF $(DEPDIR)/elvex-statements.Tpo -c -o elvex-statements.obj `if test -f 'statements.cc'; then $(CYGPATH_W) 'statements.cc'; else $(CYGPATH_W) '$(srcdir)/statements.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-statements.Tpo $(DEPDIR)/elvex-statements.Po
#	$(AM_V_CXX)source='statements.cc' object='elvex-statements.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-statements.obj `if test -f 'statements.cc'; then $(CYGPATH_W) 'statements.cc'; else $(CYGPATH_W) '$(srcdir)/statements.cc'; fi`

elvex-synthesizer.o: synthesizer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-synthesizer.o -MD -MP -MF $(DEPDIR)/elvex-synthesizer.Tpo -c -o elvex-synthesizer.o `test -f 'synthesizer.cc' || echo '$(srcdir)/'`synthesizer.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-synthesizer.Tpo $(DEPDIR)/elvex-synthesizer.Po
#	$(AM_V_CXX)source='synthesizer.cc' object='elvex-synthesizer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-synthesizer.o `test -f 'synthesizer.cc' || echo '$(srcdir)/'`synthesizer.cc

elvex-synthesizer.obj: synthesizer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-synthesizer.obj -MD -MP -MF $(DEPDIR)/elvex-synthesizer.Tpo -c -o elvex-synthesizer.obj `if test -f 'synthesizer.cc'; then $(CYGPATH_W) 'synthesizer.cc'; else $(CYGPATH_W) '$(srcdir)/synthesizer.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-synthesizer.Tpo $(DEPDIR)/elvex-synthesizer.Po
#	$(AM_V_CXX)source='synthesizer.cc' object='elvex-synthesizer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-synthesizer.obj `if test -f 'synthesizer.cc'; then $(CYGPATH_W) 'synthesizer.cc'; else $(CYGPATH_W) '$(srcdir)/synthesizer.cc'; fi`

elvex-term.o: term.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-term.o -MD -MP -MF $(DEPDIR)/elvex-term.Tpo -c -o elvex-term.o `test -f 'term.cc' || echo '$(srcdir)/'`term.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-term.Tpo $(DEPDIR)/elvex-term.Po
#	$(AM_V_CXX)source='term.cc' object='elvex-term.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-term.o `test -f 'term.cc' || echo '$(srcdir)/'`term.cc

elvex-term.obj: term.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-term.obj -MD -MP -MF $(DEPDIR)/elvex-term.Tpo -c -o elvex-term.obj `if test -f 'term.cc'; then $(CYGPATH_W) 'term.cc'; else $(CYGPATH_W) '$(srcdir)/term.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-term.Tpo $(DEPDIR)/elvex-term.Po
#	$(AM_V_CXX)source='term.cc' object='elvex-term.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-term.obj `if test -f 'term.cc'; then $(CYGPATH_W) 'term.cc'; else $(CYGPATH_W) '$(srcdir)/term.cc'; fi`

elvex-terms.o: terms.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-terms.o -MD -MP -MF $(DEPDIR)/elvex-terms.Tpo -c -o elvex-terms.o `test -f 'terms.cc' || echo '$(srcdir)/'`terms.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-terms.Tpo $(DEPDIR)/elvex-terms.Po
#	$(AM_V_CXX)source='terms.cc' object='elvex-terms.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-terms.o `test -f 'terms.cc' || echo '$(srcdir)/'`terms.cc

elvex-terms.obj: terms.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-terms.obj -MD -MP -MF $(DEPDIR)/elvex-terms.Tpo -c -o elvex-terms.obj `if test -f 'terms.cc'; then $(CYGPATH_W) 'terms.cc'; else $(CYGPATH_W) '$(srcdir)/terms.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-terms.Tpo $(DEPDIR)/elvex-terms.Po
#	$(AM_V_CXX)source='terms.cc' object='elvex-terms.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-terms.obj `if test -f 'terms.cc'; then $(CYGPATH_W) 'terms.cc'; else $(CYGPATH_W) '$(srcdir)/terms.cc'; fi`

elvex-value.o: value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-value.o -MD -MP -MF $(DEPDIR)/elvex-value.Tpo -c -o elvex-value.o `test -f 'value.cc' || echo '$(srcdir)/'`value.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-value.Tpo $(DEPDIR)/elvex-value.Po
#	$(AM_V_CXX)source='value.cc' object='elvex-value.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-value.o `test -f 'value.cc' || echo '$(srcdir)/'`value.cc

elvex-value.obj: value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-value.obj -MD -MP -MF $(DEPDIR)/elvex-value.Tpo -c -o elvex-value.obj `if test -f 'value.cc'; then $(CYGPATH_W) 'value.cc'; else $(CYGPATH_W) '$(srcdir)/value.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-value.Tpo $(DEPDIR)/elvex-value.Po
#	$(AM_V_CXX)source='value.cc' object='elvex-value.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-value.obj `if test -f 'value.cc'; then $(CYGPATH_W) 'value.cc'; else $(CYGPATH_W) '$(srcdir)/value.cc'; fi`

elvex-variableflag.o: variableflag.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-variableflag.o -MD -MP -MF $(DEPDIR)/elvex-variableflag.Tpo -c -o elvex-variableflag.o `test -f 'variableflag.cc' || echo '$(srcdir)/'`variableflag.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-variableflag.Tpo $(DEPDIR)/elvex-variableflag.Po
#	$(AM_V_CXX)source='variableflag.cc' object='elvex-variableflag.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-variableflag.o `test -f 'variableflag.cc' || echo '$(srcdir)/'`variableflag.cc

elvex-variableflag.obj: variableflag.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-variableflag.obj -MD -MP -MF $(DEPDIR)/elvex-variableflag.Tpo -c -o elvex-variableflag.obj `if test -f 'variableflag.cc'; then $(CYGPATH_W) 'variableflag.cc'; else $(CYGPATH_W) '$(srcdir)/variableflag.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-variableflag.Tpo $(DEPDIR)/elvex-variableflag.Po
#	$(AM_V_CXX)source='variableflag.cc' object='elvex-variableflag.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-variableflag.obj `if test -f 'variableflag.cc'; then $(CYGPATH_W) 'variableflag.cc'; else $(CYGPATH_W) '$(srcdir)/variableflag.cc'; fi`

elvex-vartable.o: vartable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-vartable.o -MD -MP -MF $(DEPDIR)/elvex-vartable.Tpo -c -o elvex-vartable.o `test -f 'vartable.cc' || echo '$(srcdir)/'`vartable.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-vartable.Tpo $(DEPDIR)/elvex-vartable.Po
#	$(AM_V_CXX)source='vartable.cc' object='elvex-vartable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-vartable.o `test -f 'vartable.cc' || echo '$(srcdir)/'`vartable.cc

elvex-vartable.obj: vartable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -MT elvex-vartable.obj -MD -MP -MF $(DEPDIR)/elvex-vartable.Tpo -c -o elvex-vartable.obj `if test -f 'vartable.cc'; then $(CYGPATH_W) 'vartable.cc'; else $(CYGPATH_W) '$(srcdir)/vartable.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvex-vartable.Tpo $(DEPDIR)/elvex-vartable.Po
#	$(AM_V_CXX)source='vartable.cc' object='elvex-vartable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvex_CXXFLAGS) $(CXXFLAGS) -c -o elvex-vartable.obj `if test -f 'vartable.cc'; then $(CYGPATH_W) 'vartable.cc'; else $(CYGPATH_W) '$(srcdir)/vartable.cc'; fi`

elvexbuildlexicon-rulesyacc.o: rulesyacc.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-rulesyacc.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-rulesyacc.Tpo -c -o elvexbuildlexicon-rulesyacc.o `test -f 'rulesyacc.cc' || echo '$(srcdir)/'`rulesyacc.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-rulesyacc.Tpo $(DEPDIR)/elvexbuildlexicon-rulesyacc.Po
#	$(AM_V_CXX)source='rulesyacc.cc' object='elvexbuildlexicon-rulesyacc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-rulesyacc.o `test -f 'rulesyacc.cc' || echo '$(srcdir)/'`rulesyacc.cc

elvexbuildlexicon-rulesyacc.obj: rulesyacc.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-rulesyacc.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-rulesyacc.Tpo -c -o elvexbuildlexicon-rulesyacc.obj `if test -f 'rulesyacc.cc'; then $(CYGPATH_W) 'rulesyacc.cc'; else $(CYGPATH_W) '$(srcdir)/rulesyacc.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-rulesyacc.Tpo $(DEPDIR)/elvexbuildlexicon-rulesyacc.Po
#	$(AM_V_CXX)source='rulesyacc.cc' object='elvexbuildlexicon-rulesyacc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-rulesyacc.obj `if test -f 'rulesyacc.cc'; then $(CYGPATH_W) 'rulesyacc.cc'; else $(CYGPATH_W) '$(srcdir)/rulesyacc.cc'; fi`

elvexbuildlexicon-ruleslex.o: ruleslex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-ruleslex.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-ruleslex.Tpo -c -o elvexbuildlexicon-ruleslex.o `test -f 'ruleslex.cc' || echo '$(srcdir)/'`ruleslex.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-ruleslex.Tpo $(DEPDIR)/elvexbuildlexicon-ruleslex.Po
#	$(AM_V_CXX)source='ruleslex.cc' object='elvexbuildlexicon-ruleslex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-ruleslex.o `test -f 'ruleslex.cc' || echo '$(srcdir)/'`ruleslex.cc

elvexbuildlexicon-ruleslex.obj: ruleslex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-ruleslex.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-ruleslex.Tpo -c -o elvexbuildlexicon-ruleslex.obj `if test -f 'ruleslex.cc'; then $(CYGPATH_W) 'ruleslex.cc'; else $(CYGPATH_W) '$(srcdir)/ruleslex.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-ruleslex.Tpo $(DEPDIR)/elvexbuildlexicon-ruleslex.Po
#	$(AM_V_CXX)source='ruleslex.cc' object='elvexbuildlexicon-ruleslex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-ruleslex.obj `if test -f 'ruleslex.cc'; then $(CYGPATH_W) 'ruleslex.cc'; else $(CYGPATH_W) '$(srcdir)/ruleslex.cc'; fi`

elvexbuildlexicon-bitset.o: bitset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-bitset.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-bitset.Tpo -c -o elvexbuildlexicon-bitset.o `test -f 'bitset.cc' || echo '$(srcdir)/'`bitset.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-bitset.Tpo $(DEPDIR)/elvexbuildlexicon-bitset.Po
#	$(AM_V_CXX)source='bitset.cc' object='elvexbuildlexicon-bitset.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-bitset.o `test -f 'bitset.cc' || echo '$(srcdir)/'`bitset.cc

elvexbuildlexicon-bitset.obj: bitset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-bitset.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-bitset.Tpo -c -o elvexbuildlexicon-bitset.obj `if test -f 'bitset.cc'; then $(CYGPATH_W) 'bitset.cc'; else $(CYGPATH_W) '$(srcdir)/bitset.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-bitset.Tpo $(DEPDIR)/elvexbuildlexicon-bitset.Po
#	$(AM_V_CXX)source='bitset.cc' object='elvexbuildlexicon-bitset.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-bitset.obj `if test -f 'bitset.cc'; then $(CYGPATH_W) 'bitset.cc'; else $(CYGPATH_W) '$(srcdir)/bitset.cc'; fi`

elvexbuildlexicon-buildlexicon.o: buildlexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-buildlexicon.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-buildlexicon.Tpo -c -o elvexbuildlexicon-buildlexicon.o `test -f 'buildlexicon.cc' || echo '$(srcdir)/'`buildlexicon.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-buildlexicon.Tpo $(DEPDIR)/elvexbuildlexicon-buildlexicon.Po
#	$(AM_V_CXX)source='buildlexicon.cc' object='elvexbuildlexicon-buildlexicon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-buildlexicon.o `test -f 'buildlexicon.cc' || echo '$(srcdir)/'`buildlexicon.cc

elvexbuildlexicon-buildlexicon.obj: buildlexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-buildlexicon.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-buildlexicon.Tpo -c -o elvexbuildlexicon-buildlexicon.obj `if test -f 'buildlexicon.cc'; then $(CYGPATH_W) 'buildlexicon.cc'; else $(CYGPATH_W) '$(srcdir)/buildlexicon.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-buildlexicon.Tpo $(DEPDIR)/elvexbuildlexicon-buildlexicon.Po
#	$(AM_V_CXX)source='buildlexicon.cc' object='elvexbuildlexicon-buildlexicon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-buildlexicon.obj `if test -f 'buildlexicon.cc'; then $(CYGPATH_W) 'buildlexicon.cc'; else $(CYGPATH_W) '$(srcdir)/buildlexicon.cc'; fi`

elvexbuildlexicon-compact-lexicon-buffer.o: compact-lexicon-buffer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon-buffer.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Tpo -c -o elvexbuildlexicon-compact-lexicon-buffer.o `test -f 'compact-lexicon-buffer.cc' || echo '$(srcdir)/'`compact-lexicon-buffer.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Po
#	$(AM_V_CXX)source='compact-lexicon-buffer.cc' object='elvexbuildlexicon-compact-lexicon-buffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon-buffer.o `test -f 'compact-lexicon-buffer.cc' || echo '$(srcdir)/'`compact-lexicon-buffer.cc

elvexbuildlexicon-compact-lexicon-buffer.obj: compact-lexicon-buffer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon-buffer.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Tpo -c -o elvexbuildlexicon-compact-lexicon-buffer.obj `if test -f 'compact-lexicon-buffer.cc'; then $(CYGPATH_W) 'compact-lexicon-buffer.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-buffer.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Po
#	$(AM_V_CXX)source='compact-lexicon-buffer.cc' object='elvexbuildlexicon-compact-lexicon-buffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon-buffer.obj `if test -f 'compact-lexicon-buffer.cc'; then $(CYGPATH_W) 'compact-lexicon-buffer.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-buffer.cc'; fi`

elvexbuildlexicon-compact-lexicon-fsa.o: compact-lexicon-fsa.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon-fsa.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Tpo -c -o elvexbuildlexicon-compact-lexicon-fsa.o `test -f 'compact-lexicon-fsa.cc' || echo '$(srcdir)/'`compact-lexicon-fsa.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Po
#	$(AM_V_CXX)source='compact-lexicon-fsa.cc' object='elvexbuildlexicon-compact-lexicon-fsa.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon-fsa.o `test -f 'compact-lexicon-fsa.cc' || echo '$(srcdir)/'`compact-lexicon-fsa.cc

elvexbuildlexicon-compact-lexicon-fsa.obj: compact-lexicon-fsa.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon-fsa.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Tpo -c -o elvexbuildlexicon-compact-lexicon-fsa.obj `if test -f 'compact-lexicon-fsa.cc'; then $(CYGPATH_W) 'compact-lexicon-fsa.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-fsa.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Po
#	$(AM_V_CXX)source='compact-lexicon-fsa.cc' object='elvexbuildlexicon-compact-lexicon-fsa.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon-fsa.obj `if test -f 'compact-lexicon-fsa.cc'; then $(CYGPATH_W) 'compact-lexicon-fsa.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-fsa.cc'; fi`

elvexbuildlexicon-compact-lexicon-info.o: compact-lexicon-info.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon-info.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Tpo -c -o elvexbuildlexicon-compact-lexicon-info.o `test -f 'compact-lexicon-info.cc' || echo '$(srcdir)/'`compact-lexicon-info.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Po
#	$(AM_V_CXX)source='compact-lexicon-info.cc' object='elvexbuildlexicon-compact-lexicon-info.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon-info.o `test -f 'compact-lexicon-info.cc' || echo '$(srcdir)/'`compact-lexicon-info.cc

elvexbuildlexicon-compact-lexicon-info.obj: compact-lexicon-info.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon-info.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Tpo -c -o elvexbuildlexicon-compact-lexicon-info.obj `if test -f 'compact-lexicon-info.cc'; then $(CYGPATH_W) 'compact-lexicon-info.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-info.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Po
#	$(AM_V_CXX)source='compact-lexicon-info.cc' object='elvexbuildlexicon-compact-lexicon-info.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon-info.obj `if test -f 'compact-lexicon-info.cc'; then $(CYGPATH_W) 'compact-lexicon-info.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-info.cc'; fi`

elvexbuildlexicon-compact-lexicon-tree.o: compact-lexicon-tree.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon-tree.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Tpo -c -o elvexbuildlexicon-compact-lexicon-tree.o `test -f 'compact-lexicon-tree.cc' || echo '$(srcdir)/'`compact-lexicon-tree.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Po
#	$(AM_V_CXX)source='compact-lexicon-tree.cc' object='elvexbuildlexicon-compact-lexicon-tree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon-tree.o `test -f 'compact-lexicon-tree.cc' || echo '$(srcdir)/'`compact-lexicon-tree.cc

elvexbuildlexicon-compact-lexicon-tree.obj: compact-lexicon-tree.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon-tree.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Tpo -c -o elvexbuildlexicon-compact-lexicon-tree.obj `if test -f 'compact-lexicon-tree.cc'; then $(CYGPATH_W) 'compact-lexicon-tree.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-tree.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Po
#	$(AM_V_CXX)source='compact-lexicon-tree.cc' object='elvexbuildlexicon-compact-lexicon-tree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon-tree.obj `if test -f 'compact-lexicon-tree.cc'; then $(CYGPATH_W) 'compact-lexicon-tree.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-tree.cc'; fi`

elvexbuildlexicon-compact-lexicon.o: compact-lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon.Tpo -c -o elvexbuildlexicon-compact-lexicon.o `test -f 'compact-lexicon.cc' || echo '$(srcdir)/'`compact-lexicon.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon.Po
#	$(AM_V_CXX)source='compact-lexicon.cc' object='elvexbuildlexicon-compact-lexicon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon.o `test -f 'compact-lexicon.cc' || echo '$(srcdir)/'`compact-lexicon.cc

elvexbuildlexicon-compact-lexicon.obj: compact-lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-compact-lexicon.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-compact-lexicon.Tpo -c -o elvexbuildlexicon-compact-lexicon.obj `if test -f 'compact-lexicon.cc'; then $(CYGPATH_W) 'compact-lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-compact-lexicon.Tpo $(DEPDIR)/elvexbuildlexicon-compact-lexicon.Po
#	$(AM_V_CXX)source='compact-lexicon.cc' object='elvexbuildlexicon-compact-lexicon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-compact-lexicon.obj `if test -f 'compact-lexicon.cc'; then $(CYGPATH_W) 'compact-lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon.cc'; fi`

elvexbuildlexicon-entries.o: entries.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-entries.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-entries.Tpo -c -o elvexbuildlexicon-entries.o `test -f 'entries.cc' || echo '$(srcdir)/'`entries.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-entries.Tpo $(DEPDIR)/elvexbuildlexicon-entries.Po
#	$(AM_V_CXX)source='entries.cc' object='elvexbuildlexicon-entries.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-entries.o `test -f 'entries.cc' || echo '$(srcdir)/'`entries.cc

elvexbuildlexicon-entries.obj: entries.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-entries.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-entries.Tpo -c -o elvexbuildlexicon-entries.obj `if test -f 'entries.cc'; then $(CYGPATH_W) 'entries.cc'; else $(CYGPATH_W) '$(srcdir)/entries.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-entries.Tpo $(DEPDIR)/elvexbuildlexicon-entries.Po
#	$(AM_V_CXX)source='entries.cc' object='elvexbuildlexicon-entries.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-entries.obj `if test -f 'entries.cc'; then $(CYGPATH_W) 'entries.cc'; else $(CYGPATH_W) '$(srcdir)/entries.cc'; fi`

elvexbuildlexicon-entry.o: entry.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-entry.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-entry.Tpo -c -o elvexbuildlexicon-entry.o `test -f 'entry.cc' || echo '$(srcdir)/'`entry.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-entry.Tpo $(DEPDIR)/elvexbuildlexicon-entry.Po
#	$(AM_V_CXX)source='entry.cc' object='elvexbuildlexicon-entry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-entry.o `test -f 'entry.cc' || echo '$(srcdir)/'`entry.cc

elvexbuildlexicon-entry.obj: entry.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-entry.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-entry.Tpo -c -o elvexbuildlexicon-entry.obj `if test -f 'entry.cc'; then $(CYGPATH_W) 'entry.cc'; else $(CYGPATH_W) '$(srcdir)/entry.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-entry.Tpo $(DEPDIR)/elvexbuildlexicon-entry.Po
#	$(AM_V_CXX)source='entry.cc' object='elvexbuildlexicon-entry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-entry.obj `if test -f 'entry.cc'; then $(CYGPATH_W) 'entry.cc'; else $(CYGPATH_W) '$(srcdir)/entry.cc'; fi`

elvexbuildlexicon-environment.o: environment.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-environment.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-environment.Tpo -c -o elvexbuildlexicon-environment.o `test -f 'environment.cc' || echo '$(srcdir)/'`environment.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-environment.Tpo $(DEPDIR)/elvexbuildlexicon-environment.Po
#	$(AM_V_CXX)source='environment.cc' object='elvexbuildlexicon-environment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-environment.o `test -f 'environment.cc' || echo '$(srcdir)/'`environment.cc

elvexbuildlexicon-environment.obj: environment.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-environment.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-environment.Tpo -c -o elvexbuildlexicon-environment.obj `if test -f 'environment.cc'; then $(CYGPATH_W) 'environment.cc'; else $(CYGPATH_W) '$(srcdir)/environment.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-environment.Tpo $(DEPDIR)/elvexbuildlexicon-environment.Po
#	$(AM_V_CXX)source='environment.cc' object='elvexbuildlexicon-environment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-environment.obj `if test -f 'environment.cc'; then $(CYGPATH_W) 'environment.cc'; else $(CYGPATH_W) '$(srcdir)/environment.cc'; fi`

elvexbuildlexicon-feature.o: feature.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-feature.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-feature.Tpo -c -o elvexbuildlexicon-feature.o `test -f 'feature.cc' || echo '$(srcdir)/'`feature.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-feature.Tpo $(DEPDIR)/elvexbuildlexicon-feature.Po
#	$(AM_V_CXX)source='feature.cc' object='elvexbuildlexicon-feature.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-feature.o `test -f 'feature.cc' || echo '$(srcdir)/'`feature.cc

elvexbuildlexicon-feature.obj: feature.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-feature.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-feature.Tpo -c -o elvexbuildlexicon-feature.obj `if test -f 'feature.cc'; then $(CYGPATH_W) 'feature.cc'; else $(CYGPATH_W) '$(srcdir)/feature.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-feature.Tpo $(DEPDIR)/elvexbuildlexicon-feature.Po
#	$(AM_V_CXX)source='feature.cc' object='elvexbuildlexicon-feature.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-feature.obj `if test -f 'feature.cc'; then $(CYGPATH_W) 'feature.cc'; else $(CYGPATH_W) '$(srcdir)/feature.cc'; fi`

elvexbuildlexicon-features.o: features.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-features.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-features.Tpo -c -o elvexbuildlexicon-features.o `test -f 'features.cc' || echo '$(srcdir)/'`features.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-features.Tpo $(DEPDIR)/elvexbuildlexicon-features.Po
#	$(AM_V_CXX)source='features.cc' object='elvexbuildlexicon-features.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-features.o `test -f 'features.cc' || echo '$(srcdir)/'`features.cc

elvexbuildlexicon-features.obj: features.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-features.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-features.Tpo -c -o elvexbuildlexicon-features.obj `if test -f 'features.cc'; then $(CYGPATH_W) 'features.cc'; else $(CYGPATH_W) '$(srcdir)/features.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-features.Tpo $(DEPDIR)/elvexbuildlexicon-features.Po
#	$(AM_V_CXX)source='features.cc' object='elvexbuildlexicon-features.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-features.obj `if test -f 'features.cc'; then $(CYGPATH_W) 'features.cc'; else $(CYGPATH_W) '$(srcdir)/features.cc'; fi`

elvexbuildlexicon-flags.o: flags.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-flags.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-flags.Tpo -c -o elvexbuildlexicon-flags.o `test -f 'flags.cc' || echo '$(srcdir)/'`flags.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-flags.Tpo $(DEPDIR)/elvexbuildlexicon-flags.Po
#	$(AM_V_CXX)source='flags.cc' object='elvexbuildlexicon-flags.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-flags.o `test -f 'flags.cc' || echo '$(srcdir)/'`flags.cc

elvexbuildlexicon-flags.obj: flags.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-flags.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-flags.Tpo -c -o elvexbuildlexicon-flags.obj `if test -f 'flags.cc'; then $(CYGPATH_W) 'flags.cc'; else $(CYGPATH_W) '$(srcdir)/flags.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-flags.Tpo $(DEPDIR)/elvexbuildlexicon-flags.Po
#	$(AM_V_CXX)source='flags.cc' object='elvexbuildlexicon-flags.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-flags.obj `if test -f 'flags.cc'; then $(CYGPATH_W) 'flags.cc'; else $(CYGPATH_W) '$(srcdir)/flags.cc'; fi`

elvexbuildlexicon-forest.o: forest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-forest.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-forest.Tpo -c -o elvexbuildlexicon-forest.o `test -f 'forest.cc' || echo '$(srcdir)/'`forest.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-forest.Tpo $(DEPDIR)/elvexbuildlexicon-forest.Po
#	$(AM_V_CXX)source='forest.cc' object='elvexbuildlexicon-forest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-forest.o `test -f 'forest.cc' || echo '$(srcdir)/'`forest.cc

elvexbuildlexicon-forest.obj: forest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-forest.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-forest.Tpo -c -o elvexbuildlexicon-forest.obj `if test -f 'forest.cc'; then $(CYGPATH_W) 'forest.cc'; else $(CYGPATH_W) '$(srcdir)/forest.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-forest.Tpo $(DEPDIR)/elvexbuildlexicon-forest.Po
#	$(AM_V_CXX)source='forest.cc' object='elvexbuildlexicon-forest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-forest.obj `if test -f 'forest.cc'; then $(CYGPATH_W) 'forest.cc'; else $(CYGPATH_W) '$(srcdir)/forest.cc'; fi`

elvexbuildlexicon-forestidentifier.o: forestidentifier.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-forestidentifier.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-forestidentifier.Tpo -c -o elvexbuildlexicon-forestidentifier.o `test -f 'forestidentifier.cc' || echo '$(srcdir)/'`forestidentifier.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-forestidentifier.Tpo $(DEPDIR)/elvexbuildlexicon-forestidentifier.Po
#	$(AM_V_CXX)source='forestidentifier.cc' object='elvexbuildlexicon-forestidentifier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-forestidentifier.o `test -f 'forestidentifier.cc' || echo '$(srcdir)/'`forestidentifier.cc

elvexbuildlexicon-forestidentifier.obj: forestidentifier.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-forestidentifier.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-forestidentifier.Tpo -c -o elvexbuildlexicon-forestidentifier.obj `if test -f 'forestidentifier.cc'; then $(CYGPATH_W) 'forestidentifier.cc'; else $(CYGPATH_W) '$(srcdir)/forestidentifier.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-forestidentifier.Tpo $(DEPDIR)/elvexbuildlexicon-forestidentifier.Po
#	$(AM_V_CXX)source='forestidentifier.cc' object='elvexbuildlexicon-forestidentifier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-forestidentifier.obj `if test -f 'forestidentifier.cc'; then $(CYGPATH_W) 'forestidentifier.cc'; else $(CYGPATH_W) '$(srcdir)/forestidentifier.cc'; fi`

elvexbuildlexicon-forestmap.o: forestmap.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-forestmap.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-forestmap.Tpo -c -o elvexbuildlexicon-forestmap.o `test -f 'forestmap.cc' || echo '$(srcdir)/'`forestmap.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-forestmap.Tpo $(DEPDIR)/elvexbuildlexicon-forestmap.Po
#	$(AM_V_CXX)source='forestmap.cc' object='elvexbuildlexicon-forestmap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-forestmap.o `test -f 'forestmap.cc' || echo '$(srcdir)/'`forestmap.cc

elvexbuildlexicon-forestmap.obj: forestmap.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-forestmap.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-forestmap.Tpo -c -o elvexbuildlexicon-forestmap.obj `if test -f 'forestmap.cc'; then $(CYGPATH_W) 'forestmap.cc'; else $(CYGPATH_W) '$(srcdir)/forestmap.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-forestmap.Tpo $(DEPDIR)/elvexbuildlexicon-forestmap.Po
#	$(AM_V_CXX)source='forestmap.cc' object='elvexbuildlexicon-forestmap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-forestmap.obj `if test -f 'forestmap.cc'; then $(CYGPATH_W) 'forestmap.cc'; else $(CYGPATH_W) '$(srcdir)/forestmap.cc'; fi`

elvexbuildlexicon-grammar.o: grammar.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-grammar.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-grammar.Tpo -c -o elvexbuildlexicon-grammar.o `test -f 'grammar.cc' || echo '$(srcdir)/'`grammar.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-grammar.Tpo $(DEPDIR)/elvexbuildlexicon-grammar.Po
#	$(AM_V_CXX)source='grammar.cc' object='elvexbuildlexicon-grammar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-grammar.o `test -f 'grammar.cc' || echo '$(srcdir)/'`grammar.cc

elvexbuildlexicon-grammar.obj: grammar.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-grammar.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-grammar.Tpo -c -o elvexbuildlexicon-grammar.obj `if test -f 'grammar.cc'; then $(CYGPATH_W) 'grammar.cc'; else $(CYGPATH_W) '$(srcdir)/grammar.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-grammar.Tpo $(DEPDIR)/elvexbuildlexicon-grammar.Po
#	$(AM_V_CXX)source='grammar.cc' object='elvexbuildlexicon-grammar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-grammar.obj `if test -f 'grammar.cc'; then $(CYGPATH_W) 'grammar.cc'; else $(CYGPATH_W) '$(srcdir)/grammar.cc'; fi`

elvexbuildlexicon-id.o: id.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-id.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-id.Tpo -c -o elvexbuildlexicon-id.o `test -f 'id.cc' || echo '$(srcdir)/'`id.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-id.Tpo $(DEPDIR)/elvexbuildlexicon-id.Po
#	$(AM_V_CXX)source='id.cc' object='elvexbuildlexicon-id.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-id.o `test -f 'id.cc' || echo '$(srcdir)/'`id.cc

elvexbuildlexicon-id.obj: id.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-id.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-id.Tpo -c -o elvexbuildlexicon-id.obj `if test -f 'id.cc'; then $(CYGPATH_W) 'id.cc'; else $(CYGPATH_W) '$(srcdir)/id.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-id.Tpo $(DEPDIR)/elvexbuildlexicon-id.Po
#	$(AM_V_CXX)source='id.cc' object='elvexbuildlexicon-id.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-id.obj `if test -f 'id.cc'; then $(CYGPATH_W) 'id.cc'; else $(CYGPATH_W) '$(srcdir)/id.cc'; fi`

elvexbuildlexicon-item.o: item.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-item.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-item.Tpo -c -o elvexbuildlexicon-item.o `test -f 'item.cc' || echo '$(srcdir)/'`item.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-item.Tpo $(DEPDIR)/elvexbuildlexicon-item.Po
#	$(AM_V_CXX)source='item.cc' object='elvexbuildlexicon-item.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-item.o `test -f 'item.cc' || echo '$(srcdir)/'`item.cc

elvexbuildlexicon-item.obj: item.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-item.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-item.Tpo -c -o elvexbuildlexicon-item.obj `if test -f 'item.cc'; then $(CYGPATH_W) 'item.cc'; else $(CYGPATH_W) '$(srcdir)/item.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-item.Tpo $(DEPDIR)/elvexbuildlexicon-item.Po
#	$(AM_V_CXX)source='item.cc' object='elvexbuildlexicon-item.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-item.obj `if test -f 'item.cc'; then $(CYGPATH_W) 'item.cc'; else $(CYGPATH_W) '$(srcdir)/item.cc'; fi`

elvexbuildlexicon-itemset.o: itemset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-itemset.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-itemset.Tpo -c -o elvexbuildlexicon-itemset.o `test -f 'itemset.cc' || echo '$(srcdir)/'`itemset.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-itemset.Tpo $(DEPDIR)/elvexbuildlexicon-itemset.Po
#	$(AM_V_CXX)source='itemset.cc' object='elvexbuildlexicon-itemset.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-itemset.o `test -f 'itemset.cc' || echo '$(srcdir)/'`itemset.cc

elvexbuildlexicon-itemset.obj: itemset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-itemset.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-itemset.Tpo -c -o elvexbuildlexicon-itemset.obj `if test -f 'itemset.cc'; then $(CYGPATH_W) 'itemset.cc'; else $(CYGPATH_W) '$(srcdir)/itemset.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-itemset.Tpo $(DEPDIR)/elvexbuildlexicon-itemset.Po
#	$(AM_V_CXX)source='itemset.cc' object='elvexbuildlexicon-itemset.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-itemset.obj `if test -f 'itemset.cc'; then $(CYGPATH_W) 'itemset.cc'; else $(CYGPATH_W) '$(srcdir)/itemset.cc'; fi`

elvexbuildlexicon-lexicon.o: lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-lexicon.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-lexicon.Tpo -c -o elvexbuildlexicon-lexicon.o `test -f 'lexicon.cc' || echo '$(srcdir)/'`lexicon.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-lexicon.Tpo $(DEPDIR)/elvexbuildlexicon-lexicon.Po
#	$(AM_V_CXX)source='lexicon.cc' object='elvexbuildlexicon-lexicon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-lexicon.o `test -f 'lexicon.cc' || echo '$(srcdir)/'`lexicon.cc

elvexbuildlexicon-lexicon.obj: lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-lexicon.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-lexicon.Tpo -c -o elvexbuildlexicon-lexicon.obj `if test -f 'lexicon.cc'; then $(CYGPATH_W) 'lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/lexicon.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-lexicon.Tpo $(DEPDIR)/elvexbuildlexicon-lexicon.Po
#	$(AM_V_CXX)source='lexicon.cc' object='elvexbuildlexicon-lexicon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-lexicon.obj `if test -f 'lexicon.cc'; then $(CYGPATH_W) 'lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/lexicon.cc'; fi`

elvexbuildlexicon-list.o: list.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-list.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-list.Tpo -c -o elvexbuildlexicon-list.o `test -f 'list.cc' || echo '$(srcdir)/'`list.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-list.Tpo $(DEPDIR)/elvexbuildlexicon-list.Po
#	$(AM_V_CXX)source='list.cc' object='elvexbuildlexicon-list.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-list.o `test -f 'list.cc' || echo '$(srcdir)/'`list.cc

elvexbuildlexicon-list.obj: list.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-list.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-list.Tpo -c -o elvexbuildlexicon-list.obj `if test -f 'list.cc'; then $(CYGPATH_W) 'list.cc'; else $(CYGPATH_W) '$(srcdir)/list.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-list.Tpo $(DEPDIR)/elvexbuildlexicon-list.Po
#	$(AM_V_CXX)source='list.cc' object='elvexbuildlexicon-list.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-list.obj `if test -f 'list.cc'; then $(CYGPATH_W) 'list.cc'; else $(CYGPATH_W) '$(srcdir)/list.cc'; fi`

elvexbuildlexicon-listfeatures.o: listfeatures.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-listfeatures.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-listfeatures.Tpo -c -o elvexbuildlexicon-listfeatures.o `test -f 'listfeatures.cc' || echo '$(srcdir)/'`listfeatures.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-listfeatures.Tpo $(DEPDIR)/elvexbuildlexicon-listfeatures.Po
#	$(AM_V_CXX)source='listfeatures.cc' object='elvexbuildlexicon-listfeatures.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-listfeatures.o `test -f 'listfeatures.cc' || echo '$(srcdir)/'`listfeatures.cc

elvexbuildlexicon-listfeatures.obj: listfeatures.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-listfeatures.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-listfeatures.Tpo -c -o elvexbuildlexicon-listfeatures.obj `if test -f 'listfeatures.cc'; then $(CYGPATH_W) 'listfeatures.cc'; else $(CYGPATH_W) '$(srcdir)/listfeatures.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-listfeatures.Tpo $(DEPDIR)/elvexbuildlexicon-listfeatures.Po
#	$(AM_V_CXX)source='listfeatures.cc' object='elvexbuildlexicon-listfeatures.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-listfeatures.obj `if test -f 'listfeatures.cc'; then $(CYGPATH_W) 'listfeatures.cc'; else $(CYGPATH_W) '$(srcdir)/listfeatures.cc'; fi`

elvexbuildlexicon-node.o: node.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-node.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-node.Tpo -c -o elvexbuildlexicon-node.o `test -f 'node.cc' || echo '$(srcdir)/'`node.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-node.Tpo $(DEPDIR)/elvexbuildlexicon-node.Po
#	$(AM_V_CXX)source='node.cc' object='elvexbuildlexicon-node.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-node.o `test -f 'node.cc' || echo '$(srcdir)/'`node.cc

elvexbuildlexicon-node.obj: node.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-node.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-node.Tpo -c -o elvexbuildlexicon-node.obj `if test -f 'node.cc'; then $(CYGPATH_W) 'node.cc'; else $(CYGPATH_W) '$(srcdir)/node.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-node.Tpo $(DEPDIR)/elvexbuildlexicon-node.Po
#	$(AM_V_CXX)source='node.cc' object='elvexbuildlexicon-node.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-node.obj `if test -f 'node.cc'; then $(CYGPATH_W) 'node.cc'; else $(CYGPATH_W) '$(srcdir)/node.cc'; fi`

elvexbuildlexicon-parser.o: parser.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-parser.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-parser.Tpo -c -o elvexbuildlexicon-parser.o `test -f 'parser.cc' || echo '$(srcdir)/'`parser.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-parser.Tpo $(DEPDIR)/elvexbuildlexicon-parser.Po
#	$(AM_V_CXX)source='parser.cc' object='elvexbuildlexicon-parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-parser.o `test -f 'parser.cc' || echo '$(srcdir)/'`parser.cc

elvexbuildlexicon-parser.obj: parser.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-parser.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-parser.Tpo -c -o elvexbuildlexicon-parser.obj `if test -f 'parser.cc'; then $(CYGPATH_W) 'parser.cc'; else $(CYGPATH_W) '$(srcdir)/parser.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-parser.Tpo $(DEPDIR)/elvexbuildlexicon-parser.Po
#	$(AM_V_CXX)source='parser.cc' object='elvexbuildlexicon-parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-parser.obj `if test -f 'parser.cc'; then $(CYGPATH_W) 'parser.cc'; else $(CYGPATH_W) '$(srcdir)/parser.cc'; fi`

elvexbuildlexicon-rule.o: rule.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-rule.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-rule.Tpo -c -o elvexbuildlexicon-rule.o `test -f 'rule.cc' || echo '$(srcdir)/'`rule.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-rule.Tpo $(DEPDIR)/elvexbuildlexicon-rule.Po
#	$(AM_V_CXX)source='rule.cc' object='elvexbuildlexicon-rule.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-rule.o `test -f 'rule.cc' || echo '$(srcdir)/'`rule.cc

elvexbuildlexicon-rule.obj: rule.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-rule.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-rule.Tpo -c -o elvexbuildlexicon-rule.obj `if test -f 'rule.cc'; then $(CYGPATH_W) 'rule.cc'; else $(CYGPATH_W) '$(srcdir)/rule.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-rule.Tpo $(DEPDIR)/elvexbuildlexicon-rule.Po
#	$(AM_V_CXX)source='rule.cc' object='elvexbuildlexicon-rule.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-rule.obj `if test -f 'rule.cc'; then $(CYGPATH_W) 'rule.cc'; else $(CYGPATH_W) '$(srcdir)/rule.cc'; fi`

elvexbuildlexicon-serializable.o: serializable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-serializable.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-serializable.Tpo -c -o elvexbuildlexicon-serializable.o `test -f 'serializable.cc' || echo '$(srcdir)/'`serializable.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-serializable.Tpo $(DEPDIR)/elvexbuildlexicon-serializable.Po
#	$(AM_V_CXX)source='serializable.cc' object='elvexbuildlexicon-serializable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-serializable.o `test -f 'serializable.cc' || echo '$(srcdir)/'`serializable.cc

elvexbuildlexicon-serializable.obj: serializable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-serializable.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-serializable.Tpo -c -o elvexbuildlexicon-serializable.obj `if test -f 'serializable.cc'; then $(CYGPATH_W) 'serializable.cc'; else $(CYGPATH_W) '$(srcdir)/serializable.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-serializable.Tpo $(DEPDIR)/elvexbuildlexicon-serializable.Po
#	$(AM_V_CXX)source='serializable.cc' object='elvexbuildlexicon-serializable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-serializable.obj `if test -f 'serializable.cc'; then $(CYGPATH_W) 'serializable.cc'; else $(CYGPATH_W) '$(srcdir)/serializable.cc'; fi`

elvexbuildlexicon-statement.o: statement.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-statement.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-statement.Tpo -c -o elvexbuildlexicon-statement.o `test -f 'statement.cc' || echo '$(srcdir)/'`statement.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-statement.Tpo $(DEPDIR)/elvexbuildlexicon-statement.Po
#	$(AM_V_CXX)source='statement.cc' object='elvexbuildlexicon-statement.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-statement.o `test -f 'statement.cc' || echo '$(srcdir)/'`statement.cc

elvexbuildlexicon-statement.obj: statement.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-statement.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-statement.Tpo -c -o elvexbuildlexicon-statement.obj `if test -f 'statement.cc'; then $(CYGPATH_W) 'statement.cc'; else $(CYGPATH_W) '$(srcdir)/statement.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-statement.Tpo $(DEPDIR)/elvexbuildlexicon-statement.Po
#	$(AM_V_CXX)source='statement.cc' object='elvexbuildlexicon-statement.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-statement.obj `if test -f 'statement.cc'; then $(CYGPATH_W) 'statement.cc'; else $(CYGPATH_W) '$(srcdir)/statement.cc'; fi`

elvexbuildlexicon-statements.o: statements.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-statements.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-statements.Tpo -c -o elvexbuildlexicon-statements.o `test -f 'statements.cc' || echo '$(srcdir)/'`statements.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-statements.Tpo $(DEPDIR)/elvexbuildlexicon-statements.Po
#	$(AM_V_CXX)source='statements.cc' object='elvexbuildlexicon-statements.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-statements.o `test -f 'statements.cc' || echo '$(srcdir)/'`statements.cc

elvexbuildlexicon-statements.obj: statements.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-statements.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-statements.Tpo -c -o elvexbuildlexicon-statements.obj `if test -f 'statements.cc'; then $(CYGPATH_W) 'statements.cc'; else $(CYGPATH_W) '$(srcdir)/statements.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-statements.Tpo $(DEPDIR)/elvexbuildlexicon-statements.Po
#	$(AM_V_CXX)source='statements.cc' object='elvexbuildlexicon-statements.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-statements.obj `if test -f 'statements.cc'; then $(CYGPATH_W) 'statements.cc'; else $(CYGPATH_W) '$(srcdir)/statements.cc'; fi`

elvexbuildlexicon-synthesizer.o: synthesizer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-synthesizer.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-synthesizer.Tpo -c -o elvexbuildlexicon-synthesizer.o `test -f 'synthesizer.cc' || echo '$(srcdir)/'`synthesizer.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-synthesizer.Tpo $(DEPDIR)/elvexbuildlexicon-synthesizer.Po
#	$(AM_V_CXX)source='synthesizer.cc' object='elvexbuildlexicon-synthesizer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-synthesizer.o `test -f 'synthesizer.cc' || echo '$(srcdir)/'`synthesizer.cc

elvexbuildlexicon-synthesizer.obj: synthesizer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-synthesizer.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-synthesizer.Tpo -c -o elvexbuildlexicon-synthesizer.obj `if test -f 'synthesizer.cc'; then $(CYGPATH_W) 'synthesizer.cc'; else $(CYGPATH_W) '$(srcdir)/synthesizer.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-synthesizer.Tpo $(DEPDIR)/elvexbuildlexicon-synthesizer.Po
#	$(AM_V_CXX)source='synthesizer.cc' object='elvexbuildlexicon-synthesizer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-synthesizer.obj `if test -f 'synthesizer.cc'; then $(CYGPATH_W) 'synthesizer.cc'; else $(CYGPATH_W) '$(srcdir)/synthesizer.cc'; fi`

elvexbuildlexicon-term.o: term.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-term.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-term.Tpo -c -o elvexbuildlexicon-term.o `test -f 'term.cc' || echo '$(srcdir)/'`term.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-term.Tpo $(DEPDIR)/elvexbuildlexicon-term.Po
#	$(AM_V_CXX)source='term.cc' object='elvexbuildlexicon-term.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-term.o `test -f 'term.cc' || echo '$(srcdir)/'`term.cc

elvexbuildlexicon-term.obj: term.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-term.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-term.Tpo -c -o elvexbuildlexicon-term.obj `if test -f 'term.cc'; then $(CYGPATH_W) 'term.cc'; else $(CYGPATH_W) '$(srcdir)/term.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-term.Tpo $(DEPDIR)/elvexbuildlexicon-term.Po
#	$(AM_V_CXX)source='term.cc' object='elvexbuildlexicon-term.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-term.obj `if test -f 'term.cc'; then $(CYGPATH_W) 'term.cc'; else $(CYGPATH_W) '$(srcdir)/term.cc'; fi`

elvexbuildlexicon-terms.o: terms.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-terms.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-terms.Tpo -c -o elvexbuildlexicon-terms.o `test -f 'terms.cc' || echo '$(srcdir)/'`terms.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-terms.Tpo $(DEPDIR)/elvexbuildlexicon-terms.Po
#	$(AM_V_CXX)source='terms.cc' object='elvexbuildlexicon-terms.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-terms.o `test -f 'terms.cc' || echo '$(srcdir)/'`terms.cc

elvexbuildlexicon-terms.obj: terms.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-terms.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-terms.Tpo -c -o elvexbuildlexicon-terms.obj `if test -f 'terms.cc'; then $(CYGPATH_W) 'terms.cc'; else $(CYGPATH_W) '$(srcdir)/terms.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-terms.Tpo $(DEPDIR)/elvexbuildlexicon-terms.Po
#	$(AM_V_CXX)source='terms.cc' object='elvexbuildlexicon-terms.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-terms.obj `if test -f 'terms.cc'; then $(CYGPATH_W) 'terms.cc'; else $(CYGPATH_W) '$(srcdir)/terms.cc'; fi`

elvexbuildlexicon-value.o: value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-value.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-value.Tpo -c -o elvexbuildlexicon-value.o `test -f 'value.cc' || echo '$(srcdir)/'`value.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-value.Tpo $(DEPDIR)/elvexbuildlexicon-value.Po
#	$(AM_V_CXX)source='value.cc' object='elvexbuildlexicon-value.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-value.o `test -f 'value.cc' || echo '$(srcdir)/'`value.cc

elvexbuildlexicon-value.obj: value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-value.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-value.Tpo -c -o elvexbuildlexicon-value.obj `if test -f 'value.cc'; then $(CYGPATH_W) 'value.cc'; else $(CYGPATH_W) '$(srcdir)/value.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-value.Tpo $(DEPDIR)/elvexbuildlexicon-value.Po
#	$(AM_V_CXX)source='value.cc' object='elvexbuildlexicon-value.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-value.obj `if test -f 'value.cc'; then $(CYGPATH_W) 'value.cc'; else $(CYGPATH_W) '$(srcdir)/value.cc'; fi`

elvexbuildlexicon-variableflag.o: variableflag.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-variableflag.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-variableflag.Tpo -c -o elvexbuildlexicon-variableflag.o `test -f 'variableflag.cc' || echo '$(srcdir)/'`variableflag.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-variableflag.Tpo $(DEPDIR)/elvexbuildlexicon-variableflag.Po
#	$(AM_V_CXX)source='variableflag.cc' object='elvexbuildlexicon-variableflag.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-variableflag.o `test -f 'variableflag.cc' || echo '$(srcdir)/'`variableflag.cc

elvexbuildlexicon-variableflag.obj: variableflag.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-variableflag.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-variableflag.Tpo -c -o elvexbuildlexicon-variableflag.obj `if test -f 'variableflag.cc'; then $(CYGPATH_W) 'variableflag.cc'; else $(CYGPATH_W) '$(srcdir)/variableflag.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-variableflag.Tpo $(DEPDIR)/elvexbuildlexicon-variableflag.Po
#	$(AM_V_CXX)source='variableflag.cc' object='elvexbuildlexicon-variableflag.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-variableflag.obj `if test -f 'variableflag.cc'; then $(CYGPATH_W) 'variableflag.cc'; else $(CYGPATH_W) '$(srcdir)/variableflag.cc'; fi`

elvexbuildlexicon-vartable.o: vartable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-vartable.o -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-vartable.Tpo -c -o elvexbuildlexicon-vartable.o `test -f 'vartable.cc' || echo '$(srcdir)/'`vartable.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-vartable.Tpo $(DEPDIR)/elvexbuildlexicon-vartable.Po
#	$(AM_V_CXX)source='vartable.cc' object='elvexbuildlexicon-vartable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-vartable.o `test -f 'vartable.cc' || echo '$(srcdir)/'`vartable.cc

elvexbuildlexicon-vartable.obj: vartable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -MT elvexbuildlexicon-vartable.obj -MD -MP -MF $(DEPDIR)/elvexbuildlexicon-vartable.Tpo -c -o elvexbuildlexicon-vartable.obj `if test -f 'vartable.cc'; then $(CYGPATH_W) 'vartable.cc'; else $(CYGPATH_W) '$(srcdir)/vartable.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexbuildlexicon-vartable.Tpo $(DEPDIR)/elvexbuildlexicon-vartable.Po
#	$(AM_V_CXX)source='vartable.cc' object='elvexbuildlexicon-vartable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexbuildlexicon_CXXFLAGS) $(CXXFLAGS) -c -o elvexbuildlexicon-vartable.obj `if test -f 'vartable.cc'; then $(CYGPATH_W) 'vartable.cc'; else $(CYGPATH_W) '$(srcdir)/vartable.cc'; fi`

elvexdebug-rulesyacc.o: rulesyacc.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-rulesyacc.o -MD -MP -MF $(DEPDIR)/elvexdebug-rulesyacc.Tpo -c -o elvexdebug-rulesyacc.o `test -f 'rulesyacc.cc' || echo '$(srcdir)/'`rulesyacc.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-rulesyacc.Tpo $(DEPDIR)/elvexdebug-rulesyacc.Po
#	$(AM_V_CXX)source='rulesyacc.cc' object='elvexdebug-rulesyacc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-rulesyacc.o `test -f 'rulesyacc.cc' || echo '$(srcdir)/'`rulesyacc.cc

elvexdebug-rulesyacc.obj: rulesyacc.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-rulesyacc.obj -MD -MP -MF $(DEPDIR)/elvexdebug-rulesyacc.Tpo -c -o elvexdebug-rulesyacc.obj `if test -f 'rulesyacc.cc'; then $(CYGPATH_W) 'rulesyacc.cc'; else $(CYGPATH_W) '$(srcdir)/rulesyacc.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-rulesyacc.Tpo $(DEPDIR)/elvexdebug-rulesyacc.Po
#	$(AM_V_CXX)source='rulesyacc.cc' object='elvexdebug-rulesyacc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-rulesyacc.obj `if test -f 'rulesyacc.cc'; then $(CYGPATH_W) 'rulesyacc.cc'; else $(CYGPATH_W) '$(srcdir)/rulesyacc.cc'; fi`

elvexdebug-ruleslex.o: ruleslex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-ruleslex.o -MD -MP -MF $(DEPDIR)/elvexdebug-ruleslex.Tpo -c -o elvexdebug-ruleslex.o `test -f 'ruleslex.cc' || echo '$(srcdir)/'`ruleslex.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-ruleslex.Tpo $(DEPDIR)/elvexdebug-ruleslex.Po
#	$(AM_V_CXX)source='ruleslex.cc' object='elvexdebug-ruleslex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-ruleslex.o `test -f 'ruleslex.cc' || echo '$(srcdir)/'`ruleslex.cc

elvexdebug-ruleslex.obj: ruleslex.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-ruleslex.obj -MD -MP -MF $(DEPDIR)/elvexdebug-ruleslex.Tpo -c -o elvexdebug-ruleslex.obj `if test -f 'ruleslex.cc'; then $(CYGPATH_W) 'ruleslex.cc'; else $(CYGPATH_W) '$(srcdir)/ruleslex.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-ruleslex.Tpo $(DEPDIR)/elvexdebug-ruleslex.Po
#	$(AM_V_CXX)source='ruleslex.cc' object='elvexdebug-ruleslex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-ruleslex.obj `if test -f 'ruleslex.cc'; then $(CYGPATH_W) 'ruleslex.cc'; else $(CYGPATH_W) '$(srcdir)/ruleslex.cc'; fi`

elvexdebug-bitset.o: bitset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-bitset.o -MD -MP -MF $(DEPDIR)/elvexdebug-bitset.Tpo -c -o elvexdebug-bitset.o `test -f 'bitset.cc' || echo '$(srcdir)/'`bitset.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-bitset.Tpo $(DEPDIR)/elvexdebug-bitset.Po
#	$(AM_V_CXX)source='bitset.cc' object='elvexdebug-bitset.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-bitset.o `test -f 'bitset.cc' || echo '$(srcdir)/'`bitset.cc

elvexdebug-bitset.obj: bitset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-bitset.obj -MD -MP -MF $(DEPDIR)/elvexdebug-bitset.Tpo -c -o elvexdebug-bitset.obj `if test -f 'bitset.cc'; then $(CYGPATH_W) 'bitset.cc'; else $(CYGPATH_W) '$(srcdir)/bitset.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-bitset.Tpo $(DEPDIR)/elvexdebug-bitset.Po
#	$(AM_V_CXX)source='bitset.cc' object='elvexdebug-bitset.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-bitset.obj `if test -f 'bitset.cc'; then $(CYGPATH_W) 'bitset.cc'; else $(CYGPATH_W) '$(srcdir)/bitset.cc'; fi`

elvexdebug-compact-lexicon-buffer.o: compact-lexicon-buffer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon-buffer.o -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon-buffer.Tpo -c -o elvexdebug-compact-lexicon-buffer.o `test -f 'compact-lexicon-buffer.cc' || echo '$(srcdir)/'`compact-lexicon-buffer.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon-buffer.Tpo $(DEPDIR)/elvexdebug-compact-lexicon-buffer.Po
#	$(AM_V_CXX)source='compact-lexicon-buffer.cc' object='elvexdebug-compact-lexicon-buffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon-buffer.o `test -f 'compact-lexicon-buffer.cc' || echo '$(srcdir)/'`compact-lexicon-buffer.cc

elvexdebug-compact-lexicon-buffer.obj: compact-lexicon-buffer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon-buffer.obj -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon-buffer.Tpo -c -o elvexdebug-compact-lexicon-buffer.obj `if test -f 'compact-lexicon-buffer.cc'; then $(CYGPATH_W) 'compact-lexicon-buffer.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-buffer.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon-buffer.Tpo $(DEPDIR)/elvexdebug-compact-lexicon-buffer.Po
#	$(AM_V_CXX)source='compact-lexicon-buffer.cc' object='elvexdebug-compact-lexicon-buffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon-buffer.obj `if test -f 'compact-lexicon-buffer.cc'; then $(CYGPATH_W) 'compact-lexicon-buffer.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-buffer.cc'; fi`

elvexdebug-compact-lexicon-fsa.o: compact-lexicon-fsa.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon-fsa.o -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon-fsa.Tpo -c -o elvexdebug-compact-lexicon-fsa.o `test -f 'compact-lexicon-fsa.cc' || echo '$(srcdir)/'`compact-lexicon-fsa.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon-fsa.Tpo $(DEPDIR)/elvexdebug-compact-lexicon-fsa.Po
#	$(AM_V_CXX)source='compact-lexicon-fsa.cc' object='elvexdebug-compact-lexicon-fsa.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon-fsa.o `test -f 'compact-lexicon-fsa.cc' || echo '$(srcdir)/'`compact-lexicon-fsa.cc

elvexdebug-compact-lexicon-fsa.obj: compact-lexicon-fsa.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon-fsa.obj -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon-fsa.Tpo -c -o elvexdebug-compact-lexicon-fsa.obj `if test -f 'compact-lexicon-fsa.cc'; then $(CYGPATH_W) 'compact-lexicon-fsa.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-fsa.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon-fsa.Tpo $(DEPDIR)/elvexdebug-compact-lexicon-fsa.Po
#	$(AM_V_CXX)source='compact-lexicon-fsa.cc' object='elvexdebug-compact-lexicon-fsa.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon-fsa.obj `if test -f 'compact-lexicon-fsa.cc'; then $(CYGPATH_W) 'compact-lexicon-fsa.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-fsa.cc'; fi`

elvexdebug-compact-lexicon-info.o: compact-lexicon-info.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon-info.o -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon-info.Tpo -c -o elvexdebug-compact-lexicon-info.o `test -f 'compact-lexicon-info.cc' || echo '$(srcdir)/'`compact-lexicon-info.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon-info.Tpo $(DEPDIR)/elvexdebug-compact-lexicon-info.Po
#	$(AM_V_CXX)source='compact-lexicon-info.cc' object='elvexdebug-compact-lexicon-info.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon-info.o `test -f 'compact-lexicon-info.cc' || echo '$(srcdir)/'`compact-lexicon-info.cc

elvexdebug-compact-lexicon-info.obj: compact-lexicon-info.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon-info.obj -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon-info.Tpo -c -o elvexdebug-compact-lexicon-info.obj `if test -f 'compact-lexicon-info.cc'; then $(CYGPATH_W) 'compact-lexicon-info.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-info.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon-info.Tpo $(DEPDIR)/elvexdebug-compact-lexicon-info.Po
#	$(AM_V_CXX)source='compact-lexicon-info.cc' object='elvexdebug-compact-lexicon-info.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon-info.obj `if test -f 'compact-lexicon-info.cc'; then $(CYGPATH_W) 'compact-lexicon-info.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-info.cc'; fi`

elvexdebug-compact-lexicon-tree.o: compact-lexicon-tree.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon-tree.o -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon-tree.Tpo -c -o elvexdebug-compact-lexicon-tree.o `test -f 'compact-lexicon-tree.cc' || echo '$(srcdir)/'`compact-lexicon-tree.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon-tree.Tpo $(DEPDIR)/elvexdebug-compact-lexicon-tree.Po
#	$(AM_V_CXX)source='compact-lexicon-tree.cc' object='elvexdebug-compact-lexicon-tree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon-tree.o `test -f 'compact-lexicon-tree.cc' || echo '$(srcdir)/'`compact-lexicon-tree.cc

elvexdebug-compact-lexicon-tree.obj: compact-lexicon-tree.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon-tree.obj -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon-tree.Tpo -c -o elvexdebug-compact-lexicon-tree.obj `if test -f 'compact-lexicon-tree.cc'; then $(CYGPATH_W) 'compact-lexicon-tree.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-tree.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon-tree.Tpo $(DEPDIR)/elvexdebug-compact-lexicon-tree.Po
#	$(AM_V_CXX)source='compact-lexicon-tree.cc' object='elvexdebug-compact-lexicon-tree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon-tree.obj `if test -f 'compact-lexicon-tree.cc'; then $(CYGPATH_W) 'compact-lexicon-tree.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon-tree.cc'; fi`

elvexdebug-compact-lexicon.o: compact-lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon.o -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon.Tpo -c -o elvexdebug-compact-lexicon.o `test -f 'compact-lexicon.cc' || echo '$(srcdir)/'`compact-lexicon.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon.Tpo $(DEPDIR)/elvexdebug-compact-lexicon.Po
#	$(AM_V_CXX)source='compact-lexicon.cc' object='elvexdebug-compact-lexicon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon.o `test -f 'compact-lexicon.cc' || echo '$(srcdir)/'`compact-lexicon.cc

elvexdebug-compact-lexicon.obj: compact-lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-compact-lexicon.obj -MD -MP -MF $(DEPDIR)/elvexdebug-compact-lexicon.Tpo -c -o elvexdebug-compact-lexicon.obj `if test -f 'compact-lexicon.cc'; then $(CYGPATH_W) 'compact-lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-compact-lexicon.Tpo $(DEPDIR)/elvexdebug-compact-lexicon.Po
#	$(AM_V_CXX)source='compact-lexicon.cc' object='elvexdebug-compact-lexicon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-compact-lexicon.obj `if test -f 'compact-lexicon.cc'; then $(CYGPATH_W) 'compact-lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/compact-lexicon.cc'; fi`

elvexdebug-entries.o: entries.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-entries.o -MD -MP -MF $(DEPDIR)/elvexdebug-entries.Tpo -c -o elvexdebug-entries.o `test -f 'entries.cc' || echo '$(srcdir)/'`entries.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-entries.Tpo $(DEPDIR)/elvexdebug-entries.Po
#	$(AM_V_CXX)source='entries.cc' object='elvexdebug-entries.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-entries.o `test -f 'entries.cc' || echo '$(srcdir)/'`entries.cc

elvexdebug-entries.obj: entries.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-entries.obj -MD -MP -MF $(DEPDIR)/elvexdebug-entries.Tpo -c -o elvexdebug-entries.obj `if test -f 'entries.cc'; then $(CYGPATH_W) 'entries.cc'; else $(CYGPATH_W) '$(srcdir)/entries.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-entries.Tpo $(DEPDIR)/elvexdebug-entries.Po
#	$(AM_V_CXX)source='entries.cc' object='elvexdebug-entries.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-entries.obj `if test -f 'entries.cc'; then $(CYGPATH_W) 'entries.cc'; else $(CYGPATH_W) '$(srcdir)/entries.cc'; fi`

elvexdebug-entry.o: entry.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-entry.o -MD -MP -MF $(DEPDIR)/elvexdebug-entry.Tpo -c -o elvexdebug-entry.o `test -f 'entry.cc' || echo '$(srcdir)/'`entry.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-entry.Tpo $(DEPDIR)/elvexdebug-entry.Po
#	$(AM_V_CXX)source='entry.cc' object='elvexdebug-entry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-entry.o `test -f 'entry.cc' || echo '$(srcdir)/'`entry.cc

elvexdebug-entry.obj: entry.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-entry.obj -MD -MP -MF $(DEPDIR)/elvexdebug-entry.Tpo -c -o elvexdebug-entry.obj `if test -f 'entry.cc'; then $(CYGPATH_W) 'entry.cc'; else $(CYGPATH_W) '$(srcdir)/entry.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-entry.Tpo $(DEPDIR)/elvexdebug-entry.Po
#	$(AM_V_CXX)source='entry.cc' object='elvexdebug-entry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-entry.obj `if test -f 'entry.cc'; then $(CYGPATH_W) 'entry.cc'; else $(CYGPATH_W) '$(srcdir)/entry.cc'; fi`

elvexdebug-environment.o: environment.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-environment.o -MD -MP -MF $(DEPDIR)/elvexdebug-environment.Tpo -c -o elvexdebug-environment.o `test -f 'environment.cc' || echo '$(srcdir)/'`environment.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-environment.Tpo $(DEPDIR)/elvexdebug-environment.Po
#	$(AM_V_CXX)source='environment.cc' object='elvexdebug-environment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-environment.o `test -f 'environment.cc' || echo '$(srcdir)/'`environment.cc

elvexdebug-environment.obj: environment.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-environment.obj -MD -MP -MF $(DEPDIR)/elvexdebug-environment.Tpo -c -o elvexdebug-environment.obj `if test -f 'environment.cc'; then $(CYGPATH_W) 'environment.cc'; else $(CYGPATH_W) '$(srcdir)/environment.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-environment.Tpo $(DEPDIR)/elvexdebug-environment.Po
#	$(AM_V_CXX)source='environment.cc' object='elvexdebug-environment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-environment.obj `if test -f 'environment.cc'; then $(CYGPATH_W) 'environment.cc'; else $(CYGPATH_W) '$(srcdir)/environment.cc'; fi`

elvexdebug-feature.o: feature.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-feature.o -MD -MP -MF $(DEPDIR)/elvexdebug-feature.Tpo -c -o elvexdebug-feature.o `test -f 'feature.cc' || echo '$(srcdir)/'`feature.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-feature.Tpo $(DEPDIR)/elvexdebug-feature.Po
#	$(AM_V_CXX)source='feature.cc' object='elvexdebug-feature.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-feature.o `test -f 'feature.cc' || echo '$(srcdir)/'`feature.cc

elvexdebug-feature.obj: feature.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-feature.obj -MD -MP -MF $(DEPDIR)/elvexdebug-feature.Tpo -c -o elvexdebug-feature.obj `if test -f 'feature.cc'; then $(CYGPATH_W) 'feature.cc'; else $(CYGPATH_W) '$(srcdir)/feature.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-feature.Tpo $(DEPDIR)/elvexdebug-feature.Po
#	$(AM_V_CXX)source='feature.cc' object='elvexdebug-feature.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-feature.obj `if test -f 'feature.cc'; then $(CYGPATH_W) 'feature.cc'; else $(CYGPATH_W) '$(srcdir)/feature.cc'; fi`

elvexdebug-features.o: features.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-features.o -MD -MP -MF $(DEPDIR)/elvexdebug-features.Tpo -c -o elvexdebug-features.o `test -f 'features.cc' || echo '$(srcdir)/'`features.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-features.Tpo $(DEPDIR)/elvexdebug-features.Po
#	$(AM_V_CXX)source='features.cc' object='elvexdebug-features.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-features.o `test -f 'features.cc' || echo '$(srcdir)/'`features.cc

elvexdebug-features.obj: features.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-features.obj -MD -MP -MF $(DEPDIR)/elvexdebug-features.Tpo -c -o elvexdebug-features.obj `if test -f 'features.cc'; then $(CYGPATH_W) 'features.cc'; else $(CYGPATH_W) '$(srcdir)/features.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-features.Tpo $(DEPDIR)/elvexdebug-features.Po
#	$(AM_V_CXX)source='features.cc' object='elvexdebug-features.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-features.obj `if test -f 'features.cc'; then $(CYGPATH_W) 'features.cc'; else $(CYGPATH_W) '$(srcdir)/features.cc'; fi`

elvexdebug-flags.o: flags.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-flags.o -MD -MP -MF $(DEPDIR)/elvexdebug-flags.Tpo -c -o elvexdebug-flags.o `test -f 'flags.cc' || echo '$(srcdir)/'`flags.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-flags.Tpo $(DEPDIR)/elvexdebug-flags.Po
#	$(AM_V_CXX)source='flags.cc' object='elvexdebug-flags.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-flags.o `test -f 'flags.cc' || echo '$(srcdir)/'`flags.cc

elvexdebug-flags.obj: flags.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-flags.obj -MD -MP -MF $(DEPDIR)/elvexdebug-flags.Tpo -c -o elvexdebug-flags.obj `if test -f 'flags.cc'; then $(CYGPATH_W) 'flags.cc'; else $(CYGPATH_W) '$(srcdir)/flags.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-flags.Tpo $(DEPDIR)/elvexdebug-flags.Po
#	$(AM_V_CXX)source='flags.cc' object='elvexdebug-flags.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-flags.obj `if test -f 'flags.cc'; then $(CYGPATH_W) 'flags.cc'; else $(CYGPATH_W) '$(srcdir)/flags.cc'; fi`

elvexdebug-forest.o: forest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-forest.o -MD -MP -MF $(DEPDIR)/elvexdebug-forest.Tpo -c -o elvexdebug-forest.o `test -f 'forest.cc' || echo '$(srcdir)/'`forest.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-forest.Tpo $(DEPDIR)/elvexdebug-forest.Po
#	$(AM_V_CXX)source='forest.cc' object='elvexdebug-forest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-forest.o `test -f 'forest.cc' || echo '$(srcdir)/'`forest.cc

elvexdebug-forest.obj: forest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-forest.obj -MD -MP -MF $(DEPDIR)/elvexdebug-forest.Tpo -c -o elvexdebug-forest.obj `if test -f 'forest.cc'; then $(CYGPATH_W) 'forest.cc'; else $(CYGPATH_W) '$(srcdir)/forest.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-forest.Tpo $(DEPDIR)/elvexdebug-forest.Po
#	$(AM_V_CXX)source='forest.cc' object='elvexdebug-forest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-forest.obj `if test -f 'forest.cc'; then $(CYGPATH_W) 'forest.cc'; else $(CYGPATH_W) '$(srcdir)/forest.cc'; fi`

elvexdebug-forestidentifier.o: forestidentifier.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-forestidentifier.o -MD -MP -MF $(DEPDIR)/elvexdebug-forestidentifier.Tpo -c -o elvexdebug-forestidentifier.o `test -f 'forestidentifier.cc' || echo '$(srcdir)/'`forestidentifier.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-forestidentifier.Tpo $(DEPDIR)/elvexdebug-forestidentifier.Po
#	$(AM_V_CXX)source='forestidentifier.cc' object='elvexdebug-forestidentifier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-forestidentifier.o `test -f 'forestidentifier.cc' || echo '$(srcdir)/'`forestidentifier.cc

elvexdebug-forestidentifier.obj: forestidentifier.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-forestidentifier.obj -MD -MP -MF $(DEPDIR)/elvexdebug-forestidentifier.Tpo -c -o elvexdebug-forestidentifier.obj `if test -f 'forestidentifier.cc'; then $(CYGPATH_W) 'forestidentifier.cc'; else $(CYGPATH_W) '$(srcdir)/forestidentifier.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-forestidentifier.Tpo $(DEPDIR)/elvexdebug-forestidentifier.Po
#	$(AM_V_CXX)source='forestidentifier.cc' object='elvexdebug-forestidentifier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-forestidentifier.obj `if test -f 'forestidentifier.cc'; then $(CYGPATH_W) 'forestidentifier.cc'; else $(CYGPATH_W) '$(srcdir)/forestidentifier.cc'; fi`

elvexdebug-forestmap.o: forestmap.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-forestmap.o -MD -MP -MF $(DEPDIR)/elvexdebug-forestmap.Tpo -c -o elvexdebug-forestmap.o `test -f 'forestmap.cc' || echo '$(srcdir)/'`forestmap.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-forestmap.Tpo $(DEPDIR)/elvexdebug-forestmap.Po
#	$(AM_V_CXX)source='forestmap.cc' object='elvexdebug-forestmap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-forestmap.o `test -f 'forestmap.cc' || echo '$(srcdir)/'`forestmap.cc

elvexdebug-forestmap.obj: forestmap.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-forestmap.obj -MD -MP -MF $(DEPDIR)/elvexdebug-forestmap.Tpo -c -o elvexdebug-forestmap.obj `if test -f 'forestmap.cc'; then $(CYGPATH_W) 'forestmap.cc'; else $(CYGPATH_W) '$(srcdir)/forestmap.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-forestmap.Tpo $(DEPDIR)/elvexdebug-forestmap.Po
#	$(AM_V_CXX)source='forestmap.cc' object='elvexdebug-forestmap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-forestmap.obj `if test -f 'forestmap.cc'; then $(CYGPATH_W) 'forestmap.cc'; else $(CYGPATH_W) '$(srcdir)/forestmap.cc'; fi`

elvexdebug-grammar.o: grammar.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-grammar.o -MD -MP -MF $(DEPDIR)/elvexdebug-grammar.Tpo -c -o elvexdebug-grammar.o `test -f 'grammar.cc' || echo '$(srcdir)/'`grammar.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-grammar.Tpo $(DEPDIR)/elvexdebug-grammar.Po
#	$(AM_V_CXX)source='grammar.cc' object='elvexdebug-grammar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-grammar.o `test -f 'grammar.cc' || echo '$(srcdir)/'`grammar.cc

elvexdebug-grammar.obj: grammar.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-grammar.obj -MD -MP -MF $(DEPDIR)/elvexdebug-grammar.Tpo -c -o elvexdebug-grammar.obj `if test -f 'grammar.cc'; then $(CYGPATH_W) 'grammar.cc'; else $(CYGPATH_W) '$(srcdir)/grammar.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-grammar.Tpo $(DEPDIR)/elvexdebug-grammar.Po
#	$(AM_V_CXX)source='grammar.cc' object='elvexdebug-grammar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-grammar.obj `if test -f 'grammar.cc'; then $(CYGPATH_W) 'grammar.cc'; else $(CYGPATH_W) '$(srcdir)/grammar.cc'; fi`

elvexdebug-id.o: id.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-id.o -MD -MP -MF $(DEPDIR)/elvexdebug-id.Tpo -c -o elvexdebug-id.o `test -f 'id.cc' || echo '$(srcdir)/'`id.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-id.Tpo $(DEPDIR)/elvexdebug-id.Po
#	$(AM_V_CXX)source='id.cc' object='elvexdebug-id.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-id.o `test -f 'id.cc' || echo '$(srcdir)/'`id.cc

elvexdebug-id.obj: id.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-id.obj -MD -MP -MF $(DEPDIR)/elvexdebug-id.Tpo -c -o elvexdebug-id.obj `if test -f 'id.cc'; then $(CYGPATH_W) 'id.cc'; else $(CYGPATH_W) '$(srcdir)/id.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-id.Tpo $(DEPDIR)/elvexdebug-id.Po
#	$(AM_V_CXX)source='id.cc' object='elvexdebug-id.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-id.obj `if test -f 'id.cc'; then $(CYGPATH_W) 'id.cc'; else $(CYGPATH_W) '$(srcdir)/id.cc'; fi`

elvexdebug-item.o: item.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-item.o -MD -MP -MF $(DEPDIR)/elvexdebug-item.Tpo -c -o elvexdebug-item.o `test -f 'item.cc' || echo '$(srcdir)/'`item.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-item.Tpo $(DEPDIR)/elvexdebug-item.Po
#	$(AM_V_CXX)source='item.cc' object='elvexdebug-item.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-item.o `test -f 'item.cc' || echo '$(srcdir)/'`item.cc

elvexdebug-item.obj: item.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-item.obj -MD -MP -MF $(DEPDIR)/elvexdebug-item.Tpo -c -o elvexdebug-item.obj `if test -f 'item.cc'; then $(CYGPATH_W) 'item.cc'; else $(CYGPATH_W) '$(srcdir)/item.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-item.Tpo $(DEPDIR)/elvexdebug-item.Po
#	$(AM_V_CXX)source='item.cc' object='elvexdebug-item.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-item.obj `if test -f 'item.cc'; then $(CYGPATH_W) 'item.cc'; else $(CYGPATH_W) '$(srcdir)/item.cc'; fi`

elvexdebug-itemset.o: itemset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-itemset.o -MD -MP -MF $(DEPDIR)/elvexdebug-itemset.Tpo -c -o elvexdebug-itemset.o `test -f 'itemset.cc' || echo '$(srcdir)/'`itemset.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-itemset.Tpo $(DEPDIR)/elvexdebug-itemset.Po
#	$(AM_V_CXX)source='itemset.cc' object='elvexdebug-itemset.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-itemset.o `test -f 'itemset.cc' || echo '$(srcdir)/'`itemset.cc

elvexdebug-itemset.obj: itemset.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-itemset.obj -MD -MP -MF $(DEPDIR)/elvexdebug-itemset.Tpo -c -o elvexdebug-itemset.obj `if test -f 'itemset.cc'; then $(CYGPATH_W) 'itemset.cc'; else $(CYGPATH_W) '$(srcdir)/itemset.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-itemset.Tpo $(DEPDIR)/elvexdebug-itemset.Po
#	$(AM_V_CXX)source='itemset.cc' object='elvexdebug-itemset.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-itemset.obj `if test -f 'itemset.cc'; then $(CYGPATH_W) 'itemset.cc'; else $(CYGPATH_W) '$(srcdir)/itemset.cc'; fi`

elvexdebug-lexicon.o: lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-lexicon.o -MD -MP -MF $(DEPDIR)/elvexdebug-lexicon.Tpo -c -o elvexdebug-lexicon.o `test -f 'lexicon.cc' || echo '$(srcdir)/'`lexicon.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-lexicon.Tpo $(DEPDIR)/elvexdebug-lexicon.Po
#	$(AM_V_CXX)source='lexicon.cc' object='elvexdebug-lexicon.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-lexicon.o `test -f 'lexicon.cc' || echo '$(srcdir)/'`lexicon.cc

elvexdebug-lexicon.obj: lexicon.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-lexicon.obj -MD -MP -MF $(DEPDIR)/elvexdebug-lexicon.Tpo -c -o elvexdebug-lexicon.obj `if test -f 'lexicon.cc'; then $(CYGPATH_W) 'lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/lexicon.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-lexicon.Tpo $(DEPDIR)/elvexdebug-lexicon.Po
#	$(AM_V_CXX)source='lexicon.cc' object='elvexdebug-lexicon.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-lexicon.obj `if test -f 'lexicon.cc'; then $(CYGPATH_W) 'lexicon.cc'; else $(CYGPATH_W) '$(srcdir)/lexicon.cc'; fi`

elvexdebug-list.o: list.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-list.o -MD -MP -MF $(DEPDIR)/elvexdebug-list.Tpo -c -o elvexdebug-list.o `test -f 'list.cc' || echo '$(srcdir)/'`list.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-list.Tpo $(DEPDIR)/elvexdebug-list.Po
#	$(AM_V_CXX)source='list.cc' object='elvexdebug-list.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-list.o `test -f 'list.cc' || echo '$(srcdir)/'`list.cc

elvexdebug-list.obj: list.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-list.obj -MD -MP -MF $(DEPDIR)/elvexdebug-list.Tpo -c -o elvexdebug-list.obj `if test -f 'list.cc'; then $(CYGPATH_W) 'list.cc'; else $(CYGPATH_W) '$(srcdir)/list.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-list.Tpo $(DEPDIR)/elvexdebug-list.Po
#	$(AM_V_CXX)source='list.cc' object='elvexdebug-list.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-list.obj `if test -f 'list.cc'; then $(CYGPATH_W) 'list.cc'; else $(CYGPATH_W) '$(srcdir)/list.cc'; fi`

elvexdebug-listfeatures.o: listfeatures.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-listfeatures.o -MD -MP -MF $(DEPDIR)/elvexdebug-listfeatures.Tpo -c -o elvexdebug-listfeatures.o `test -f 'listfeatures.cc' || echo '$(srcdir)/'`listfeatures.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-listfeatures.Tpo $(DEPDIR)/elvexdebug-listfeatures.Po
#	$(AM_V_CXX)source='listfeatures.cc' object='elvexdebug-listfeatures.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-listfeatures.o `test -f 'listfeatures.cc' || echo '$(srcdir)/'`listfeatures.cc

elvexdebug-listfeatures.obj: listfeatures.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-listfeatures.obj -MD -MP -MF $(DEPDIR)/elvexdebug-listfeatures.Tpo -c -o elvexdebug-listfeatures.obj `if test -f 'listfeatures.cc'; then $(CYGPATH_W) 'listfeatures.cc'; else $(CYGPATH_W) '$(srcdir)/listfeatures.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-listfeatures.Tpo $(DEPDIR)/elvexdebug-listfeatures.Po
#	$(AM_V_CXX)source='listfeatures.cc' object='elvexdebug-listfeatures.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-listfeatures.obj `if test -f 'listfeatures.cc'; then $(CYGPATH_W) 'listfeatures.cc'; else $(CYGPATH_W) '$(srcdir)/listfeatures.cc'; fi`

elvexdebug-main.o: main.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-main.o -MD -MP -MF $(DEPDIR)/elvexdebug-main.Tpo -c -o elvexdebug-main.o `test -f 'main.cc' || echo '$(srcdir)/'`main.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-main.Tpo $(DEPDIR)/elvexdebug-main.Po
#	$(AM_V_CXX)source='main.cc' object='elvexdebug-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-main.o `test -f 'main.cc' || echo '$(srcdir)/'`main.cc

elvexdebug-main.obj: main.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-main.obj -MD -MP -MF $(DEPDIR)/elvexdebug-main.Tpo -c -o elvexdebug-main.obj `if test -f 'main.cc'; then $(CYGPATH_W) 'main.cc'; else $(CYGPATH_W) '$(srcdir)/main.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-main.Tpo $(DEPDIR)/elvexdebug-main.Po
#	$(AM_V_CXX)source='main.cc' object='elvexdebug-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-main.obj `if test -f 'main.cc'; then $(CYGPATH_W) 'main.cc'; else $(CYGPATH_W) '$(srcdir)/main.cc'; fi`

elvexdebug-memoization-map.o: memoization-map.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-memoization-map.o -MD -MP -MF $(DEPDIR)/elvexdebug-memoization-map.Tpo -c -o elvexdebug-memoization-map.o `test -f 'memoization-map.cc' || echo '$(srcdir)/'`memoization-map.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-memoization-map.Tpo $(DEPDIR)/elvexdebug-memoization-map.Po
#	$(AM_V_CXX)source='memoization-map.cc' object='elvexdebug-memoization-map.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-memoization-map.o `test -f 'memoization-map.cc' || echo '$(srcdir)/'`memoization-map.cc

elvexdebug-memoization-map.obj: memoization-map.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-memoization-map.obj -MD -MP -MF $(DEPDIR)/elvexdebug-memoization-map.Tpo -c -o elvexdebug-memoization-map.obj `if test -f 'memoization-map.cc'; then $(CYGPATH_W) 'memoization-map.cc'; else $(CYGPATH_W) '$(srcdir)/memoization-map.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-memoization-map.Tpo $(DEPDIR)/elvexdebug-memoization-map.Po
#	$(AM_V_CXX)source='memoization-map.cc' object='elvexdebug-memoization-map.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-memoization-map.obj `if test -f 'memoization-map.cc'; then $(CYGPATH_W) 'memoization-map.cc'; else $(CYGPATH_W) '$(srcdir)/memoization-map.cc'; fi`

elvexdebug-memoization-value.o: memoization-value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-memoization-value.o -MD -MP -MF $(DEPDIR)/elvexdebug-memoization-value.Tpo -c -o elvexdebug-memoization-value.o `test -f 'memoization-value.cc' || echo '$(srcdir)/'`memoization-value.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-memoization-value.Tpo $(DEPDIR)/elvexdebug-memoization-value.Po
#	$(AM_V_CXX)source='memoization-value.cc' object='elvexdebug-memoization-value.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-memoization-value.o `test -f 'memoization-value.cc' || echo '$(srcdir)/'`memoization-value.cc

elvexdebug-memoization-value.obj: memoization-value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-memoization-value.obj -MD -MP -MF $(DEPDIR)/elvexdebug-memoization-value.Tpo -c -o elvexdebug-memoization-value.obj `if test -f 'memoization-value.cc'; then $(CYGPATH_W) 'memoization-value.cc'; else $(CYGPATH_W) '$(srcdir)/memoization-value.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-memoization-value.Tpo $(DEPDIR)/elvexdebug-memoization-value.Po
#	$(AM_V_CXX)source='memoization-value.cc' object='elvexdebug-memoization-value.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-memoization-value.obj `if test -f 'memoization-value.cc'; then $(CYGPATH_W) 'memoization-value.cc'; else $(CYGPATH_W) '$(srcdir)/memoization-value.cc'; fi`

elvexdebug-node.o: node.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-node.o -MD -MP -MF $(DEPDIR)/elvexdebug-node.Tpo -c -o elvexdebug-node.o `test -f 'node.cc' || echo '$(srcdir)/'`node.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-node.Tpo $(DEPDIR)/elvexdebug-node.Po
#	$(AM_V_CXX)source='node.cc' object='elvexdebug-node.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-node.o `test -f 'node.cc' || echo '$(srcdir)/'`node.cc

elvexdebug-node.obj: node.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-node.obj -MD -MP -MF $(DEPDIR)/elvexdebug-node.Tpo -c -o elvexdebug-node.obj `if test -f 'node.cc'; then $(CYGPATH_W) 'node.cc'; else $(CYGPATH_W) '$(srcdir)/node.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-node.Tpo $(DEPDIR)/elvexdebug-node.Po
#	$(AM_V_CXX)source='node.cc' object='elvexdebug-node.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-node.obj `if test -f 'node.cc'; then $(CYGPATH_W) 'node.cc'; else $(CYGPATH_W) '$(srcdir)/node.cc'; fi`

elvexdebug-parser.o: parser.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-parser.o -MD -MP -MF $(DEPDIR)/elvexdebug-parser.Tpo -c -o elvexdebug-parser.o `test -f 'parser.cc' || echo '$(srcdir)/'`parser.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-parser.Tpo $(DEPDIR)/elvexdebug-parser.Po
#	$(AM_V_CXX)source='parser.cc' object='elvexdebug-parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-parser.o `test -f 'parser.cc' || echo '$(srcdir)/'`parser.cc

elvexdebug-parser.obj: parser.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-parser.obj -MD -MP -MF $(DEPDIR)/elvexdebug-parser.Tpo -c -o elvexdebug-parser.obj `if test -f 'parser.cc'; then $(CYGPATH_W) 'parser.cc'; else $(CYGPATH_W) '$(srcdir)/parser.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-parser.Tpo $(DEPDIR)/elvexdebug-parser.Po
#	$(AM_V_CXX)source='parser.cc' object='elvexdebug-parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-parser.obj `if test -f 'parser.cc'; then $(CYGPATH_W) 'parser.cc'; else $(CYGPATH_W) '$(srcdir)/parser.cc'; fi`

elvexdebug-rule.o: rule.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-rule.o -MD -MP -MF $(DEPDIR)/elvexdebug-rule.Tpo -c -o elvexdebug-rule.o `test -f 'rule.cc' || echo '$(srcdir)/'`rule.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-rule.Tpo $(DEPDIR)/elvexdebug-rule.Po
#	$(AM_V_CXX)source='rule.cc' object='elvexdebug-rule.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-rule.o `test -f 'rule.cc' || echo '$(srcdir)/'`rule.cc

elvexdebug-rule.obj: rule.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-rule.obj -MD -MP -MF $(DEPDIR)/elvexdebug-rule.Tpo -c -o elvexdebug-rule.obj `if test -f 'rule.cc'; then $(CYGPATH_W) 'rule.cc'; else $(CYGPATH_W) '$(srcdir)/rule.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-rule.Tpo $(DEPDIR)/elvexdebug-rule.Po
#	$(AM_V_CXX)source='rule.cc' object='elvexdebug-rule.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-rule.obj `if test -f 'rule.cc'; then $(CYGPATH_W) 'rule.cc'; else $(CYGPATH_W) '$(srcdir)/rule.cc'; fi`

elvexdebug-serializable.o: serializable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-serializable.o -MD -MP -MF $(DEPDIR)/elvexdebug-serializable.Tpo -c -o elvexdebug-serializable.o `test -f 'serializable.cc' || echo '$(srcdir)/'`serializable.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-serializable.Tpo $(DEPDIR)/elvexdebug-serializable.Po
#	$(AM_V_CXX)source='serializable.cc' object='elvexdebug-serializable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-serializable.o `test -f 'serializable.cc' || echo '$(srcdir)/'`serializable.cc

elvexdebug-serializable.obj: serializable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-serializable.obj -MD -MP -MF $(DEPDIR)/elvexdebug-serializable.Tpo -c -o elvexdebug-serializable.obj `if test -f 'serializable.cc'; then $(CYGPATH_W) 'serializable.cc'; else $(CYGPATH_W) '$(srcdir)/serializable.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-serializable.Tpo $(DEPDIR)/elvexdebug-serializable.Po
#	$(AM_V_CXX)source='serializable.cc' object='elvexdebug-serializable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-serializable.obj `if test -f 'serializable.cc'; then $(CYGPATH_W) 'serializable.cc'; else $(CYGPATH_W) '$(srcdir)/serializable.cc'; fi`

elvexdebug-statement.o: statement.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-statement.o -MD -MP -MF $(DEPDIR)/elvexdebug-statement.Tpo -c -o elvexdebug-statement.o `test -f 'statement.cc' || echo '$(srcdir)/'`statement.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-statement.Tpo $(DEPDIR)/elvexdebug-statement.Po
#	$(AM_V_CXX)source='statement.cc' object='elvexdebug-statement.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-statement.o `test -f 'statement.cc' || echo '$(srcdir)/'`statement.cc

elvexdebug-statement.obj: statement.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-statement.obj -MD -MP -MF $(DEPDIR)/elvexdebug-statement.Tpo -c -o elvexdebug-statement.obj `if test -f 'statement.cc'; then $(CYGPATH_W) 'statement.cc'; else $(CYGPATH_W) '$(srcdir)/statement.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-statement.Tpo $(DEPDIR)/elvexdebug-statement.Po
#	$(AM_V_CXX)source='statement.cc' object='elvexdebug-statement.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-statement.obj `if test -f 'statement.cc'; then $(CYGPATH_W) 'statement.cc'; else $(CYGPATH_W) '$(srcdir)/statement.cc'; fi`

elvexdebug-statements.o: statements.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-statements.o -MD -MP -MF $(DEPDIR)/elvexdebug-statements.Tpo -c -o elvexdebug-statements.o `test -f 'statements.cc' || echo '$(srcdir)/'`statements.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-statements.Tpo $(DEPDIR)/elvexdebug-statements.Po
#	$(AM_V_CXX)source='statements.cc' object='elvexdebug-statements.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-statements.o `test -f 'statements.cc' || echo '$(srcdir)/'`statements.cc

elvexdebug-statements.obj: statements.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-statements.obj -MD -MP -MF $(DEPDIR)/elvexdebug-statements.Tpo -c -o elvexdebug-statements.obj `if test -f 'statements.cc'; then $(CYGPATH_W) 'statements.cc'; else $(CYGPATH_W) '$(srcdir)/statements.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-statements.Tpo $(DEPDIR)/elvexdebug-statements.Po
#	$(AM_V_CXX)source='statements.cc' object='elvexdebug-statements.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-statements.obj `if test -f 'statements.cc'; then $(CYGPATH_W) 'statements.cc'; else $(CYGPATH_W) '$(srcdir)/statements.cc'; fi`

elvexdebug-synthesizer.o: synthesizer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-synthesizer.o -MD -MP -MF $(DEPDIR)/elvexdebug-synthesizer.Tpo -c -o elvexdebug-synthesizer.o `test -f 'synthesizer.cc' || echo '$(srcdir)/'`synthesizer.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-synthesizer.Tpo $(DEPDIR)/elvexdebug-synthesizer.Po
#	$(AM_V_CXX)source='synthesizer.cc' object='elvexdebug-synthesizer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-synthesizer.o `test -f 'synthesizer.cc' || echo '$(srcdir)/'`synthesizer.cc

elvexdebug-synthesizer.obj: synthesizer.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-synthesizer.obj -MD -MP -MF $(DEPDIR)/elvexdebug-synthesizer.Tpo -c -o elvexdebug-synthesizer.obj `if test -f 'synthesizer.cc'; then $(CYGPATH_W) 'synthesizer.cc'; else $(CYGPATH_W) '$(srcdir)/synthesizer.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-synthesizer.Tpo $(DEPDIR)/elvexdebug-synthesizer.Po
#	$(AM_V_CXX)source='synthesizer.cc' object='elvexdebug-synthesizer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-synthesizer.obj `if test -f 'synthesizer.cc'; then $(CYGPATH_W) 'synthesizer.cc'; else $(CYGPATH_W) '$(srcdir)/synthesizer.cc'; fi`

elvexdebug-term.o: term.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-term.o -MD -MP -MF $(DEPDIR)/elvexdebug-term.Tpo -c -o elvexdebug-term.o `test -f 'term.cc' || echo '$(srcdir)/'`term.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-term.Tpo $(DEPDIR)/elvexdebug-term.Po
#	$(AM_V_CXX)source='term.cc' object='elvexdebug-term.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-term.o `test -f 'term.cc' || echo '$(srcdir)/'`term.cc

elvexdebug-term.obj: term.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-term.obj -MD -MP -MF $(DEPDIR)/elvexdebug-term.Tpo -c -o elvexdebug-term.obj `if test -f 'term.cc'; then $(CYGPATH_W) 'term.cc'; else $(CYGPATH_W) '$(srcdir)/term.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-term.Tpo $(DEPDIR)/elvexdebug-term.Po
#	$(AM_V_CXX)source='term.cc' object='elvexdebug-term.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-term.obj `if test -f 'term.cc'; then $(CYGPATH_W) 'term.cc'; else $(CYGPATH_W) '$(srcdir)/term.cc'; fi`

elvexdebug-terms.o: terms.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-terms.o -MD -MP -MF $(DEPDIR)/elvexdebug-terms.Tpo -c -o elvexdebug-terms.o `test -f 'terms.cc' || echo '$(srcdir)/'`terms.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-terms.Tpo $(DEPDIR)/elvexdebug-terms.Po
#	$(AM_V_CXX)source='terms.cc' object='elvexdebug-terms.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-terms.o `test -f 'terms.cc' || echo '$(srcdir)/'`terms.cc

elvexdebug-terms.obj: terms.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-terms.obj -MD -MP -MF $(DEPDIR)/elvexdebug-terms.Tpo -c -o elvexdebug-terms.obj `if test -f 'terms.cc'; then $(CYGPATH_W) 'terms.cc'; else $(CYGPATH_W) '$(srcdir)/terms.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-terms.Tpo $(DEPDIR)/elvexdebug-terms.Po
#	$(AM_V_CXX)source='terms.cc' object='elvexdebug-terms.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-terms.obj `if test -f 'terms.cc'; then $(CYGPATH_W) 'terms.cc'; else $(CYGPATH_W) '$(srcdir)/terms.cc'; fi`

elvexdebug-value.o: value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-value.o -MD -MP -MF $(DEPDIR)/elvexdebug-value.Tpo -c -o elvexdebug-value.o `test -f 'value.cc' || echo '$(srcdir)/'`value.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-value.Tpo $(DEPDIR)/elvexdebug-value.Po
#	$(AM_V_CXX)source='value.cc' object='elvexdebug-value.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-value.o `test -f 'value.cc' || echo '$(srcdir)/'`value.cc

elvexdebug-value.obj: value.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-value.obj -MD -MP -MF $(DEPDIR)/elvexdebug-value.Tpo -c -o elvexdebug-value.obj `if test -f 'value.cc'; then $(CYGPATH_W) 'value.cc'; else $(CYGPATH_W) '$(srcdir)/value.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-value.Tpo $(DEPDIR)/elvexdebug-value.Po
#	$(AM_V_CXX)source='value.cc' object='elvexdebug-value.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-value.obj `if test -f 'value.cc'; then $(CYGPATH_W) 'value.cc'; else $(CYGPATH_W) '$(srcdir)/value.cc'; fi`

elvexdebug-variableflag.o: variableflag.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-variableflag.o -MD -MP -MF $(DEPDIR)/elvexdebug-variableflag.Tpo -c -o elvexdebug-variableflag.o `test -f 'variableflag.cc' || echo '$(srcdir)/'`variableflag.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-variableflag.Tpo $(DEPDIR)/elvexdebug-variableflag.Po
#	$(AM_V_CXX)source='variableflag.cc' object='elvexdebug-variableflag.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-variableflag.o `test -f 'variableflag.cc' || echo '$(srcdir)/'`variableflag.cc

elvexdebug-variableflag.obj: variableflag.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-variableflag.obj -MD -MP -MF $(DEPDIR)/elvexdebug-variableflag.Tpo -c -o elvexdebug-variableflag.obj `if test -f 'variableflag.cc'; then $(CYGPATH_W) 'variableflag.cc'; else $(CYGPATH_W) '$(srcdir)/variableflag.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-variableflag.Tpo $(DEPDIR)/elvexdebug-variableflag.Po
#	$(AM_V_CXX)source='variableflag.cc' object='elvexdebug-variableflag.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-variableflag.obj `if test -f 'variableflag.cc'; then $(CYGPATH_W) 'variableflag.cc'; else $(CYGPATH_W) '$(srcdir)/variableflag.cc'; fi`

elvexdebug-vartable.o: vartable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-vartable.o -MD -MP -MF $(DEPDIR)/elvexdebug-vartable.Tpo -c -o elvexdebug-vartable.o `test -f 'vartable.cc' || echo '$(srcdir)/'`vartable.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-vartable.Tpo $(DEPDIR)/elvexdebug-vartable.Po
#	$(AM_V_CXX)source='vartable.cc' object='elvexdebug-vartable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-vartable.o `test -f 'vartable.cc' || echo '$(srcdir)/'`vartable.cc

elvexdebug-vartable.obj: vartable.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -MT elvexdebug-vartable.obj -MD -MP -MF $(DEPDIR)/elvexdebug-vartable.Tpo -c -o elvexdebug-vartable.obj `if test -f 'vartable.cc'; then $(CYGPATH_W) 'vartable.cc'; else $(CYGPATH_W) '$(srcdir)/vartable.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/elvexdebug-vartable.Tpo $(DEPDIR)/elvexdebug-vartable.Po
#	$(AM_V_CXX)source='vartable.cc' object='elvexdebug-vartable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(elvexdebug_CXXFLAGS) $(CXXFLAGS) -c -o elvexdebug-vartable.obj `if test -f 'vartable.cc'; then $(CYGPATH_W) 'vartable.cc'; else $(CYGPATH_W) '$(srcdir)/vartable.cc'; fi`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
		-rm -f ./$(DEPDIR)/elvex-bitset.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon-buffer.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon-fsa.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon-info.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon-tree.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon.Po
	-rm -f ./$(DEPDIR)/elvex-entries.Po
	-rm -f ./$(DEPDIR)/elvex-entry.Po
	-rm -f ./$(DEPDIR)/elvex-environment.Po
	-rm -f ./$(DEPDIR)/elvex-feature.Po
	-rm -f ./$(DEPDIR)/elvex-features.Po
	-rm -f ./$(DEPDIR)/elvex-flags.Po
	-rm -f ./$(DEPDIR)/elvex-forest.Po
	-rm -f ./$(DEPDIR)/elvex-forestidentifier.Po
	-rm -f ./$(DEPDIR)/elvex-forestmap.Po
	-rm -f ./$(DEPDIR)/elvex-grammar.Po
	-rm -f ./$(DEPDIR)/elvex-id.Po
	-rm -f ./$(DEPDIR)/elvex-item.Po
	-rm -f ./$(DEPDIR)/elvex-itemset.Po
	-rm -f ./$(DEPDIR)/elvex-lexicon.Po
	-rm -f ./$(DEPDIR)/elvex-list.Po
	-rm -f ./$(DEPDIR)/elvex-listfeatures.Po
	-rm -f ./$(DEPDIR)/elvex-main.Po
	-rm -f ./$(DEPDIR)/elvex-memoization-map.Po
	-rm -f ./$(DEPDIR)/elvex-memoization-value.Po
	-rm -f ./$(DEPDIR)/elvex-node.Po
	-rm -f ./$(DEPDIR)/elvex-parser.Po
	-rm -f ./$(DEPDIR)/elvex-rule.Po
	-rm -f ./$(DEPDIR)/elvex-ruleslex.Po
	-rm -f ./$(DEPDIR)/elvex-rulesyacc.Po
	-rm -f ./$(DEPDIR)/elvex-serializable.Po
	-rm -f ./$(DEPDIR)/elvex-statement.Po
	-rm -f ./$(DEPDIR)/elvex-statements.Po
	-rm -f ./$(DEPDIR)/elvex-synthesizer.Po
	-rm -f ./$(DEPDIR)/elvex-term.Po
	-rm -f ./$(DEPDIR)/elvex-terms.Po
	-rm -f ./$(DEPDIR)/elvex-value.Po
	-rm -f ./$(DEPDIR)/elvex-variableflag.Po
	-rm -f ./$(DEPDIR)/elvex-vartable.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-bitset.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-buildlexicon.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-entries.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-entry.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-environment.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-feature.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-features.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-flags.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-forest.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-forestidentifier.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-forestmap.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-grammar.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-id.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-item.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-itemset.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-lexicon.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-list.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-listfeatures.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-node.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-parser.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-rule.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-ruleslex.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-rulesyacc.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-serializable.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-statement.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-statements.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-synthesizer.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-term.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-terms.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-value.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-variableflag.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-vartable.Po
	-rm -f ./$(DEPDIR)/elvexdebug-bitset.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon-buffer.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon-fsa.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon-info.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon-tree.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon.Po
	-rm -f ./$(DEPDIR)/elvexdebug-entries.Po
	-rm -f ./$(DEPDIR)/elvexdebug-entry.Po
	-rm -f ./$(DEPDIR)/elvexdebug-environment.Po
	-rm -f ./$(DEPDIR)/elvexdebug-feature.Po
	-rm -f ./$(DEPDIR)/elvexdebug-features.Po
	-rm -f ./$(DEPDIR)/elvexdebug-flags.Po
	-rm -f ./$(DEPDIR)/elvexdebug-forest.Po
	-rm -f ./$(DEPDIR)/elvexdebug-forestidentifier.Po
	-rm -f ./$(DEPDIR)/elvexdebug-forestmap.Po
	-rm -f ./$(DEPDIR)/elvexdebug-grammar.Po
	-rm -f ./$(DEPDIR)/elvexdebug-id.Po
	-rm -f ./$(DEPDIR)/elvexdebug-item.Po
	-rm -f ./$(DEPDIR)/elvexdebug-itemset.Po
	-rm -f ./$(DEPDIR)/elvexdebug-lexicon.Po
	-rm -f ./$(DEPDIR)/elvexdebug-list.Po
	-rm -f ./$(DEPDIR)/elvexdebug-listfeatures.Po
	-rm -f ./$(DEPDIR)/elvexdebug-main.Po
	-rm -f ./$(DEPDIR)/elvexdebug-memoization-map.Po
	-rm -f ./$(DEPDIR)/elvexdebug-memoization-value.Po
	-rm -f ./$(DEPDIR)/elvexdebug-node.Po
	-rm -f ./$(DEPDIR)/elvexdebug-parser.Po
	-rm -f ./$(DEPDIR)/elvexdebug-rule.Po
	-rm -f ./$(DEPDIR)/elvexdebug-ruleslex.Po
	-rm -f ./$(DEPDIR)/elvexdebug-rulesyacc.Po
	-rm -f ./$(DEPDIR)/elvexdebug-serializable.Po
	-rm -f ./$(DEPDIR)/elvexdebug-statement.Po
	-rm -f ./$(DEPDIR)/elvexdebug-statements.Po
	-rm -f ./$(DEPDIR)/elvexdebug-synthesizer.Po
	-rm -f ./$(DEPDIR)/elvexdebug-term.Po
	-rm -f ./$(DEPDIR)/elvexdebug-terms.Po
	-rm -f ./$(DEPDIR)/elvexdebug-value.Po
	-rm -f ./$(DEPDIR)/elvexdebug-variableflag.Po
	-rm -f ./$(DEPDIR)/elvexdebug-vartable.Po
	-rm -f ./$(DEPDIR)/postedition_en.Po
	-rm -f ./$(DEPDIR)/postedition_fr.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f ./$(DEPDIR)/elvex-bitset.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon-buffer.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon-fsa.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon-info.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon-tree.Po
	-rm -f ./$(DEPDIR)/elvex-compact-lexicon.Po
	-rm -f ./$(DEPDIR)/elvex-entries.Po
	-rm -f ./$(DEPDIR)/elvex-entry.Po
	-rm -f ./$(DEPDIR)/elvex-environment.Po
	-rm -f ./$(DEPDIR)/elvex-feature.Po
	-rm -f ./$(DEPDIR)/elvex-features.Po
	-rm -f ./$(DEPDIR)/elvex-flags.Po
	-rm -f ./$(DEPDIR)/elvex-forest.Po
	-rm -f ./$(DEPDIR)/elvex-forestidentifier.Po
	-rm -f ./$(DEPDIR)/elvex-forestmap.Po
	-rm -f ./$(DEPDIR)/elvex-grammar.Po
	-rm -f ./$(DEPDIR)/elvex-id.Po
	-rm -f ./$(DEPDIR)/elvex-item.Po
	-rm -f ./$(DEPDIR)/elvex-itemset.Po
	-rm -f ./$(DEPDIR)/elvex-lexicon.Po
	-rm -f ./$(DEPDIR)/elvex-list.Po
	-rm -f ./$(DEPDIR)/elvex-listfeatures.Po
	-rm -f ./$(DEPDIR)/elvex-main.Po
	-rm -f ./$(DEPDIR)/elvex-memoization-map.Po
	-rm -f ./$(DEPDIR)/elvex-memoization-value.Po
	-rm -f ./$(DEPDIR)/elvex-node.Po
	-rm -f ./$(DEPDIR)/elvex-parser.Po
	-rm -f ./$(DEPDIR)/elvex-rule.Po
	-rm -f ./$(DEPDIR)/elvex-ruleslex.Po
	-rm -f ./$(DEPDIR)/elvex-rulesyacc.Po
	-rm -f ./$(DEPDIR)/elvex-serializable.Po
	-rm -f ./$(DEPDIR)/elvex-statement.Po
	-rm -f ./$(DEPDIR)/elvex-statements.Po
	-rm -f ./$(DEPDIR)/elvex-synthesizer.Po
	-rm -f ./$(DEPDIR)/elvex-term.Po
	-rm -f ./$(DEPDIR)/elvex-terms.Po
	-rm -f ./$(DEPDIR)/elvex-value.Po
	-rm -f ./$(DEPDIR)/elvex-variableflag.Po
	-rm -f ./$(DEPDIR)/elvex-vartable.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-bitset.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-buildlexicon.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-buffer.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-fsa.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-info.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon-tree.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-compact-lexicon.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-entries.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-entry.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-environment.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-feature.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-features.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-flags.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-forest.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-forestidentifier.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-forestmap.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-grammar.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-id.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-item.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-itemset.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-lexicon.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-list.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-listfeatures.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-node.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-parser.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-rule.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-ruleslex.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-rulesyacc.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-serializable.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-statement.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-statements.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-synthesizer.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-term.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-terms.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-value.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-variableflag.Po
	-rm -f ./$(DEPDIR)/elvexbuildlexicon-vartable.Po
	-rm -f ./$(DEPDIR)/elvexdebug-bitset.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon-buffer.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon-fsa.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon-info.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon-tree.Po
	-rm -f ./$(DEPDIR)/elvexdebug-compact-lexicon.Po
	-rm -f ./$(DEPDIR)/elvexdebug-entries.Po
	-rm -f ./$(DEPDIR)/elvexdebug-entry.Po
	-rm -f ./$(DEPDIR)/elvexdebug-environment.Po
	-rm -f ./$(DEPDIR)/elvexdebug-feature.Po
	-rm -f ./$(DEPDIR)/elvexdebug-features.Po
	-rm -f ./$(DEPDIR)/elvexdebug-flags.Po
	-rm -f ./$(DEPDIR)/elvexdebug-forest.Po
	-rm -f ./$(DEPDIR)/elvexdebug-forestidentifier.Po
	-rm -f ./$(DEPDIR)/elvexdebug-forestmap.Po
	-rm -f ./$(DEPDIR)/elvexdebug-grammar.Po
	-rm -f ./$(DEPDIR)/elvexdebug-id.Po
	-rm -f ./$(DEPDIR)/elvexdebug-item.Po
	-rm -f ./$(DEPDIR)/elvexdebug-itemset.Po
	-rm -f ./$(DEPDIR)/elvexdebug-lexicon.Po
	-rm -f ./$(DEPDIR)/elvexdebug-list.Po
	-rm -f ./$(DEPDIR)/elvexdebug-listfeatures.Po
	-rm -f ./$(DEPDIR)/elvexdebug-main.Po
	-rm -f ./$(DEPDIR)/elvexdebug-memoization-map.Po
	-rm -f ./$(DEPDIR)/elvexdebug-memoization-value.Po
	-rm -f ./$(DEPDIR)/elvexdebug-node.Po
	-rm -f ./$(DEPDIR)/elvexdebug-parser.Po
	-rm -f ./$(DEPDIR)/elvexdebug-rule.Po
	-rm -f ./$(DEPDIR)/elvexdebug-ruleslex.Po
	-rm -f ./$(DEPDIR)/elvexdebug-rulesyacc.Po
	-rm -f ./$(DEPDIR)/elvexdebug-serializable.Po
	-rm -f ./$(DEPDIR)/elvexdebug-statement.Po
	-rm -f ./$(DEPDIR)/elvexdebug-statements.Po
	-rm -f ./$(DEPDIR)/elvexdebug-synthesizer.Po
	-rm -f ./$(DEPDIR)/elvexdebug-term.Po
	-rm -f ./$(DEPDIR)/elvexdebug-terms.Po
	-rm -f ./$(DEPDIR)/elvexdebug-value.Po
	-rm -f ./$(DEPDIR)/elvexdebug-variableflag.Po
	-rm -f ./$(DEPDIR)/elvexdebug-vartable.Po
	-rm -f ./$(DEPDIR)/postedition_en.Po
	-rm -f ./$(DEPDIR)/postedition_fr.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: all check install install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-am clean \
	clean-binPROGRAMS clean-generic cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic distclean-tags \
	distdir dvi dvi-am html html-am info info-am install \
	install-am install-binPROGRAMS install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
	ps ps-am tags tags-am uninstall uninstall-am \
	uninstall-binPROGRAMS

.PRECIOUS: Makefile


$(elvex_OBJECTS): Makefile
$(elvexdebug_OBJECTS): Makefile
$(elvexbuildlexicon_OBJECTS): Makefile
$(elvexpostedition_OBJECTS): Makefile
$(elvexpostedition_fr_OBJECTS): Makefile
$(elvexpostedition_en_OBJECTS): Makefile

%.cc: %.yy
	$(YACC) $(YFLAGS) -p rules -o $@ $<

%.cc: %.ll
	$(LEX) $(LFLAGS) -Prules -o $@ $<

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
