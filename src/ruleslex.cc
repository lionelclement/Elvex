#line 1 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

#line 3 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer rules_create_buffer
#define yy_delete_buffer rules_delete_buffer
#define yy_scan_buffer rules_scan_buffer
#define yy_scan_string rules_scan_string
#define yy_scan_bytes rules_scan_bytes
#define yy_init_buffer rules_init_buffer
#define yy_flush_buffer rules_flush_buffer
#define yy_load_buffer_state rules_load_buffer_state
#define yy_switch_to_buffer rules_switch_to_buffer
#define yypush_buffer_state rulespush_buffer_state
#define yypop_buffer_state rulespop_buffer_state
#define yyensure_buffer_stack rulesensure_buffer_stack
#define yy_flex_debug rules_flex_debug
#define yyin rulesin
#define yyleng rulesleng
#define yylex ruleslex
#define yylineno ruleslineno
#define yyout rulesout
#define yyrestart rulesrestart
#define yytext rulestext
#define yywrap ruleswrap
#define yyalloc rulesalloc
#define yyrealloc rulesrealloc
#define yyfree rulesfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define rules_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer rules_create_buffer
#endif

#ifdef yy_delete_buffer
#define rules_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer rules_delete_buffer
#endif

#ifdef yy_scan_buffer
#define rules_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer rules_scan_buffer
#endif

#ifdef yy_scan_string
#define rules_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string rules_scan_string
#endif

#ifdef yy_scan_bytes
#define rules_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes rules_scan_bytes
#endif

#ifdef yy_init_buffer
#define rules_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer rules_init_buffer
#endif

#ifdef yy_flush_buffer
#define rules_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer rules_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define rules_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state rules_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define rules_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer rules_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define rulespush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state rulespush_buffer_state
#endif

#ifdef yypop_buffer_state
#define rulespop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state rulespop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define rulesensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack rulesensure_buffer_stack
#endif

#ifdef yylex
#define ruleslex_ALREADY_DEFINED
#else
#define yylex ruleslex
#endif

#ifdef yyrestart
#define rulesrestart_ALREADY_DEFINED
#else
#define yyrestart rulesrestart
#endif

#ifdef yylex_init
#define ruleslex_init_ALREADY_DEFINED
#else
#define yylex_init ruleslex_init
#endif

#ifdef yylex_init_extra
#define ruleslex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra ruleslex_init_extra
#endif

#ifdef yylex_destroy
#define ruleslex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy ruleslex_destroy
#endif

#ifdef yyget_debug
#define rulesget_debug_ALREADY_DEFINED
#else
#define yyget_debug rulesget_debug
#endif

#ifdef yyset_debug
#define rulesset_debug_ALREADY_DEFINED
#else
#define yyset_debug rulesset_debug
#endif

#ifdef yyget_extra
#define rulesget_extra_ALREADY_DEFINED
#else
#define yyget_extra rulesget_extra
#endif

#ifdef yyset_extra
#define rulesset_extra_ALREADY_DEFINED
#else
#define yyset_extra rulesset_extra
#endif

#ifdef yyget_in
#define rulesget_in_ALREADY_DEFINED
#else
#define yyget_in rulesget_in
#endif

#ifdef yyset_in
#define rulesset_in_ALREADY_DEFINED
#else
#define yyset_in rulesset_in
#endif

#ifdef yyget_out
#define rulesget_out_ALREADY_DEFINED
#else
#define yyget_out rulesget_out
#endif

#ifdef yyset_out
#define rulesset_out_ALREADY_DEFINED
#else
#define yyset_out rulesset_out
#endif

#ifdef yyget_leng
#define rulesget_leng_ALREADY_DEFINED
#else
#define yyget_leng rulesget_leng
#endif

#ifdef yyget_text
#define rulesget_text_ALREADY_DEFINED
#else
#define yyget_text rulesget_text
#endif

#ifdef yyget_lineno
#define rulesget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno rulesget_lineno
#endif

#ifdef yyset_lineno
#define rulesset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno rulesset_lineno
#endif

#ifdef yywrap
#define ruleswrap_ALREADY_DEFINED
#else
#define yywrap ruleswrap
#endif

#ifdef yyalloc
#define rulesalloc_ALREADY_DEFINED
#else
#define yyalloc rulesalloc
#endif

#ifdef yyrealloc
#define rulesrealloc_ALREADY_DEFINED
#else
#define yyrealloc rulesrealloc
#endif

#ifdef yyfree
#define rulesfree_ALREADY_DEFINED
#else
#define yyfree rulesfree
#endif

#ifdef yytext
#define rulestext_ALREADY_DEFINED
#else
#define yytext rulestext
#endif

#ifdef yyleng
#define rulesleng_ALREADY_DEFINED
#else
#define yyleng rulesleng
#endif

#ifdef yyin
#define rulesin_ALREADY_DEFINED
#else
#define yyin rulesin
#endif

#ifdef yyout
#define rulesout_ALREADY_DEFINED
#else
#define yyout rulesout
#endif

#ifdef yy_flex_debug
#define rules_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug rules_flex_debug
#endif

#ifdef yylineno
#define ruleslineno_ALREADY_DEFINED
#else
#define yylineno ruleslineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ruleswrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[613] =
    {   0,
        9,    9,   85,   83,   84,   81,   83,   84,   82,   84,
       60,   83,   84,   83,   84,   31,   63,   83,   84,   83,
       84,   66,   83,   84,   83,   84,   21,   83,   84,   22,
       83,   84,   39,   83,   84,   37,   64,   83,   84,   62,
       83,   84,   38,   65,   83,   84,   30,   83,   84,   40,
       83,   84,   78,   83,   84,   78,   83,   84,   29,   83,
       84,   27,   83,   84,   17,   83,   84,   35,   83,   84,
       18,   83,   84,   41,   83,   84,   75,   83,   84,   75,
       83,   84,   75,   83,   84,   75,   83,   84,   75,   83,
       84,   75,   83,   84,   32,   75,   83,   84,   23,   83,

       84,   24,   83,   84,   77,   83,   84,   75,   83,   84,
       75,   83,   84,   75,   83,   84,   75,   83,   84,   75,
       83,   84,   75,   83,   84,   75,   83,   84,   75,   83,
       84,   75,   83,   84,   32,   75,   83,   84,   25,   83,
       84,   55,   83,   84,   26,   83,   84,   83,   84,   83,
       84,   83,   84,   83,   84,   83,   84,   81,   83,   84,
       60,   83,   84,   83,   84,   31,   63,   83,   84,   83,
       84,   66,   83,   84,   83,   84,   21,   83,   84,   22,
       83,   84,   39,   83,   84,   37,   64,   83,   84,   62,
       83,   84,   38,   65,   83,   84,   30,   83,   84,   40,

       83,   84,   78,   83,   84,   78,   83,   84,   29,   83,
       84,   27,   83,   84,   17,   83,   84,   35,   83,   84,
       18,   83,   84,   41,   83,   84,   75,   83,   84,   75,
       83,   84,   75,   83,   84,   75,   83,   84,   75,   83,
       84,   75,   83,   84,   32,   75,   83,   84,   23,   83,
       84,   24,   83,   84,   77,   83,   84,   75,   83,   84,
       75,   83,   84,   75,   83,   84,   75,   83,   84,   75,
       83,   84,   75,   83,   84,   75,   83,   84,   75,   83,
       84,   75,   83,   84,   32,   75,   83,   84,   25,   83,
       84,   55,   83,   84,   26,   83,   84,   83,   84,   83,

       84,   83,   84,   83,   84,   10,   84,    9,   84,   11,
       84,    7,   84,    5,   84,    7,   84,    7,   84,   81,
       36,   80,   76,   76,   57,   12,    3,   78,   28,   33,
       19,   34,   58,   20,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   79,   75,   79,
       75,   75,   47,   75,   54,   75,   75,   75,   75,   56,
       60,   75,   75,    1,   81,   36,   80,   76,   76,   57,
       12,    3,   78,   28,   33,   19,   34,   58,   20,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   79,   75,   79,   75,   75,   47,   75,   54,

       75,   75,   75,   75,   56,   60,   75,   75,   10,    9,
        6,    4,   80,   76,   76,   76,   76,    2,   59,   75,
       75,   75,   72,   75,   75,   75,   75,   75,   75,   79,
       79,   75,   75,   75,   79,   75,   75,   75,   75,   75,
       13,   15,   14,   16,   61,   32,   19,   80,   76,   76,
       76,   76,    1,    2,   59,   75,   75,   75,   72,   75,
       75,   75,   75,   75,   75,   79,   79,   75,   75,   75,
       79,   75,   75,   75,   75,   75,   13,   15,   14,   16,
       61,   32,   19,   75,   69,   75,   75,   67,   75,   70,
       75,   75,   75,   75,   79,   79,   79,   75,   79,   75,

       79,   48,   75,   75,   75,   52,   75,   75,   75,   69,
       75,   75,   67,   75,   70,   75,   75,   75,   75,   79,
       79,   79,   75,   79,   75,   79,   48,   75,   75,   75,
       52,   75,   75,   71,   75,   68,   75,   75,   75,   75,
       79,   79,   79,   75,   79,   75,   49,   75,   75,   71,
       75,   68,   75,   75,   75,   75,   79,   79,   79,   75,
       79,   75,   49,   75,   75,   42,   43,   45,   75,   75,
       46,   75,   79,   75,   75,   51,   75,   42,   43,   45,
       75,   75,   46,   75,   79,   75,   75,   51,   75,   75,
       75,   53,   75,   50,   75,   75,   75,   53,   75,   50,

       75,   44,   74,   75,   73,   75,    8,   44,   74,   75,
       73,   75
    } ;

static const flex_int16_t yy_accept[457] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    4,    6,    9,
       11,   14,   16,   20,   22,   25,   27,   30,   33,   36,
       40,   43,   47,   50,   53,   56,   59,   62,   65,   68,
       71,   74,   77,   80,   83,   86,   89,   92,   95,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  139,  142,  145,  148,  150,  152,  154,  156,
      158,  161,  164,  166,  170,  172,  175,  177,  180,  183,
      186,  190,  193,  197,  200,  203,  206,  209,  212,  215,
      218,  221,  224,  227,  230,  233,  236,  239,  242,  245,
      249,  252,  255,  258,  261,  264,  267,  270,  273,  276,

      279,  282,  285,  289,  292,  295,  298,  300,  302,  304,
      306,  308,  310,  312,  314,  316,  318,  320,  321,  322,
      322,  323,  323,  324,  324,  325,  325,  325,  326,  327,
      328,  328,  329,  330,  331,  332,  333,  334,  335,  335,
      335,  335,  335,  336,  337,  337,  337,  338,  339,  340,
      341,  342,  343,  344,  345,  346,  346,  346,  347,  347,
      349,  351,  352,  353,  355,  357,  358,  359,  360,  361,
      362,  363,  364,  364,  364,  364,  364,  364,  364,  365,
      366,  367,  367,  368,  368,  368,  369,  369,  370,  370,
      370,  371,  372,  373,  373,  374,  375,  376,  377,  378,

      379,  380,  380,  380,  380,  380,  381,  382,  382,  382,
      383,  384,  385,  386,  387,  388,  389,  390,  391,  391,
      391,  392,  392,  394,  396,  397,  398,  400,  402,  403,
      404,  405,  406,  407,  408,  409,  409,  409,  409,  409,
      409,  410,  411,  412,  413,  414,  415,  416,  416,  416,
      417,  418,  418,  418,  418,  419,  420,  420,  420,  420,
      420,  421,  422,  423,  425,  426,  427,  428,  429,  430,
      431,  432,  432,  433,  434,  436,  437,  438,  439,  440,
      441,  442,  443,  444,  445,  446,  447,  448,  449,  449,
      450,  451,  451,  451,  452,  453,  453,  453,  453,  455,

      456,  456,  456,  456,  456,  457,  458,  459,  461,  462,
      463,  464,  465,  466,  467,  468,  468,  469,  470,  472,
      473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
      483,  484,  484,  484,  484,  484,  485,  487,  488,  490,
      492,  493,  494,  495,  495,  496,  497,  498,  498,  500,
      502,  504,  505,  506,  508,  509,  509,  509,  509,  509,
      509,  510,  512,  513,  515,  517,  518,  519,  520,  520,
      521,  522,  523,  523,  525,  527,  529,  530,  531,  533,
      534,  534,  534,  534,  534,  536,  538,  539,  540,  541,
      542,  543,  544,  546,  547,  549,  550,  550,  550,  550,

      550,  550,  552,  554,  555,  556,  557,  558,  559,  560,
      562,  563,  565,  566,  567,  567,  568,  569,  570,  571,
      573,  574,  575,  576,  578,  578,  579,  579,  580,  581,
      582,  583,  585,  586,  587,  588,  590,  590,  591,  592,
      594,  596,  596,  596,  597,  598,  600,  602,  603,  605,
      607,  608,  609,  611,  613,  613
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,    1,   26,   27,   28,   28,   29,   30,   31,
       28,   28,   32,   28,   28,   33,   34,   35,   36,   37,
       28,   38,   39,   40,   41,   28,   28,   28,   28,   28,
       42,   43,   44,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   47,   52,   53,   47,   47,   54,   47,   55,
       56,   57,   47,   58,   59,   60,   61,   47,   47,   62,
       47,   47,   63,   64,   65,    1,    1,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
        1,   89,   90,   91,   92,   93,   94,    1,   95,   96,
       97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
      117,  118,    1,  119,  120,  121,  122,  123,  124,    1,
      125,    1,    1,  126,  127,    1,  128,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,  129,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[130] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[470] =
    {   0,
        0,  129,  257,  259,  260,  261, 1238, 3282,  263, 3282,
     1213,  260, 3282,  277, 3282, 1226, 3282, 3282, 3282, 3282,
     3282, 1210, 3282,  257, 3282,  249, 1213, 3282,  248,  252,
     1209,  227,  387,  255, 1202, 1199, 1192, 1191,    0, 3282,
     3282,  497, 1168,    0,  270, 1173, 1170,  237, 1167, 1178,
     1173,    0, 3282, 1158, 3282, 1113,  560, 1101,  221, 1216,
      296,  316,  338,  298,  683, 1215,  339, 1214, 1213, 1212,
     1211, 1210,  318, 1209,  342, 1208,  343,  299, 1207,  344,
      345,  347,  397,  793,  325, 1179, 1176, 1169, 1168,    0,
     1202, 1201,  903, 1143,    0,  358, 1148, 1145,  302, 1142,

     1153, 1130,    0, 1176,  388, 1175,  280, 1029,  351,  386,
        0, 1160, 3282, 3282, 3282, 1143, 1147,  354, 3282,  353,
     3282,  358, 1136, 1246,    0, 1309, 1040, 3282, 3282, 3282,
     1155,  346, 3282, 3282, 1132, 3282, 3282, 3282, 1039, 1043,
     1031, 1033,    0,    0, 1369,  971, 1056, 1050, 1053, 1053,
     1055, 1043, 1476,    0,  342, 1539,  964, 1022,  360,  380,
      446, 1022, 1022,    0,    0, 1026, 1023, 1031, 3282, 3282,
        0,    0,  299,  309,  379,  302, 1008, 1072, 3282,  383,
     1071,  461, 1070,  465,  426, 1646, 1756,    0, 1882,  373,
     1069, 1068, 1067, 1066,  453, 1065, 1064,  387, 1063, 1062,

     1061,  451,  428,  408,  481,    0,    0, 1942,  471, 1030,
     1024, 1027, 1027, 1029, 1017, 2049,    0,  444, 2112,  476,
      997,  483,  463,  470,  997,  997,    0,    0, 1001,  998,
     1006, 1048, 1047,    0,    0,  485,  488,  502,  491,  492,
        0, 1047, 3282, 3282,  534, 2219,    0, 2282,  929, 2389,
        0, 2452,  928, 1043, 3282, 3282,  988,  982,  989,  996,
     2559,  374,  473, 1002,  370,  471, 2669, 1008,  459,  548,
      563,  499,  547,  565,  729,  472,  525,  555,  550,  549,
     3282, 3282, 3282, 3282, 3282, 3282, 3282,  684,  699, 2779,
        0, 2842,  496, 2949,    0, 3012,  606, 1036, 3282, 1035,

      559,  538,  696,  705,  998, 1002, 1001,    0, 1005, 1003,
     3119,  997,  978,  750,  752,  598,  675,  684,  743,  977,
      976,  970,  975,  965, 1019, 1018, 1017, 1016, 1015, 1014,
     1013,  954,  961,  963,  964,  572,  972,  666,  971,  970,
      564,  587,  564,  738,  757,  676,  745,  601,  969,  764,
      968,  739,  649,  967,  653,  763,  753,  783,  758,  767,
      975,    0,  977,    0,    0,  664,  756,  944,  778,  853,
      832,  855,  786,    0,  799,    0,  956,  941,    0,  952,
      939,  950,  938,  946,  956,  955,  491,  582,  777, 3282,
      840,  846,  848,  751,  824,  757,  854,  801,  861,  866,

      868,    0,    0,  847,  854,  933,  989,  878,  897,  869,
      943,  936,  937, 3282,  932, 3282, 3282,  848,  859,  948,
      875,  860,  851,  945,  921,  976,  889,  975,  974,  869,
      881,    0,  963,  924,  919,    0,  914,  935,  936,  907,
      890,  925,  916,  940,  941,    0,    0, 3282,  879,  878,
      905,  904,  870,  769, 3282, 3247, 3250, 3253, 3255, 3258,
      706, 3261, 3264, 3267,  496, 3270, 3272, 3275, 3278
    } ;

static const flex_int16_t yy_def[470] =
    {   0,
      455,  455,  456,  456,  457,  457,  455,  455,  455,  455,
      455,  458,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,   33,   33,   33,   33,   33,   33,  455,
      455,  455,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,  455,  455,  455,  455,  455,  455,  455,  459,
      459,  459,  460,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,   65,   84,   84,   84,   84,   84,   84,
      459,  459,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,  459,  459,  459,  459,  459,  459,  459,
      461,  455,  455,  455,  455,  455,  455,  455,  455,  458,
      455,  458,  455,  455,  123,  455,  455,  455,  455,  455,
      462,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,   33,   33,  455,  455,   33,   33,   33,   33,
       33,   33,  455,  153,  153,  455,  455,   33,  455,   33,
       33,   33,   33,   33,   33,   33,   33,   33,  455,  455,
       33,   33,  455,  455,  455,  455,  455,  459,  455,  459,
      459,  463,  459,  463,  459,   84,   84,  186,  459,  459,
      459,  459,  459,  464,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,   84,   84,  189,  459,   84,
       84,   84,   84,   84,   84,   84,  216,  216,  189,  459,
       84,  459,   84,   84,   84,   84,   84,   84,   84,   84,
       84,  459,  459,   84,   84,  459,  459,  459,  459,  459,
      465,  455,  455,  455,  466,  455,  246,  455,  455,  455,
      250,  455,  455,  467,  455,  455,  455,  455,  455,  455,
      455,  261,  261,  261,  261,  261,  455,  267,  261,  455,
      455,  455,  261,  261,  261,  261,  261,  261,  261,  261,
      455,  455,  455,  455,  455,  455,  455,  468,  459,   84,
      290,  189,  459,  290,  294,  189,  459,  469,  455,  459,

      459,  459,  459,  459,   84,   84,   84,   84,   84,   84,
       84,  311,   84,  459,  459,  459,   84,   84,   84,   84,
       84,   84,   84,   84,  459,  459,  459,  459,  459,  459,
      459,  455,  455,  455,  455,  261,  261,  261,  261,  261,
      267,  267,  261,  455,  455,  455,  455,  455,  261,  261,
      261,  261,  261,  261,  261,  459,  459,  459,  459,  459,
       84,   84,   84,   84,   84,  311,  311,   84,  459,  459,
      459,  459,  459,   84,   84,   84,   84,   84,   84,   84,
      455,  455,  455,  455,  261,  261,  267,  267,  261,  455,
      455,  455,  261,  261,  261,  261,  459,  459,  459,  459,

      459,   84,   84,  311,  311,   84,  459,  459,  459,   84,
       84,   84,   84,  455,  455,  455,  455,  267,  267,  261,
      455,  261,  261,  261,  459,  459,  459,  459,  459,  311,
      311,   84,  459,   84,   84,   84,  455,  267,  267,  261,
      261,  459,  459,  311,  311,   84,   84,  455,  267,  267,
      459,  459,  311,  311,    0,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455
    } ;

static const flex_int16_t yy_nxt[3412] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   33,   33,   33,
       34,   33,   35,   33,   36,   33,   37,   33,   33,   38,
       39,   40,    8,   41,   42,   43,   44,   44,   45,   46,
       47,   44,   48,   44,   44,   44,   49,   50,   51,   44,
       52,   44,   53,   54,   55,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,   56,   57,   58,   59,   60,
       61,   10,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   84,   84,   84,   85,
       84,   86,   84,   87,   84,   88,   84,   84,   89,   90,
       91,   60,   92,   93,   94,   95,   95,   96,   97,   98,
       95,   99,   95,   95,   95,  100,  101,  102,   95,  103,
       95,  104,  105,  106,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,  107,  108,  109,  110,  112,  113,
      112,  113,  115,  115,  118,  121,  118,  132,  132,  130,
      134,  135,  116,  116,  131,  136,  137,  117,  117,  139,
      140,  147,  179,  159,  141,  159,  142,  164,  160,  161,
      148,  165,  173,  174,  175,  176,  177,  180,  179,  180,

      179,  179,  122,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  179,  196,
      179,  124,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  181,
      179,  179,  192,  183,  179,  179,  179,  179,  191,  179,
      185,  210,  227,  179,  193,  118,  228,  118,  121,  194,
      211,  195,  195,  245,  132,  132,  197,  198,  199,  200,
      201,  222,  267,  222,  268,  179,  223,  224,  270,  271,
      184,  281,  129,  282,  180,  179,  180,  233,  179,  179,
      179,  283,  137,  284,  256,  122,  272,  119,  339,  179,

      122,  287,  138,  126,  127,  143,  143,  337,  144,  273,
      179,  300,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  179,  274,
      179,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  202,
      203,  232,  285,  179,  204,  179,  205,  236,  237,  238,
      239,  240,  272,  179,  275,  275,  183,  179,  303,  234,
      288,  195,  195,  179,  311,  273,  312,  302,  179,  316,
      289,  128,  169,  179,  286,  179,  316,  179,  319,  319,
      179,  186,  317,  179,  179,  274,  241,  144,  179,  317,

      340,  314,  315,  184,  179,  301,  338,  184,  343,  144,
      144,  144,  318,  145,  146,  153,  153,  346,  347,  318,
      418,  351,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  304,  121,
      179,  155,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  197,
      348,  179,  348,  144,  272,  349,  350,  325,  192,  326,
      327,  200,  328,  300,  352,  329,  122,  344,  348,  272,
      348,  345,  345,  349,  350,  144,  181,  144,  144,  207,
      331,  201,  344,  144,  217,  154,  387,  344,  354,  358,

      179,  385,  144,  144,  191,  232,  355,  330,  179,  353,
      144,  419,  344,  154,  291,  357,  371,  372,  154,  390,
      391,  388,  389,  156,  157,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  179,  179,  144,  373,  183,
      373,  144,  386,  374,  375,  217,  404,  373,  179,  373,

      396,  179,  374,  375,  144,  344,  241,  179,  395,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  295,  344,  184,  187,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  272,  356,  275,  275,  359,
      360,  348,  179,  348,  179,  179,  390,  391,  273,  316,
      179,  319,  319,  392,  392,  179,  316,  144,  316,  179,
      370,  370,  317,  272,  344,  345,  345,  144,  274,  369,
      179,  369,  393,  393,  394,  179,  344,  217,  179,  144,
      405,  373,  318,  373,  344,  144,  407,  408,  422,  369,

      217,  369,  144,  179,  407,  408,  344,  400,  424,  189,
      190,  206,  206,  398,  401,  144,  397,  410,  410,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  179,  399,  420,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  179,  179,  179,  421,  421,
      426,  369,  144,  179,  392,  392,  393,  393,  179,  316,
      179,  370,  370,  409,  409,  344,  430,  423,  217,  154,
      179,  369,  369,  431,  369,  217,  144,  410,  410,  144,
      154,  179,  438,  421,  421,  344,  433,  433,  144,  179,

      217,  217,  369,  439,  369,  441,  179,  179,  427,  154,
      154,  440,  217,  444,  425,  409,  409,  429,  179,  208,
      209,  216,  216,  179,  428,  445,  369,  179,  144,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  443,  144,  369,  218,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  179,  154,  154,  448,  442,
      452,  217,  217,  447,  451,  446,  179,  179,  179,  449,
      450,  433,  433,  144,  453,  454,  144,  437,  436,  435,
      434,  179,  432,  144,  144,  417,  416,  415,  414,  413,

      412,  411,  406,  403,  402,  144,  144,  144,  144,  144,
      144,  384,  383,  382,  381,  179,  179,  179,  179,  179,
      179,  179,  380,  379,  378,  377,  376,  368,  367,  219,
      220,  179,  365,  364,  363,  362,  361,  179,  299,  342,
      144,  335,  334,  333,  332,  255,  251,  247,  242,  179,
      179,  324,  323,  322,  321,  320,  313,  310,  309,  308,
      307,  306,  305,  179,  179,  179,  179,  179,  299,  179,
      179,  179,  179,  179,  179,  134,  280,  279,  278,  277,
      276,  269,  154,  266,  265,  264,  263,  262,  261,  144,
      260,  259,  258,  257,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  246,  246,  256,  255,  123,  244,
      243,  242,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  179,  179,  231,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  230,  229,

      226,  225,  221,  179,  179,  215,  214,  213,  212,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  171,
      170,  169,  168,  167,  166,  163,  162,  158,  152,  151,
      150,  149,  138,  133,  129,  128,  119,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  248,  249,  250,  250,  455,  455,  455,  455,
      455,  455,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  455,  455,  455,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  252,  253,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  153,  153,  455,  455,  455,  455,

      455,  455,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  455,  455,  455,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  156,  157,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  290,  290,  455,  455,  455,  455,
      455,  455,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  455,  455,  455,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  292,  293,  294,  294,  455,  455,  455,  455,
      455,  455,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  455,  455,  455,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  296,  297,  179,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  216,  216,  455,
      455,  455,  455,  455,  455,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      455,  455,  455,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  219,  220,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  246,  246,  455,
      455,  455,  455,  455,  455,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      455,  455,  455,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  248,  249,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  250,  250,  455,
      455,  455,  455,  455,  455,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      455,  455,  455,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  252,  253,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  143,  143,  455,
      455,  455,  455,  455,  455,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  336,  144,  144,

      455,  455,  455,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  145,  146,  153,  153,  455,
      455,  455,  455,  455,  455,  154,  154,  154,  154,  154,

      341,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      455,  455,  455,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  156,  157,  290,  290,  455,

      455,  455,  455,  455,  455,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      455,  455,  455,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  292,  293,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  294,  294,  455,
      455,  455,  455,  455,  455,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      455,  455,  455,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  296,  297,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  295,  295,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  216,  216,  455,
      455,  455,  455,  455,  455,  217,  217,  217,  217,  217,
      366,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      455,  455,  455,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  219,  220,  111,  111,  111,
      114,  114,  114,  120,  120,  178,  178,  178,  182,  182,
      182,  254,  254,  254,  182,  182,  182,  298,  298,  298,
      120,  120,  254,  254,  254,  182,  182,  182,  298,  298,
      298,    7,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455
    } ;

static const flex_int16_t yy_chk[3412] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
        4,    4,    5,    6,    9,   12,    9,   26,   26,   24,
       29,   29,    5,    6,   24,   30,   30,    5,    6,   32,
       32,   34,  107,   45,   32,   45,   32,   48,   45,   45,
       34,   48,   59,   59,   59,   59,   59,   61,   61,   61,

       64,   78,   12,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   62,   78,
       73,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   62,
       63,   67,   73,   63,   75,   77,   80,   81,   67,   82,
       64,   85,   99,  109,   75,  118,   99,  118,  120,   75,
       85,   77,   77,  122,  132,  132,   80,   80,   81,   81,
       82,   96,  155,   96,  155,  190,   96,   96,  159,  159,
       63,  173,  173,  173,  180,  180,  180,  107,  110,  198,
      105,  174,  174,  174,  174,  120,  160,  176,  265,   83,

      122,  176,  176,   14,   14,   33,   33,  262,  265,  160,
      204,  198,  262,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,  185,  160,
      203,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   83,
       83,  105,  175,  202,   83,  195,   83,  110,  110,  110,
      110,  110,  161,  182,  161,  161,  182,  184,  204,  109,
      184,  195,  195,  209,  218,  161,  218,  203,  220,  223,
      185,  175,  175,  205,  175,  222,  224,  236,  224,  224,
      237,  190,  223,  239,  240,  161,  465,  269,  293,  224,

      266,  222,  222,  182,  238,  202,  263,  184,  269,  266,
      276,  263,  223,   33,   33,   42,   42,  272,  272,  224,
      387,  276,  387,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,  205,  245,
      302,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,  240,
      273,  301,  273,  277,  270,  273,  273,  236,  236,  236,
      237,  237,  237,  237,  277,  238,  245,  270,  274,  271,
      274,  271,  271,  274,  274,  273,  239,  280,  279,  209,
      239,  239,  271,  278,  220,  341,  341,  270,  279,  302,

      316,  336,  343,  274,  238,  238,  280,  238,  297,  278,
      336,  388,  271,  388,  293,  301,  316,  316,  342,  348,
      348,  342,  343,   42,   42,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   65,  288,  353,  317,  288,
      317,  355,  338,  317,  317,  366,  366,  318,  303,  318,

      355,  289,  318,  318,  338,  346,  461,  304,  353,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,  297,  346,  288,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,  275,  289,  275,  275,  303,
      304,  344,  314,  344,  315,  357,  344,  344,  275,  319,
      359,  319,  319,  347,  347,  356,  314,  275,  315,  360,
      315,  315,  319,  345,  347,  345,  345,  352,  275,  314,
      369,  315,  350,  350,  352,  358,  345,  367,  373,  394,
      367,  369,  319,  369,  347,  396,  369,  369,  394,  314,

      454,  315,  350,  398,  373,  373,  345,  359,  396,   65,
       65,   84,   84,  357,  360,  389,  356,  375,  375,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,  371,  358,  389,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,  370,  397,  372,  391,  391,
      398,  371,  395,  399,  392,  392,  393,  393,  400,  370,
      401,  370,  370,  372,  372,  392,  404,  395,  404,  418,
      408,  371,  370,  405,  372,  405,  393,  410,  410,  423,
      419,  427,  418,  421,  421,  392,  408,  408,  422,  409,

      430,  453,  370,  419,  372,  423,  452,  451,  399,  450,
      449,  422,  431,  430,  397,  409,  409,  401,  443,   84,
       84,   93,   93,  425,  400,  431,  409,  442,  441,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,  427,  440,  409,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  433,  438,  439,  437,  425,
      443,  444,  445,  435,  442,  434,  429,  428,  426,  438,
      439,  433,  433,  424,  444,  445,  420,  415,  413,  412,
      411,  407,  406,  386,  385,  384,  383,  382,  381,  380,

      378,  377,  368,  363,  361,  354,  351,  349,  340,  339,
      337,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  313,  312,   93,
       93,  108,  310,  309,  307,  306,  305,  300,  298,  268,
      264,  260,  259,  258,  257,  254,  253,  249,  242,  233,
      232,  231,  230,  229,  226,  225,  221,  215,  214,  213,
      212,  211,  210,  201,  200,  199,  197,  196,  194,  193,
      192,  191,  183,  181,  178,  177,  168,  167,  166,  163,
      162,  158,  157,  152,  151,  150,  149,  148,  147,  146,
      142,  141,  140,  139,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  123,  123,  135,  131,  127,  117,
      116,  112,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  106,  104,  102,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  101,  100,

       98,   97,   94,   92,   91,   89,   88,   87,   86,   79,
       76,   74,   72,   71,   70,   69,   68,   66,   60,   58,
       56,   54,   51,   50,   49,   47,   46,   43,   38,   37,
       36,   35,   31,   27,   22,   16,   11,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  123,  123,  124,  124,    0,    0,    0,    0,
        0,    0,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,    0,    0,    0,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,

      124,  124,  124,  124,  124,  124,  124,  124,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  124,  124,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  153,  153,    0,    0,    0,    0,

        0,    0,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,    0,    0,    0,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  153,  153,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  186,  186,    0,    0,    0,    0,
        0,    0,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,    0,    0,    0,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  186,  186,  186,  186,  186,  186,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  186,  186,  187,  187,    0,    0,    0,    0,
        0,    0,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,    0,    0,    0,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  187,  187,  189,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  189,  189,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  216,  216,    0,
        0,    0,    0,    0,    0,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
        0,    0,    0,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  216,  216,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  246,  246,    0,
        0,    0,    0,    0,    0,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
        0,    0,    0,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  246,  246,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  250,  250,    0,
        0,    0,    0,    0,    0,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
        0,    0,    0,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  250,  250,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  261,  261,    0,
        0,    0,    0,    0,    0,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

        0,    0,    0,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  261,  261,  267,  267,    0,
        0,    0,    0,    0,    0,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        0,    0,    0,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  267,  267,  290,  290,    0,

        0,    0,    0,    0,    0,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
        0,    0,    0,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  290,  290,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  294,  294,    0,
        0,    0,    0,    0,    0,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
        0,    0,    0,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  294,  294,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  311,  311,    0,
        0,    0,    0,    0,    0,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
        0,    0,    0,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  311,  311,  456,  456,  456,
      457,  457,  457,  458,  458,  459,  459,  459,  460,  460,
      460,  462,  462,  462,  463,  463,  463,  464,  464,  464,
      466,  466,  467,  467,  467,  468,  468,  468,  469,  469,
      469,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[85] =
    {   0,
0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/ruleslex.l"
#line 2 "src/ruleslex.l"
/* **************************************************
 *
 * ELVEX
 *
 * Copyright 2014-2020 LABRI, 
 * CNRS (UMR 5800), the University of Bordeaux,
 * and the Bordeaux INP
 *
 * Author: 
 * Lionel Clément
 * LaBRI -- Université Bordeaux 
 * 351, cours de la Libération
 * 33405 Talence Cedex - France
 * lionel.clement@labri.fr
 * 
 * This file is part of ELVEX.
 *
 ************************************************** */

#include <iostream>
#include <bitset>
#include <string>
#include "parser.hpp"
#include "rulesyacc.hpp"
#include "messages.hpp"

#if __cplusplus > 199711L
#define register      // Deprecated in C++11.
#endif  // #if __cplusplus > 199711L

#define YY_NO_INPUT

#if false
#define DBUG(x)x
#else
#define DBUG(x)
#endif

#define DBUGPRT(x) DBUG(std::cerr << "*** " << x << "<BR>" << std::endl;);
#define DBUGPRTARG(x,s) DBUG(std::cerr << "*** " << x << "&nbsp;" << s << "<BR>" << std::endl);
  
  extern char *lexString;
  extern bool stringInput;
  extern Parser parser;
  
  std::string *str;
  int comments;

  void init_buffer(){
    ruleslineno = 1;
  }
  
  void push_buffer() {
    yypush_buffer_state(yy_create_buffer( yyin, YY_BUF_SIZE ));
 }

  void delete_buffer() {
    yy_delete_buffer(YY_CURRENT_BUFFER);
  }
  
  void scan_string(std::string str) {
    yy_scan_string(str.c_str());
  }


#line 1786 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

#line 1788 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

#define INITIAL 0
#define INCLUDE 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 92 "src/ruleslex.l"


#line 2017 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 456 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3282 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];

goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */

		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 94 "src/ruleslex.l"
{
	DBUGPRTARG("••••••••••••••• ", yytext);
	REJECT;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 99 "src/ruleslex.l"
{
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 102 "src/ruleslex.l"
{comments=0; BEGIN COMMENT;}
	YY_BREAK

case 4:
YY_RULE_SETUP
#line 104 "src/ruleslex.l"
{comments++;}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 105 "src/ruleslex.l"
{}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 106 "src/ruleslex.l"
{if (!(comments--)) BEGIN INITIAL;} 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 107 "src/ruleslex.l"
;
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 110 "src/ruleslex.l"
{BEGIN INCLUDE;}
	YY_BREAK

case 9:
YY_RULE_SETUP
#line 112 "src/ruleslex.l"
{}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 113 "src/ruleslex.l"
{
	  DBUGPRT("TOKEN_#INCLUDE\n");
	  parser.pushBufferName(yytext);
	  parser.pushLineno(ruleslineno);
	  ruleslineno = 1;
	  if (parser.getVerbose()) {
	    std::cerr << "open " << yytext << std::endl;
	  }
	  yyin = fopen( yytext, "r" );
	  if ( ! yyin ){
	    throw "*** error: can't open " + std::string(yytext);
	  }
	  push_buffer();
	  BEGIN(INITIAL);
	}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 128 "src/ruleslex.l"
{}
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INCLUDE):
case YY_STATE_EOF(COMMENT):
#line 131 "src/ruleslex.l"
{
  yypop_buffer_state();
  if ( !YY_CURRENT_BUFFER ) {
    yyterminate();
  }
  else {
    if (parser.getVerbose()) {
      std::cerr << "close " << parser.getTopBufferName() << std::endl;
    }
    parser.popBufferName();
    ruleslineno = parser.popLineno();
  }
}
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 146 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RIGHTARROW\n");
    return TOKEN_RIGHTARROW;
  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_UPARROW\n");
    return TOKEN_UPARROW;
  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 156 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_UP2ARROW\n");
    return TOKEN_UP2ARROW;
  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 161 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DOWNARROW\n");
    ruleslval.integer_slot = 1;
    return TOKEN_DOWNARROW;
  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 167 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DOWN2ARROW\n");
    return TOKEN_DOWN2ARROW;
  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 172 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LT\n");
    return TOKEN_LT;
  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 177 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_GT\n");
    return TOKEN_GT;
  }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 182 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LE\n");
    return TOKEN_LT;
  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 187 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_GE\n");
    return TOKEN_GE;
  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 192 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LPAR\n");
    return TOKEN_LPAR;
  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 197 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RPAR\n");
    return TOKEN_RPAR;
  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 202 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LBRACKET\n");
    return TOKEN_LBRACKET;
  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 207 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RBRACKET\n");
    return TOKEN_RBRACKET;
  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 212 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LBRACE\n");
    return TOKEN_LBRACE;
  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 217 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RBRACE\n");
    return TOKEN_RBRACE;
  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 222 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_SEMI\n");
    return TOKEN_SEMI;
  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 227 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DOUBLECOLON\n");
    return TOKEN_DOUBLECOLON;
  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 232 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_COLON\n");
    return TOKEN_COLON;
  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 237 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DOT\n");
    return TOKEN_DOT;
  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 242 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DASH");
    return TOKEN_DASH;
  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 247 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_UNION\n");
    return TOKEN_UNION;
  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 252 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_SUBSUME\n");
    return TOKEN_SUBSUME;
  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 257 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_EQUAL\n");
    return TOKEN_EQUAL;
  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 262 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_AFF\n");
    return TOKEN_AFF;
  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 267 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DIFF\n");
    return TOKEN_DIFF;
  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 272 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PLUS\n");
    return TOKEN_PLUS;
  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 277 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_MINUS\n");
    return TOKEN_MINUS;
  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 282 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_TIMES\n");
    return TOKEN_TIMES;
  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 287 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DIVIDE\n");
    return TOKEN_DIVIDE;
  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 292 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_AROBASE\n");
    return TOKEN_AROBASE;
  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 297 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_INPUT\n");
    return TOKEN_INPUT;
  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 302 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RULES\n");
    return TOKEN_RULES;
  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 307 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LEXICON\n");
    return TOKEN_LEXICON;
  }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 312 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_TRACE\n");
    return TOKEN_TRACE;
  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 317 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_ATTEST\n");
    return TOKEN_ATTEST;
  }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 322 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_IF\n");
    return TOKEN_IF;
  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 327 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_ELSE\n");
    return TOKEN_ELSE;
  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 332 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PRINT\n");
    return TOKEN_PRINT;
  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 337 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PRINTLN\n");
    return TOKEN_PRINTLN;
  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 342 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_SEARCH\n");
    return TOKEN_SEARCH;
  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 347 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RAND\n");
    return TOKEN_RAND;
  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 352 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_FOREACH\n");
    return TOKEN_FOREACH;
  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 357 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_IN\n");
    return TOKEN_IN;
  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 362 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PIPE\n");
    return TOKEN_PIPE;
  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 367 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_OR\n");
    return TOKEN_OR;
  }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 372 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_AND\n");
    return TOKEN_AND;
  }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 377 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_IMPLICATION\n");
    return TOKEN_IMPLICATION;
  }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 382 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_EQUIV\n");
    return TOKEN_EQUIV;
  }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 387 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_NOT\n");
    return TOKEN_NOT;
  }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 392 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_INSET\n");
    return TOKEN_INSET;
  }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 397 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_COMMA\n");
    return TOKEN_COMMA;
  }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 402 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DASH\n");
    return TOKEN_DASH;
  }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 407 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PLUS\n");
    return TOKEN_PLUS;
  }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 412 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_MINUS\n");
    return TOKEN_MINUS;
  }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 417 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_MODULO\n");
    return TOKEN_MODULO;
  }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 422 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PRED\n");
    return TOKEN_PRED;
  }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 427 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LEMMA\n");
    return TOKEN_LEMMA;
  }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 432 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_FORM\n");
    return TOKEN_FORM;
  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 437 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_TRUE\n");
    return TOKEN_TRUE;
  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 442 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_FALSE\n");
    return TOKEN_FALSE;
  }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 447 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_NILL\n");
    return TOKEN_NIL;
  }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 452 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_STRING ", yytext);
    //ruleslval.integer_slot = yylineno;
    ruleslval.string_slot = new std::string(std::to_string(yylineno));
    return TOKEN_STRING;
  }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 459 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_STRING ", yytext);
    ruleslval.string_slot = new std::string(parser.getTopBufferName());
    return TOKEN_STRING;
  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 465 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_IDENTIFIER ", yytext);
    ruleslval.string_slot = new std::string(yytext);
    return TOKEN_IDENTIFIER;
  }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 471 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_VARIABLE ", yytext);
    ruleslval.string_slot = new std::string(yytext);
    return TOKEN_VARIABLE;
  }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 477 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_ANONYMOUS ", yytext);
    return TOKEN_ANONYMOUS;
  }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 482 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_INTEGER ", yytext);
    sscanf(yytext, "%d", &ruleslval.integer_slot);
    return TOKEN_INTEGER;
  }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 488 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_DOUBLE ", yytext);
    sscanf(yytext+1, "%lf", &ruleslval.double_slot);
    return TOKEN_DOUBLE;
  }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 494 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_STRING ", yytext);
    std::string s = yytext;
    ruleslval.string_slot = new std::string(s.substr(1, s.length()-2));
    return TOKEN_STRING;
  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 501 "src/ruleslex.l"
{}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 503 "src/ruleslex.l"
{}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 505 "src/ruleslex.l"
{
    DBUGPRTARG("OTHER TOKEN ", yytext);
    return (*yytext);
  }
	YY_BREAK

case 84:
YY_RULE_SETUP
#line 511 "src/ruleslex.l"
ECHO;
	YY_BREAK
#line 2780 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 456 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 456 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 455);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 511 "src/ruleslex.l"



