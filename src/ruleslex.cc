#line 1 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

#line 3 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer rules_create_buffer
#define yy_delete_buffer rules_delete_buffer
#define yy_scan_buffer rules_scan_buffer
#define yy_scan_string rules_scan_string
#define yy_scan_bytes rules_scan_bytes
#define yy_init_buffer rules_init_buffer
#define yy_flush_buffer rules_flush_buffer
#define yy_load_buffer_state rules_load_buffer_state
#define yy_switch_to_buffer rules_switch_to_buffer
#define yypush_buffer_state rulespush_buffer_state
#define yypop_buffer_state rulespop_buffer_state
#define yyensure_buffer_stack rulesensure_buffer_stack
#define yy_flex_debug rules_flex_debug
#define yyin rulesin
#define yyleng rulesleng
#define yylex ruleslex
#define yylineno ruleslineno
#define yyout rulesout
#define yyrestart rulesrestart
#define yytext rulestext
#define yywrap ruleswrap
#define yyalloc rulesalloc
#define yyrealloc rulesrealloc
#define yyfree rulesfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define rules_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer rules_create_buffer
#endif

#ifdef yy_delete_buffer
#define rules_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer rules_delete_buffer
#endif

#ifdef yy_scan_buffer
#define rules_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer rules_scan_buffer
#endif

#ifdef yy_scan_string
#define rules_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string rules_scan_string
#endif

#ifdef yy_scan_bytes
#define rules_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes rules_scan_bytes
#endif

#ifdef yy_init_buffer
#define rules_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer rules_init_buffer
#endif

#ifdef yy_flush_buffer
#define rules_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer rules_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define rules_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state rules_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define rules_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer rules_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define rulespush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state rulespush_buffer_state
#endif

#ifdef yypop_buffer_state
#define rulespop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state rulespop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define rulesensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack rulesensure_buffer_stack
#endif

#ifdef yylex
#define ruleslex_ALREADY_DEFINED
#else
#define yylex ruleslex
#endif

#ifdef yyrestart
#define rulesrestart_ALREADY_DEFINED
#else
#define yyrestart rulesrestart
#endif

#ifdef yylex_init
#define ruleslex_init_ALREADY_DEFINED
#else
#define yylex_init ruleslex_init
#endif

#ifdef yylex_init_extra
#define ruleslex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra ruleslex_init_extra
#endif

#ifdef yylex_destroy
#define ruleslex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy ruleslex_destroy
#endif

#ifdef yyget_debug
#define rulesget_debug_ALREADY_DEFINED
#else
#define yyget_debug rulesget_debug
#endif

#ifdef yyset_debug
#define rulesset_debug_ALREADY_DEFINED
#else
#define yyset_debug rulesset_debug
#endif

#ifdef yyget_extra
#define rulesget_extra_ALREADY_DEFINED
#else
#define yyget_extra rulesget_extra
#endif

#ifdef yyset_extra
#define rulesset_extra_ALREADY_DEFINED
#else
#define yyset_extra rulesset_extra
#endif

#ifdef yyget_in
#define rulesget_in_ALREADY_DEFINED
#else
#define yyget_in rulesget_in
#endif

#ifdef yyset_in
#define rulesset_in_ALREADY_DEFINED
#else
#define yyset_in rulesset_in
#endif

#ifdef yyget_out
#define rulesget_out_ALREADY_DEFINED
#else
#define yyget_out rulesget_out
#endif

#ifdef yyset_out
#define rulesset_out_ALREADY_DEFINED
#else
#define yyset_out rulesset_out
#endif

#ifdef yyget_leng
#define rulesget_leng_ALREADY_DEFINED
#else
#define yyget_leng rulesget_leng
#endif

#ifdef yyget_text
#define rulesget_text_ALREADY_DEFINED
#else
#define yyget_text rulesget_text
#endif

#ifdef yyget_lineno
#define rulesget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno rulesget_lineno
#endif

#ifdef yyset_lineno
#define rulesset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno rulesset_lineno
#endif

#ifdef yywrap
#define ruleswrap_ALREADY_DEFINED
#else
#define yywrap ruleswrap
#endif

#ifdef yyalloc
#define rulesalloc_ALREADY_DEFINED
#else
#define yyalloc rulesalloc
#endif

#ifdef yyrealloc
#define rulesrealloc_ALREADY_DEFINED
#else
#define yyrealloc rulesrealloc
#endif

#ifdef yyfree
#define rulesfree_ALREADY_DEFINED
#else
#define yyfree rulesfree
#endif

#ifdef yytext
#define rulestext_ALREADY_DEFINED
#else
#define yytext rulestext
#endif

#ifdef yyleng
#define rulesleng_ALREADY_DEFINED
#else
#define yyleng rulesleng
#endif

#ifdef yyin
#define rulesin_ALREADY_DEFINED
#else
#define yyin rulesin
#endif

#ifdef yyout
#define rulesout_ALREADY_DEFINED
#else
#define yyout rulesout
#endif

#ifdef yy_flex_debug
#define rules_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug rules_flex_debug
#endif

#ifdef yylineno
#define ruleslineno_ALREADY_DEFINED
#else
#define yylineno ruleslineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ruleswrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 99
#define YY_END_OF_BUFFER 100
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[691] =
    {   0,
        9,    9,   13,   13,  100,   98,   99,   96,   98,   99,
       97,   99,   77,   98,   99,   12,   98,   99,   41,   79,
       98,   99,   98,   99,   82,   98,   99,   98,   99,   31,
       98,   99,   32,   98,   99,   49,   98,   99,   47,   80,
       98,   99,   78,   98,   99,   48,   81,   98,   99,   40,
       98,   99,   50,   98,   99,   94,   98,   99,   94,   98,
       99,   39,   98,   99,   37,   98,   99,   27,   98,   99,
       45,   98,   99,   28,   98,   99,   51,   98,   99,   91,
       98,   99,   91,   98,   99,   91,   98,   99,   91,   98,
       99,   91,   98,   99,   91,   98,   99,   42,   91,   98,

       99,   33,   98,   99,   34,   98,   99,   93,   98,   99,
       91,   98,   99,   91,   98,   99,   91,   98,   99,   91,
       98,   99,   91,   98,   99,   91,   98,   99,   91,   98,
       99,   91,   98,   99,   91,   98,   99,   91,   98,   99,
       42,   91,   98,   99,   35,   98,   99,   72,   98,   99,
       36,   98,   99,   98,   99,   98,   99,   98,   99,   98,
       99,   98,   99,   96,   98,   99,   77,   98,   99,   12,
       98,   99,   41,   79,   98,   99,   98,   99,   82,   98,
       99,   98,   99,   31,   98,   99,   32,   98,   99,   49,
       98,   99,   47,   80,   98,   99,   78,   98,   99,   48,

       81,   98,   99,   40,   98,   99,   50,   98,   99,   94,
       98,   99,   94,   98,   99,   39,   98,   99,   37,   98,
       99,   27,   98,   99,   45,   98,   99,   28,   98,   99,
       51,   98,   99,   91,   98,   99,   91,   98,   99,   91,
       98,   99,   91,   98,   99,   91,   98,   99,   91,   98,
       99,   42,   91,   98,   99,   33,   98,   99,   34,   98,
       99,   93,   98,   99,   91,   98,   99,   91,   98,   99,
       91,   98,   99,   91,   98,   99,   91,   98,   99,   91,
       98,   99,   91,   98,   99,   91,   98,   99,   91,   98,
       99,   91,   98,   99,   42,   91,   98,   99,   35,   98,

       99,   72,   98,   99,   36,   98,   99,   98,   99,   98,
       99,   98,   99,   98,   99,   10,   99,    9,   99,   11,
       99,    7,   99,    5,   99,    7,   99,    7,   99,   13,
       99,   14,   21,   99,   19,   99,   17,   99,   96,   46,
       92,   92,   74,   22,    3,   94,   38,   43,   29,   44,
       75,   30,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   95,   91,   95,   91,   91,
       91,   60,   91,   70,   91,   71,   91,   91,   91,   91,
       73,   77,   91,   91,    1,   96,   46,   92,   92,   74,
       22,    3,   94,   38,   43,   29,   44,   75,   30,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   95,   91,   95,   91,   91,   91,   60,   91,
       70,   91,   71,   91,   91,   91,   91,   73,   77,   91,
       91,   10,    9,    6,    4,   13,   20,   18,   20,   17,
       20,   15,   20,   16,   20,   92,   92,   92,   92,    2,
       76,   91,   91,   91,   91,   88,   91,   91,   91,   91,
       91,   95,   95,   91,   91,   91,   95,   91,   91,   91,
       91,   91,   91,   23,   25,   24,   26,   42,   29,   92,
       92,   92,   92,    1,    2,   76,   91,   91,   91,   91,
       88,   91,   91,   91,   91,   91,   95,   95,   91,   91,

       91,   95,   91,   91,   91,   91,   91,   91,   23,   25,
       24,   26,   42,   29,   17,   91,   85,   91,   83,   91,
       91,   86,   91,   91,   91,   91,   95,   95,   95,   91,
       95,   91,   95,   91,   61,   91,   91,   91,   68,   91,
       91,   91,   85,   91,   83,   91,   91,   86,   91,   91,
       91,   91,   95,   95,   95,   91,   95,   91,   95,   91,
       61,   91,   91,   91,   68,   91,   91,   87,   91,   84,
       91,   91,   91,   91,   95,   95,   95,   91,   95,   91,
       91,   63,   91,   91,   87,   91,   84,   91,   91,   91,
       91,   95,   95,   95,   91,   95,   91,   91,   63,   91,

       91,   52,   53,   55,   91,   91,   59,   91,   95,   91,
       91,   91,   91,   67,   91,   52,   53,   55,   91,   91,
       59,   91,   95,   91,   91,   91,   91,   67,   91,   91,
       91,   91,   69,   91,   64,   91,   91,   91,   91,   91,
       69,   91,   64,   91,   91,   54,   90,   91,   89,   91,
       62,   91,   91,   91,    8,   54,   90,   91,   89,   91,
       62,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   58,   56,   91,   65,   91,   58,   56,   91,
       65,   91,   91,   91,   66,   91,   66,   91,   57,   57
    } ;

static const flex_int16_t yy_accept[568] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    4,    5,    6,
        8,   11,   13,   16,   19,   23,   25,   28,   30,   33,
       36,   39,   43,   46,   50,   53,   56,   59,   62,   65,
       68,   71,   74,   77,   80,   83,   86,   89,   92,   95,
       98,  102,  105,  108,  111,  114,  117,  120,  123,  126,
      129,  132,  135,  138,  141,  145,  148,  151,  154,  156,
      158,  160,  162,  164,  167,  170,  173,  177,  179,  182,
      184,  187,  190,  193,  197,  200,  204,  207,  210,  213,
      216,  219,  222,  225,  228,  231,  234,  237,  240,  243,
      246,  249,  252,  256,  259,  262,  265,  268,  271,  274,

      277,  280,  283,  286,  289,  292,  295,  299,  302,  305,
      308,  310,  312,  314,  316,  318,  320,  322,  324,  326,
      328,  330,  332,  335,  337,  339,  340,  341,  342,  342,
      343,  343,  343,  344,  345,  346,  346,  347,  348,  349,
      350,  351,  352,  353,  353,  353,  353,  353,  353,  353,
      353,  354,  355,  355,  355,  356,  357,  358,  359,  360,
      361,  362,  363,  364,  364,  364,  365,  365,  367,  369,
      370,  371,  372,  374,  376,  378,  379,  380,  381,  382,
      383,  384,  385,  385,  385,  385,  385,  385,  385,  386,
      387,  388,  388,  389,  389,  390,  390,  390,  391,  392,

      393,  393,  394,  395,  396,  397,  398,  399,  400,  400,
      400,  400,  400,  400,  400,  400,  401,  402,  402,  402,
      403,  404,  405,  406,  407,  408,  409,  410,  411,  411,
      411,  412,  412,  414,  416,  417,  418,  419,  421,  423,
      425,  426,  427,  428,  429,  430,  431,  432,  432,  432,
      432,  432,  432,  433,  434,  435,  436,  437,  438,  440,
      442,  444,  446,  447,  448,  448,  448,  449,  450,  450,
      450,  450,  451,  452,  452,  452,  452,  452,  452,  452,
      452,  453,  454,  455,  456,  458,  459,  460,  461,  462,
      463,  464,  464,  465,  466,  468,  469,  470,  471,  472,

      473,  474,  475,  476,  477,  478,  479,  480,  480,  481,
      482,  482,  482,  483,  484,  484,  484,  484,  486,  487,
      487,  487,  487,  487,  487,  487,  487,  488,  489,  490,
      491,  493,  494,  495,  496,  497,  498,  499,  499,  500,
      501,  503,  504,  505,  506,  507,  508,  509,  510,  511,
      512,  513,  514,  515,  516,  516,  516,  516,  516,  516,
      516,  516,  517,  519,  521,  522,  524,  525,  526,  527,
      527,  528,  529,  530,  530,  532,  534,  535,  537,  538,
      539,  541,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  543,  545,  547,  548,  550,  551,  552,  553,  553,

      554,  555,  556,  556,  558,  560,  561,  563,  564,  565,
      567,  568,  568,  568,  568,  568,  568,  568,  568,  570,
      572,  573,  574,  575,  576,  577,  578,  580,  581,  582,
      584,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      587,  589,  590,  591,  592,  593,  594,  595,  597,  598,
      599,  601,  602,  602,  603,  603,  603,  604,  605,  605,
      606,  607,  609,  610,  611,  612,  613,  614,  616,  616,
      616,  617,  617,  617,  618,  619,  619,  620,  621,  623,
      624,  625,  626,  627,  628,  630,  630,  630,  630,  630,
      631,  632,  633,  635,  637,  638,  638,  638,  638,  638,

      638,  639,  640,  641,  643,  645,  646,  646,  647,  647,
      647,  649,  651,  653,  654,  655,  656,  656,  657,  657,
      657,  659,  661,  663,  664,  665,  665,  665,  665,  666,
      667,  667,  667,  667,  668,  669,  669,  669,  669,  670,
      671,  671,  671,  671,  672,  673,  673,  674,  675,  676,
      678,  678,  679,  680,  681,  683,  683,  684,  684,  685,
      685,  687,  687,  689,  690,  691,  691
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,    1,   27,   28,   29,   29,   30,   31,   32,
       29,   33,   34,   29,   29,   35,   36,   37,   38,   29,
       29,   39,   40,   41,   42,   29,   29,   29,   29,   29,
       43,   44,   45,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   53,   53,   56,   57,   58,
       59,   60,   53,   61,   62,   63,   64,   53,   65,   66,
       53,   53,   67,   68,   69,    1,    1,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
        1,   93,   94,   95,   96,   97,   98,    1,   99,  100,
      101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
      111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
      121,  122,    1,  123,  124,  125,  126,  127,  128,    1,
      129,    1,    1,  130,  131,    1,  132,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,  133,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[134] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[580] =
    {   0,
        0,  133,  265,  267,  268,  269,  270,  271, 1740, 3391,
      276, 3391, 1699, 3391, 3391,  288, 3391, 1713, 3391, 3391,
     3391, 3391, 3391, 1696, 3391,  266, 3391,  269, 1699, 3391,
      267,  268, 1695,  247,  402,  247, 1688, 1622, 1618, 1612,
        0, 3391, 3391,  516, 1587,    0,  341, 1593, 1589,  246,
     1589, 1585, 1598, 1593,    0, 3391, 1575, 3391, 1530,  579,
     1518,  287, 1637,  297,  280, 1636,  303,  706, 1635,  365,
     1634, 1633, 1632, 1631, 1630,  306, 1629,  356, 1628,  367,
      368, 1627,  353,  369,  308,  421,  820,  345, 1598, 1597,
     1593, 1587,    0, 1622, 1621,  934, 1560,    0,  377, 1566,

     1562,  324, 1562, 1558, 1571, 1566,    0, 1613,  377, 1612,
      293, 1064,  294,  411,    0, 1612, 3391, 3391, 3391, 1595,
     1599,    0, 3391, 3391,  577,  377, 3391, 1175, 1289,    0,
     1352, 1488, 3391, 3391, 3391, 1607,  380, 3391, 3391, 1583,
     3391, 3391, 3391, 1553, 1549, 1555, 1554, 1540, 1542, 1547,
        0,    0, 1412, 1478, 1565, 1560, 1570, 1561, 1561, 1553,
     1523,    0,  371, 1586, 1471, 1530,  388,  395,  454, 1540,
     1529, 1529,    0,    0,    0, 1513, 1509, 1519, 3391, 3391,
        0,    0,  391,  405,  303,  396, 1478, 1546, 3391,  495,
     1545,  412, 1697, 1811,    0, 1941,  381, 1544, 1543, 1542,

     1416,  499, 1415, 1414,  399, 1413, 1412, 1411,  469,  480,
      508,  509,  444,  328,  506,    0,    0, 2001,  500, 1378,
     1373, 1383, 1374, 1374, 1366, 2112,    0,  475, 2175,  503,
     1344,  510,  567,  568, 1354, 1343, 1343,    0,    0,    0,
     1348, 1344, 1354, 1397, 1396,    0,    0,  513,  518,  415,
      511,  514,    0, 1396, 3391, 3391,    0, 3391, 3391,  507,
     3391, 3391, 2286,    0, 2349, 1274, 2460,    0, 2523, 1273,
     1392, 3391, 3391, 1344, 1333, 1326, 1330, 1334, 1342, 1325,
     2634,  492,  563,  503, 1347,  564, 2748, 1352,  376,  593,
      698,  521,  711,  759,  764,  569,  574,  577,  554,  582,

      552, 3391, 3391, 3391, 3391, 3391, 3391,  587, 2862,    0,
     2925,  588, 3036,    0, 3099,  627, 1382, 3391, 1381,  771,
      717,  710,  721,  730,  382,  725, 1343, 1346, 1351, 1344,
        0, 1348, 3210, 1344, 1326,  791,  793,  786,  809,  873,
      814, 1325, 1324, 1323, 1315, 1322, 1310, 1367, 1366, 1365,
     1364, 1363, 1362,  614, 1309, 1299, 1307, 1304, 1309, 1310,
     1304,  598, 1317, 1316,  599, 1294,  607,  609,  747,  881,
      886,  760,  889,  702, 1293,  892,  757, 1292,  753,  763,
     1276,  752,  787,  833,  799,  843,  861,  887,  893,  896,
     1284,    0,    0, 1286,    0,  782,  882, 1251,  925,  998,

      926,  928, 1001,    0,  902, 1251,    0, 1264, 1242,    0,
     1255, 1239, 1236, 1249, 1233, 1234, 1244, 1232, 1253, 1250,
      893,  899,  851, 3391,  915,  992,  986,  758,  976,  968,
      591,  975,  953,  940,  912,  999, 1006, 1007, 1024,    0,
        0,  997, 1001, 1226, 1285, 1031, 1041, 1017, 1226, 1237,
      654, 1231, 1233, 3391, 1224, 1219, 3391, 3391, 1221,  680,
      786, 1240, 1021, 1005,  993, 1006, 1008, 1239, 1050, 1051,
     1275,  901, 1052, 1274, 1272, 1054, 1035, 1036,    0, 1056,
     1223, 1219, 1214, 1207,    0, 1220, 1210, 1219, 1218, 1039,
     1044, 1034, 1224, 1039, 1043, 1077, 1084, 1194, 1085, 1195,

     1057, 1060, 1213,    0, 1200, 1211, 1197, 3391, 1210, 1208,
     1222, 1221, 1213, 1049, 1056, 1248, 1196, 1247, 1197, 1198,
     1097, 1096,    0, 1064, 1075, 1069, 1067, 1071, 1055, 1057,
     1199, 1215, 1216, 1071, 1058, 1058, 1065, 1051, 1058, 1059,
     1217, 1240, 1241, 1060, 1049,  900, 3391, 3391, 1064,  886,
     1243,  922,  844,  766,    0,  665, 1068, 1245,  576,  459,
      364, 1246,    0, 3391,  310, 3391, 3342, 3346, 3350, 3354,
     3358, 3362, 3364, 3368, 3372, 3376, 3380, 3382, 3386
    } ;

static const flex_int16_t yy_def[580] =
    {   0,
      566,  566,  567,  567,  568,  568,  569,  569,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,   35,   35,   35,   35,   35,
       35,  566,  566,  566,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,  566,  566,  566,  566,  566,
      566,  566,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,   68,   87,   87,   87,
       87,   87,   87,  570,  570,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,  570,  570,  570,
      570,  570,  570,  570,  571,  566,  566,  566,  566,  566,
      566,  572,  566,  566,  573,  566,  566,  566,  566,  128,
      566,  566,  566,  566,  566,  574,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
       35,   35,  566,  566,   35,   35,   35,   35,   35,   35,
      566,  161,  161,  566,  566,   35,  566,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,  566,  566,
       35,   35,  566,  566,  566,  566,  566,  570,  566,  570,
      570,  570,   87,   87,  193,  570,  570,  570,  570,  570,

      575,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,   87,   87,  196,  570,   87,
       87,   87,   87,   87,   87,   87,  226,  226,  196,  570,
       87,  570,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,  570,  570,   87,   87,  570,  570,  570,
      570,  570,  576,  566,  566,  566,  577,  566,  566,  566,
      566,  566,  566,  263,  566,  566,  566,  267,  566,  566,
      578,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  281,  281,  281,  281,  281,  566,  287,  281,  566,
      566,  566,  281,  281,  281,  281,  281,  281,  281,  281,

      281,  566,  566,  566,  566,  566,  566,  570,   87,  309,
      196,  570,  309,  313,  196,  570,  579,  566,  570,  570,
      570,  570,  570,  570,  570,  570,   87,   87,   87,   87,
       87,   87,   87,  333,   87,  570,  570,  570,   87,   87,
       87,   87,   87,   87,   87,   87,   87,  570,  570,  570,
      570,  570,  570,  566,  566,  566,  566,  566,  566,  566,
      566,  281,  281,  281,  281,  281,  287,  287,  281,  566,
      566,  566,  566,  566,  281,  281,  281,  281,  281,  281,
      281,  281,  570,  570,  570,  570,  570,  570,  570,  570,
       87,   87,   87,   87,   87,  333,  333,   87,  570,  570,

      570,  570,  570,   87,   87,   87,   87,   87,   87,   87,
       87,  566,  566,  566,  566,  566,  566,  566,  281,  281,
      287,  287,  281,  566,  566,  566,  281,  281,  281,  281,
      281,  570,  570,  570,  570,  570,  570,  570,  570,   87,
       87,  333,  333,   87,  570,  570,  570,   87,   87,   87,
       87,   87,  566,  566,  566,  566,  566,  566,  566,  287,
      287,  281,  566,  281,  281,  281,  281,  281,  570,  570,
      570,  570,  570,  570,  570,  570,  333,  333,   87,  570,
       87,   87,   87,   87,   87,  566,  566,  566,  566,  287,
      287,  281,  281,  281,  281,  570,  570,  570,  570,  570,

      333,  333,   87,   87,   87,   87,  566,  566,  566,  566,
      287,  287,  281,  281,  281,  570,  570,  570,  570,  570,
      333,  333,   87,   87,   87,  566,  566,  566,  281,  281,
      570,  570,  570,   87,   87,  566,  566,  566,  281,  281,
      570,  570,  570,   87,   87,  566,  566,  566,  281,  281,
      570,  570,  570,   87,   87,  566,  281,  570,   87,  566,
      281,  570,   87,  566,  570,    0,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566
    } ;

static const flex_int16_t yy_nxt[3525] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       28,   29,   30,   31,   32,   33,   34,   35,   35,   35,
       35,   36,   37,   35,   38,   35,   39,   35,   35,   35,
       40,   41,   42,   10,   43,   44,   45,   46,   46,   47,
       48,   49,   46,   46,   50,   46,   46,   46,   51,   52,
       53,   54,   46,   55,   46,   46,   56,   57,   58,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   59,
       60,   61,   62,   63,   64,   12,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   80,   81,   82,   83,   84,   85,   86,
       87,   87,   87,   87,   88,   89,   87,   90,   87,   91,
       87,   87,   87,   92,   93,   94,   63,   95,   96,   97,
       98,   98,   99,  100,  101,   98,   98,  102,   98,   98,
       98,  103,  104,  105,  106,   98,  107,   98,   98,  108,

      109,  110,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,  111,  112,  113,  114,  116,  117,  116,  117,
      119,  119,  123,  123,  155,  124,  124,  126,  135,  126,
      120,  120,  189,  136,  156,  121,  121,  137,  137,  137,
      139,  140,  141,  142,  144,  189,  189,  173,  190,  189,

      190,  145,  146,  174,  191,  189,  147,  148,  189,  149,
      189,  150,  189,  125,  125,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      189,  199,  208,  129,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  167,  189,  167,  192,  189,  168,
      169,  169,  183,  184,  185,  186,  187,  189,  200,  189,
      189,  189,  220,  201,  198,  238,  204,  205,  126,  189,
      126,  239,  221,  189,  189,  202,  202,  202,  325,  203,
      232,  170,  232,  206,  207,  233,  234,  234,  137,  137,

      137,  189,  287,  152,  245,  288,  290,  291,  291,  133,
      179,  292,  306,  189,  189,  152,  246,  189,  131,  132,
      151,  151,  151,  189,  319,  293,  369,  235,  389,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  244,  294,  189,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  209,  308,
      292,  189,  295,  295,  295,  210,  211,  302,  134,  303,
      212,  213,  189,  214,  293,  215,  248,  249,  250,  251,
      252,  304,  142,  305,  273,  127,  190,  189,  190,  307,

      143,  189,  189,  193,  294,  189,  333,  324,  189,  334,
      189,  189,  189,  189,  564,  189,  189,  202,  202,  202,
      189,  198,  244,  320,  352,  354,  354,  363,  336,  337,
      337,  152,  153,  154,  161,  161,  161,  321,  365,  372,
      373,  373,  152,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  322,  323,
      326,  163,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  259,  338,  338,  204,  341,  341,  341,  189,
      189,  152,  364,  152,  366,  260,  260,  339,  339,  348,

      199,  349,  152,  152,  350,  207,  351,  319,  152,  292,
      191,  380,  382,  152,  353,  208,  152,  340,  340,  377,
      259,  152,  217,  370,  378,  227,  420,  379,  419,  189,
      152,  381,  354,  354,  261,  383,  563,  152,  152,  262,
      162,  421,  162,  370,  468,  422,  164,  165,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  182,  189,  483,
      310,  560,  189,  162,  292,  484,  371,  371,  371,  189,
      424,  425,  425,  189,  374,  490,  374,  189,  370,  375,
      376,  376,  189,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  370,  314,
      152,  194,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  374,  189,  374,  386,  385,  375,  376,  376,
      292,  387,  295,  295,  295,  388,  152,  390,  189,  189,
      370,  152,  152,  189,  293,  189,  152,  152,  152,  429,

      431,  189,  152,  152,  401,  402,  402,  338,  423,  338,
      370,  400,  400,  400,  294,  227,  442,  428,  464,  162,
      384,  399,  403,  399,  403,  430,  559,  404,  405,  405,
      338,  491,  341,  341,  341,  189,  196,  197,  216,  216,
      216,  399,  432,  399,  339,  189,  189,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  434,  189,  340,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  403,  433,  403,  189,
      152,  404,  405,  405,  374,  189,  374,  435,  189,  424,

      425,  425,  292,  189,  371,  371,  371,  426,  426,  426,
      427,  427,  427,  462,  189,  227,  370,  436,  443,  370,
      448,  448,  448,  460,  189,  152,  162,  189,  189,  461,
      189,  152,  162,  463,  463,  463,  370,  437,  403,  370,
      403,  438,  189,  445,  446,  446,  447,  447,  447,  439,
      218,  219,  226,  226,  226,  189,  399,  556,  399,  498,
      472,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  399,  189,  399,  228,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      189,  189,  471,  189,  427,  427,  427,  152,  189,  189,
      426,  426,  426,  470,  338,  152,  400,  400,  400,  445,
      446,  446,  370,  466,  465,  152,  189,  477,  399,  467,
      227,  478,  152,  189,  227,  448,  448,  448,  469,  463,
      463,  463,  370,  189,  152,  152,  493,  152,  399,  480,
      480,  480,  189,  189,  189,  492,  189,  475,  189,  447,
      447,  447,  473,  494,  229,  230,  189,  474,  227,  227,
      495,  399,  162,  152,  480,  480,  480,  162,  152,  189,
      501,  502,  152,  513,  511,  476,  189,  189,  152,  512,
      227,  399,  515,  227,  152,  152,  152,  152,  152,  496,

      514,  497,  521,  152,  539,  522,  530,  152,  549,  555,
      554,  529,  548,  500,  499,  547,  546,  540,  545,  550,
      544,  538,  537,  536,  557,  535,  534,  516,  561,  227,
      227,  519,  517,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  263,  263,  263,  189,  189,  189,  189,

      189,  189,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  189,  189,  189,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  520,  189,  189,  532,  189,  533,  189,  189,  189,
      189,  518,  152,  541,  162,  162,  528,  527,  531,  526,
      525,  524,  523,  152,  510,  509,  543,  508,  507,  506,
      542,  505,  504,  503,  189,  551,  189,  189,  152,  152,
      489,  488,  487,  486,  485,  482,  481,  189,  479,  152,
      552,  562,  152,  459,  458,  457,  456,  455,  454,  453,

      558,  565,  553,  452,  451,  265,  266,  267,  267,  267,
      450,  449,  444,  441,  440,  152,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  152,  152,  152,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  152,  152,  418,  417,  416,
      415,  414,  413,  412,  189,  189,  189,  189,  189,  189,
      411,  410,  409,  408,  407,  406,  398,  397,  395,  394,
      393,  392,  391,  189,  318,  368,  152,  361,  360,  359,
      358,  357,  356,  355,  272,  268,  264,  254,  189,  189,

      347,  346,  345,  344,  343,  342,  335,  332,  331,  330,
      329,  328,  327,  189,  189,  189,  189,  189,  318,  269,
      270,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,

      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  161,  161,  161,  189,  189,  189,  189,  189,  139,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  301,  300,  299,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  298,
      297,  296,  289,  162,  286,  285,  284,  283,  282,  281,

      152,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      128,  256,  255,  254,  189,  189,  243,  242,  241,  240,
      237,  236,  231,  189,  189,  225,  224,  223,  222,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      181,  180,  179,  178,  177,  176,  175,  172,  171,  166,
      160,  159,  158,  164,  165,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  309,  309,  309,  157,  143,
      138,  134,  133,  127,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  566,
      566,  566,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  311,  312,  313,
      313,  313,  566,  566,  566,  566,  566,  566,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  566,  566,  566,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  315,  316,  189,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      226,  226,  226,  566,  566,  566,  566,  566,  566,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  566,  566,  566,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  229,  230,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  263,  263,  263,  566,  566,  566,
      566,  566,  566,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  566,  566,
      566,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  265,  266,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  267,  267,
      267,  566,  566,  566,  566,  566,  566,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  566,  566,  566,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      269,  270,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  151,  151,  151,  566,  566,  566,  566,  566,
      566,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  362,  152,  152,  566,  566,  566,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  153,  154,  161,  161,  161,  566,
      566,  566,  566,  566,  566,  162,  162,  162,  162,  162,
      162,  367,  162,  162,  162,  162,  162,  162,  162,  162,
      566,  566,  566,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  164,  165,
      309,  309,  309,  566,  566,  566,  566,  566,  566,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  566,  566,  566,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  311,  312,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  313,  313,  313,  566,  566,  566,
      566,  566,  566,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  566,  566,
      566,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,

      313,  313,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  315,  316,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  313,  313,  313,

      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  226,  226,
      226,  566,  566,  566,  566,  566,  566,  227,  227,  227,
      227,  227,  227,  396,  227,  227,  227,  227,  227,  227,
      227,  227,  566,  566,  566,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      229,  230,  115,  115,  115,  115,  118,  118,  118,  118,
      122,  122,  122,  122,  188,  188,  188,  188,  253,  566,
      566,  253,  257,  257,  258,  258,  566,  258,  271,  271,
      271,  271,  317,  317,  317,  317,  253,  566,  566,  253,
      257,  257,  271,  271,  271,  271,  317,  317,  317,  317,
        9,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566
    } ;

static const flex_int16_t yy_chk[3525] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    3,    3,    4,    4,
        5,    6,    7,    8,   36,    7,    8,   11,   26,   11,
        5,    6,   65,   26,   36,    5,    6,   28,   28,   28,
       31,   31,   32,   32,   34,  111,  113,   50,   64,   64,

       64,   34,   34,   50,   65,   67,   34,   34,   76,   34,
       85,   34,  565,    7,    8,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
      214,   76,   85,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   47,   83,   47,   67,   78,   47,
       47,   47,   62,   62,   62,   62,   62,   70,   78,   80,
       81,   84,   88,   78,   70,  102,   83,   83,  126,  109,
      126,  102,   88,  197,  325,   80,   80,   80,  214,   81,
       99,   47,   99,   84,   84,   99,   99,   99,  137,  137,

      137,  205,  163,  561,  111,  163,  167,  167,  167,  185,
      185,  168,  185,  114,  192,  289,  113,  250,   16,   16,
       35,   35,   35,   86,  205,  168,  289,   99,  325,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,  109,  168,  213,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   86,  192,
      169,  209,  169,  169,  169,   86,   86,  183,  183,  183,
       86,   86,  210,   86,  169,   86,  114,  114,  114,  114,
      114,  184,  184,  184,  184,  186,  190,  190,  190,  186,

      186,  202,  219,  197,  169,  230,  228,  213,  215,  228,
      211,  212,  232,  251,  560,  248,  252,  202,  202,  202,
      249,  250,  250,  209,  250,  260,  260,  282,  232,  232,
      232,  282,   35,   35,   44,   44,   44,  210,  284,  292,
      292,  292,  284,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,  211,  212,
      215,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,  125,  233,  234,  252,  234,  234,  234,  308,
      312,  301,  283,  299,  286,  125,  125,  233,  234,  248,

      248,  248,  283,  286,  249,  249,  249,  249,  296,  290,
      251,  299,  301,  297,  251,  251,  298,  233,  234,  296,
      125,  300,  219,  290,  297,  230,  365,  298,  362,  316,
      431,  300,  354,  354,  125,  308,  559,  362,  365,  125,
      367,  367,  368,  290,  431,  368,   44,   44,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   68,  451,
      312,  556,  322,  460,  291,  451,  291,  291,  291,  321,
      374,  374,  374,  323,  293,  460,  293,  326,  291,  293,
      293,  293,  324,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,  291,  316,
      293,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,  294,  320,  294,  322,  321,  294,  294,  294,
      295,  323,  295,  295,  295,  324,  369,  326,  338,  383,
      372,  382,  379,  336,  295,  337,  377,  428,  294,  379,

      382,  385,  380,  295,  338,  338,  338,  336,  369,  337,
      372,  337,  337,  337,  295,  396,  396,  377,  428,  461,
      320,  336,  339,  337,  339,  380,  554,  339,  339,  339,
      341,  461,  341,  341,  341,  384,   68,   68,   87,   87,
       87,  336,  383,  337,  341,  386,  553,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,  385,  387,  341,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,  340,  384,  340,  388,
      423,  340,  340,  340,  370,  389,  370,  386,  390,  370,

      370,  370,  371,  472,  371,  371,  371,  373,  373,  373,
      376,  376,  376,  423,  435,  397,  371,  387,  397,  373,
      405,  405,  405,  421,  552,  550,  421,  399,  401,  422,
      402,  376,  422,  425,  425,  425,  371,  388,  399,  373,
      399,  389,  434,  399,  399,  399,  402,  402,  402,  390,
       87,   87,   96,   96,   96,  433,  401,  546,  402,  472,
      435,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  401,  432,  402,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

      400,  436,  434,  403,  427,  427,  427,  430,  437,  438,
      426,  426,  426,  433,  400,  429,  400,  400,  400,  403,
      403,  403,  426,  430,  429,  427,  439,  442,  400,  430,
      442,  443,  465,  446,  443,  448,  448,  448,  432,  463,
      463,  463,  426,  447,  464,  466,  465,  467,  400,  446,
      446,  446,  469,  470,  473,  464,  476,  438,  480,  447,
      447,  447,  436,  466,   96,   96,  112,  437,  477,  478,
      467,  447,  490,  492,  480,  480,  480,  491,  494,  496,
      477,  478,  495,  492,  490,  439,  497,  499,  514,  491,
      501,  447,  495,  502,  529,  515,  530,  539,  540,  469,

      494,  470,  501,  549,  529,  502,  515,  557,  539,  545,
      544,  514,  538,  476,  473,  537,  536,  530,  535,  540,
      534,  528,  527,  526,  549,  525,  524,  496,  557,  522,
      521,  499,  497,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  128,  128,  128,  498,  500,  517,  519,

      520,  531,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  532,  533,  541,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  500,  542,  543,  519,  551,  520,  558,  562,  518,
      516,  498,  513,  531,  512,  511,  510,  509,  517,  507,
      506,  505,  503,  493,  489,  488,  533,  487,  486,  484,
      532,  483,  482,  481,  475,  541,  474,  471,  468,  462,
      459,  456,  455,  453,  452,  450,  449,  445,  444,  420,
      542,  558,  419,  418,  417,  416,  415,  414,  413,  412,

      551,  562,  543,  411,  409,  128,  128,  129,  129,  129,
      408,  406,  398,  394,  391,  381,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  378,  375,  366,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  364,  363,  361,  360,  359,
      358,  357,  356,  355,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  335,  334,  332,  330,
      329,  328,  327,  319,  317,  288,  285,  280,  279,  278,
      277,  276,  275,  274,  271,  270,  266,  254,  245,  244,

      243,  242,  241,  237,  236,  235,  231,  225,  224,  223,
      222,  221,  220,  208,  207,  206,  204,  203,  201,  129,
      129,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  161,  161,  161,  200,  199,  198,  191,  188,  187,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  178,  177,  176,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  172,
      171,  170,  166,  165,  160,  159,  158,  157,  156,  155,

      154,  150,  149,  148,  147,  146,  145,  144,  140,  136,
      132,  121,  120,  116,  110,  108,  106,  105,  104,  103,
      101,  100,   97,   95,   94,   92,   91,   90,   89,   82,
       79,   77,   75,   74,   73,   72,   71,   69,   66,   63,
       61,   59,   57,   54,   53,   52,   51,   49,   48,   45,
       40,   39,   38,  161,  161,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  193,  193,  193,   37,   33,
       29,   24,   18,   13,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,    9,
        0,    0,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  193,  193,  194,
      194,  194,    0,    0,    0,    0,    0,    0,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,    0,    0,    0,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  194,  194,  196,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      226,  226,  226,    0,    0,    0,    0,    0,    0,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,    0,    0,    0,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  226,  226,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  263,  263,  263,    0,    0,    0,
        0,    0,    0,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,    0,    0,
        0,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  263,  263,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  267,  267,
      267,    0,    0,    0,    0,    0,    0,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  267,    0,    0,    0,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      267,  267,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  281,  281,  281,    0,    0,    0,    0,    0,
        0,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,    0,    0,    0,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  281,  281,  287,  287,  287,    0,
        0,    0,    0,    0,    0,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
        0,    0,    0,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  287,  287,
      309,  309,  309,    0,    0,    0,    0,    0,    0,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,    0,    0,    0,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  309,  309,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  313,  313,  313,    0,    0,    0,
        0,    0,    0,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,    0,    0,
        0,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,

      313,  313,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  313,  313,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  333,  333,
      333,    0,    0,    0,    0,    0,    0,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,    0,    0,    0,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      333,  333,  567,  567,  567,  567,  568,  568,  568,  568,
      569,  569,  569,  569,  570,  570,  570,  570,  571,    0,
        0,  571,  572,  572,  573,  573,    0,  573,  574,  574,
      574,  574,  575,  575,  575,  575,  576,    0,    0,  576,
      577,  577,  578,  578,  578,  578,  579,  579,  579,  579,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[100] =
    {   0,
0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
        };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/ruleslex.l"
#line 2 "src/ruleslex.l"
/* **************************************************
 *
 * ELVEX
 *
 * Copyright 2014-2023 LABRI, 
 * CNRS (UMR 5800), the University of Bordeaux,
 * and the Bordeaux INP
 *
 * Author: 
 * Lionel Clément
 * LaBRI - Université Bordeaux  
 * 351, cours de la Libération
 * 33405 Talence Cedex - France
 * lionel.clement@u-bordeaux.fr
 * 
 * This file is part of ELVEX.
 *
 ************************************************** */

#include <iostream>
#include <bitset>
#include <string>
#include <sstream>
#include "parser.hpp"
#include "rulesyacc.hpp"
#include "messages.hpp"
#include "parser_exception.hpp"

#define YY_NO_INPUT

#ifndef DEBUGLEX
#define DEBUGLEX(x)
#else
#define DEBUGLEX(x)x
#endif

#define DBUGPRT(x) DEBUGLEX({std::cerr << "*** " << x << std::endl;})
#define DBUGPRTARG(x,s) DEBUGLEX({std::cerr << "*** " << x << ' ' << s << std::endl;})
  
  extern char *lexString;
  extern bool stringInput;
  extern Parser parser;
  
  int comments;
  std::stringstream strbuf;

  void init_buffer(){
    ruleslineno = 1;
  }
  
  void push_buffer() {
    yypush_buffer_state(yy_create_buffer( yyin, YY_BUF_SIZE ));
 }

  void delete_buffer() {
    yy_delete_buffer(YY_CURRENT_BUFFER);
  }
  
  void scan_string(std::string str) {
    yy_scan_string(str.c_str());
  }

#line 1852 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

#line 1854 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

#define INITIAL 0
#define INCLUDE 1
#define COMMENT 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 89 "src/ruleslex.l"


#line 2084 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 567 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3391 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];

goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */

		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 91 "src/ruleslex.l"
{
	DBUGPRTARG("••••••••••••••• ", yytext);
	REJECT;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 96 "src/ruleslex.l"
{
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "src/ruleslex.l"
{comments=0; BEGIN COMMENT;}
	YY_BREAK

case 4:
YY_RULE_SETUP
#line 101 "src/ruleslex.l"
{comments++;}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 102 "src/ruleslex.l"
{}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 103 "src/ruleslex.l"
{if (!(comments--)) BEGIN INITIAL;} 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 104 "src/ruleslex.l"
{}
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 107 "src/ruleslex.l"
{BEGIN INCLUDE;}
	YY_BREAK

case 9:
YY_RULE_SETUP
#line 109 "src/ruleslex.l"
{}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 110 "src/ruleslex.l"
{
	  DBUGPRT("TOKEN #INCLUDE");
	  parser.pushBufferName(yytext);
	  parser.pushLineno(ruleslineno);
	  ruleslineno = 1;
	  if (parser.getVerbose()) {
	    std::cerr << "open " << yytext << std::endl;
	  }
	  yyin = fopen( yytext, "r" );
	  if ( ! yyin ){
	    throw fatal_exception("can't open " + std::string(yytext));
	  }
	  push_buffer();
	  BEGIN INITIAL;
	}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 125 "src/ruleslex.l"
{}
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 128 "src/ruleslex.l"
{
  BEGIN STRING; 
  strbuf.str( std::string() );
  strbuf.clear(); 
  }
	YY_BREAK

case 13:
YY_RULE_SETUP
#line 135 "src/ruleslex.l"
{ strbuf << yytext; }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 136 "src/ruleslex.l"
{ strbuf << '\n'; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 137 "src/ruleslex.l"
{ strbuf << '\n'; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "src/ruleslex.l"
{ strbuf << '\t'; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 139 "src/ruleslex.l"
{ strbuf << strtol(yytext+1, 0, 8); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "src/ruleslex.l"
{ strbuf << yytext[1]; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "src/ruleslex.l"
{ 
    ruleslval.string_slot = new std::string(strbuf.str());
    BEGIN INITIAL; 
    DBUGPRTARG("TOKEN_STRING ", strbuf.str());
    strbuf.clear(); 
    return TOKEN_STRING;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 147 "src/ruleslex.l"
{ throw parser_exception("*** error: bogus escape '" + std::string(yytext) + "' in string"); }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 148 "src/ruleslex.l"
{ throw parser_exception("*** error: newline in string"); }
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INCLUDE):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STRING):
#line 151 "src/ruleslex.l"
{
  yypop_buffer_state();
  if ( !YY_CURRENT_BUFFER ) {
    throw parser_exception("can't close current buffer");
    yyterminate();
  }
  else {
    if (parser.getVerbose()) {
      std::cerr << "close " << parser.getTopBufferName() << std::endl;
    }
    parser.popBufferName();
    ruleslineno = parser.popLineno();
  }
}
	YY_BREAK

case 22:
YY_RULE_SETUP
#line 167 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RIGHTARROW");
    return TOKEN_RIGHTARROW;
  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 172 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_UPARROW");
    return TOKEN_UPARROW;
  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 177 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_UP2ARROW");
    return TOKEN_UP2ARROW;
  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 182 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DOWNARROW");
    ruleslval.integer_slot = 1;
    return TOKEN_DOWNARROW;
  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 188 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DOWN2ARROW");
    return TOKEN_DOWN2ARROW;
  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 193 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LT");
    return TOKEN_LT;
  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 198 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_GT");
    return TOKEN_GT;
  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 203 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LE");
    return TOKEN_LT;
  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 208 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_GE");
    return TOKEN_GE;
  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 213 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LPAR");
    return TOKEN_LPAR;
  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 218 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RPAR");
    return TOKEN_RPAR;
  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 223 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LBRACKET");
    return TOKEN_LBRACKET;
  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 228 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RBRACKET");
    return TOKEN_RBRACKET;
  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 233 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LBRACE");
    return TOKEN_LBRACE;
  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 238 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RBRACE");
    return TOKEN_RBRACE;
  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 243 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_SEMI");
    return TOKEN_SEMI;
  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_CONS");
    return TOKEN_CONS;
  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 253 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_COLON");
    return TOKEN_COLON;
  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 258 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DOT");
    return TOKEN_DOT;
  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 263 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DASH");
    return TOKEN_DASH;
  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 268 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_UNIFY");
    return TOKEN_UNIFY;
  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 273 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_SUBSUME");
    return TOKEN_SUBSUME;
  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 278 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_EQUAL");
    return TOKEN_EQUAL;
  }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 283 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_ASSIGNMENT");
    return TOKEN_ASSIGNMENT;
  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 288 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DIFF");
    return TOKEN_DIFF;
  }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 293 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PLUS");
    return TOKEN_PLUS;
  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 298 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_MINUS");
    return TOKEN_MINUS;
  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 303 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_TIMES");
    return TOKEN_TIMES;
  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 308 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DIVIDE");
    return TOKEN_DIVIDE;
  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 313 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_AROBASE");
    return TOKEN_AROBASE;
  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 318 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_INPUT");
    return TOKEN_INPUT;
  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 323 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RULES");
    return TOKEN_RULES;
  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 328 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LEXICON");
    return TOKEN_LEXICON;
  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 333 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_TRACE");
    return TOKEN_TRACE;
  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 338 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_WITH_SPACES");
    return TOKEN_WITH_SPACES;
  }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 343 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_BIDIRECTIONAL");
    return TOKEN_BIDIRECTIONAL;
  }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 348 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PERMUTABLE");
    return TOKEN_PERMUTABLE;
  }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 353 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_ATTEST");
    return TOKEN_ATTEST;
  }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 358 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_IF");
    return TOKEN_IF;
  }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 363 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_ELSE");
    return TOKEN_ELSE;
  }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 368 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DEFERRED");
    return TOKEN_DEFERRED;
  }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 373 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PRINT");
    return TOKEN_PRINT;
  }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 378 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PRINTLN");
    return TOKEN_PRINTLN;
  }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 383 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PRINTSTDERR");
    return TOKEN_PRINTSTDERR;
  }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 388 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PRINTLNSTDERR");
    return TOKEN_PRINTLNSTDERR;
  }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 393 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_SEARCH");
    return TOKEN_SEARCH;
  }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 398 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_RAND");
    return TOKEN_RAND;
  }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 403 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_FOREACH");
    return TOKEN_FOREACH;
  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 408 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_IN");
    return TOKEN_IN;
  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 413 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_ON");
    return TOKEN_ON;
  }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 418 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PIPE");
    return TOKEN_PIPE;
  }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 423 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_OR");
    return TOKEN_OR;
  }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 428 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_AND");
    return TOKEN_AND;
  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 433 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_IMPLICATION");
    return TOKEN_IMPLICATION;
  }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 438 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_EQUIV");
    return TOKEN_EQUIV;
  }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 443 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_NOT");
    return TOKEN_NOT;
  }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 448 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_COMMA");
    return TOKEN_COMMA;
  }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 453 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_DASH");
    return TOKEN_DASH;
  }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 458 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_PLUS");
    return TOKEN_PLUS;
  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 463 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_MINUS");
    return TOKEN_MINUS;
  }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 468 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_MODULO");
    return TOKEN_MODULO;
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 473 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_HEAD");
    return TOKEN_HEAD;
  }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 478 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_LEMMA");
    return TOKEN_LEMMA;
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 483 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_FORM");
    return TOKEN_FORM;
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 488 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_TRUE");
    return TOKEN_TRUE;
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 493 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_FALSE");
    return TOKEN_FALSE;
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 498 "src/ruleslex.l"
{
    DBUGPRT("TOKEN_NILL");
    return TOKEN_NIL;
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 503 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_STRING ", yytext);
    //ruleslval.integer_slot = yylineno;
    ruleslval.string_slot = new std::string(std::to_string(yylineno));
    return TOKEN_STRING;
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 510 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_STRING ", yytext);
    ruleslval.string_slot = new std::string(parser.getTopBufferName());
    return TOKEN_STRING;
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 516 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_IDENTIFIER ", yytext);
    ruleslval.string_slot = new std::string(yytext);
    return TOKEN_IDENTIFIER;
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 522 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_VARIABLE ", yytext);
    ruleslval.string_slot = new std::string(yytext);
    return TOKEN_VARIABLE;
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 528 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_ANONYMOUS ", yytext);
    return TOKEN_ANONYMOUS;
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 533 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_INTEGER ", yytext);
    sscanf(yytext, "%d", &ruleslval.integer_slot);
    return TOKEN_INTEGER;
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 539 "src/ruleslex.l"
{
    DBUGPRTARG("TOKEN_DOUBLE ", yytext);
    sscanf(yytext+1, "%lf", &ruleslval.double_slot);
    return TOKEN_DOUBLE;
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 545 "src/ruleslex.l"
{}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 547 "src/ruleslex.l"
{}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 549 "src/ruleslex.l"
{
    DBUGPRTARG("OTHER TOKEN ", yytext);
    return (*yytext);
  }
	YY_BREAK

case 99:
YY_RULE_SETUP
#line 555 "src/ruleslex.l"
ECHO;
	YY_BREAK
#line 2950 "/Users/clement/workspace/Elvex/src/ruleslex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 567 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 567 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 566);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 555 "src/ruleslex.l"


