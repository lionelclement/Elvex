// from pdp-meteo.grammar
#include pdp-meteo.illocution.grammar

/* **************************************************
 *  * Cause, reason
 * en effet, effectivement
 * à cause de, pour, par, grâce à, du fait de, en raison de
 * car
 * parce que, du fait que, comme, sachant que, puisque, comme, vu que, étant donné que
 *
 * 
 *  * consequence, effect
 * finalement, bref, ainsi, c’est pourquoi
 * donc, et
 * de sorte que, si bien que, si…que, tant…que, tellement…que, au point que
 * 
 * 
 * * but
 * pour, afin de, dans l’idée de, en vue de
 * pour que, afin que, de façon que, de peur que
 * 
 * * opposition ou concession
 * pourtant, cependant néanmoins, toutefois, certes, en revanche, au contraire, malgré tout
 * malgré, en dépit de
 * mais, or
 * bien que, quoique, alors que, même si
 * 
 * 
 * comparaison
 * comme, ainsi
 * ainsi que, comme, tel que
 * 
 * 
 * * hypothèse ou condition
 * en cas de
 * si, à condition que, pourvu que
 * 
 * 
 * * addition
 * d’abord, premièrement, de plus, en outre, mais encore, aussi, ensuite
 * et
 * 
 * 
 ************************************************** */

/* **************************************************
 * Default
 ************************************************** */
@trace
rhetoricalStructure → illocutionaryAct {
  // print __FILE__ ; print " (" ; print __LINE__ ; println ")";
  // println ↑;
  [rhet:NIL, $rest];
  ↓1 = $rest;
  ⇑ = ⇓1;
}

/* **************************************************
 * Cause
 ************************************************** */
/* **************************************************
 * Je prends mon parapluie parce qu'il pleut.
 ************************************************** */
@trace
rhetoricalStructure → form conclusion parce_que | du_fait_que | comma premise dot form {
  [rhet:cause, i:$I, ii:$II, $rest];
  [language_register:familiar|slang] ⊂ ↑;
  //↓1 = [FORM:"<VP line="+__LINE__+">"];
  //↓6 = [FORM:"</VP>"];
  ↓1 = [FORM:" "];
  ↓6 = [FORM:" "];
  ↓3 = [];
  ↓5 = [];
  // Coréférence
  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;
  [ii:[i:[idref:$ID_II_I]]] ⊂ ↑;
  [ii:[ii:[idref:$ID_II_II]]] ⊂ ↑;
  attest ($ID_I_I ⇒ (($ID_I_I ≠ $ID_II_I) ∧ ($ID_I_I ≠ $ID_II_II)));
  attest ($ID_I_II ⇒ (($ID_I_II ≠ $ID_II_I) ∧ ($ID_I_II ≠ $ID_II_II)));

  [modSType:$modSType, modS:$modS, language_register:$language_register, mode:$mode, tense:$tense, aspect:$aspect] ⊂ $rest;
  [modality:$modalityI, illocutionary:$illocutionaryI] ⊂ $I;
  if (¬ $modalityI) 
    $modalityI = default;
  if (¬ $illocutionaryI)
    $illocutionaryI = default;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
  if (¬ $modalityII)
    $modalityII = default;
  if (¬ $illocutionaryII)
    $illocutionaryII = default;

  if (¬ $mode)
    $mode = indicative;
  
  ↓2 = $II ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register, modSType:$modSType, modS:$modS];
  ↓4 = $I ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register];
}

/* **************************************************
 * Je prends mon parapluie parce qu'il pleut.
 ************************************************** */
@trace
rhetoricalStructure → form du_fait_que premise comma conclusion dot form {
  [rhet:cause, i:$I, ii:$II, $rest];
  [language_register:familiar|slang] ⊂ ↑;
  //↓1 = [FORM:"<VP line="+__LINE__+">"];
  //↓7 = [FORM:"</VP>"];
  ↓1 = [FORM:" "];
  ↓7 = [FORM:" "];
  ↓2 = [];
  ↓4 = [];
  ↓6 = [];
  // Coréférence
  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;
  [ii:[i:[idref:$ID_II_I]]] ⊂ ↑;
  [ii:[ii:[idref:$ID_II_II]]] ⊂ ↑;
  attest ($ID_I_I ⇒ (($ID_I_I ≠ $ID_II_I) ∧ ($ID_I_I ≠ $ID_II_II)));
  attest ($ID_I_II ⇒ (($ID_I_II ≠ $ID_II_I) ∧ ($ID_I_II ≠ $ID_II_II)));

  [modSType:$modSType, modS:$modS, language_register:$language_register, mode:$mode, tense:$tense, aspect:$aspect] ⊂ $rest;
  [modality:$modalityI, illocutionary:$illocutionaryI] ⊂ $I;
  if (¬ $modalityI) 
    $modalityI = default;
  if (¬ $illocutionaryI)
    $illocutionaryI = default;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
  if (¬ $modalityII)
    $modalityII = default;
  if (¬ $illocutionaryII)
    $illocutionaryII = default;

  if (¬ $mode)
    $mode = indicative;
  
  ↓3 = $I ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register, modSType:$modSType, modS:$modS];
  ↓5 = $II ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];
}

/* **************************************************
 * Cause
 ************************************************** */
@trace
rhetoricalStructure → form premise conclusion dot form {
  [rhet:cause, i:$I, ii:$II, $rest];
  [language_register:default] ⊂ ↑;
  ↓1 = [FORM:"<VP line="+__LINE__+">"];
  ↓5 = [FORM:"</VP>"];
  //↓1 = [FORM:" "];
  //↓5 = [FORM:" "];
  ↓4 = [];
  
  // Coréférence
  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;
  [ii:[i:[idref:$ID_II_I]]] ⊂ ↑;
  [ii:[ii:[idref:$ID_II_II]]] ⊂ ↑;
  attest ($ID_I_I ⇒ (($ID_I_I ≠ $ID_II_I) ∧ ($ID_I_I ≠ $ID_II_II)));
  attest ($ID_I_II ⇒ (($ID_I_II ≠ $ID_II_I) ∧ ($ID_I_II ≠ $ID_II_II)));

  [modSType:$modSType, modS:$modS, language_register:$language_register, mode:$mode, tense:$tense, aspect:$aspect] ⊂ $rest;
  [modality:$modalityI, illocutionary:$illocutionaryI] ⊂ $I;
  if (¬ $modalityI) 
    $modalityI = default;
  if (¬ $illocutionaryI)
    $illocutionaryI = default;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
  if (¬ $modalityII)
    $modalityII = default;
  if (¬ $illocutionaryII)
    $illocutionaryII = default;


  if (($language_register == slang) ∧ ($illocutionaryII ≠ ask)) {
     ↓3 = [];
     attest (#3);
  }

  if (¬ $mode)
    $mode = indicative;
  
  ↓2 = $I ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register, modSType:$modSType, modS:$modS];
  ↓3 = $II ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];
}

/* **************************************************
 * Cause
 ************************************************** */
@trace
rhetoricalStructure → form premise [parce_que] conclusion form {
  [rhet:cause, i:[i:[id:$ID]], ii:[i:[idref:$ID]], $rest];
  ↓1 = [FORM:"<VP line="+__LINE__+">"];
  ↓5 = [FORM:"</VP>"];
  //↓1 = [FORM:" "];
  //↓5 = [FORM:" "];
  // Coréférence i:[i] avec ii:[i]
  [i:$I, ii:$II] ⊂ ↑;
  [i:[i:$I_I], ii:[i:$II_I, $II_rest]] ⊂ ↑;

  [modSType:$modSType, modS:$modS, language_register:$language_register, mode:$mode, tense:$tense, aspect:$aspect] ⊂ ↑;
  [modality:$modalityI, illocutionary:$illocutionaryI] ⊂ $I;
  if (¬ $modalityI) 
    $modalityI = default;
  if (¬ $illocutionaryI)
    $illocutionaryI = default;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
  if (¬ $modalityII)
    $modalityII = default;
  if (¬ $illocutionaryII)
    $illocutionaryII = default;

  if (($language_register == slang) ∧ ($illocutionaryII ≠ ask)) {
     ↓3 = [];
     attest (#3);
  }

  ↓2 = $I ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register, modSType:$modSType, modS:$modS];
  [i:$I_ISynt] ⊂ ⇓2;

   [PRED:$I_IPred, def:$I_ID, gender:$I_IG, number:$I_IN, person:$I_IP] ⊂ $I_ISynt;
   //[def:$II_ID, gender:$II_IG, number:$II_IN, person:$II_IP] ⊂ $II_I;
   // indéfinie => hypéronyme défini
   // Le garagiste a changé les pneus du camion. Il l'a réparé.
   // Un garagiste a changé les pneus du camion. L'homme l'a réparé.
   // vrai sur deux phrases
   //if ($I_ID == no){
   //$II_Inh = [i:[PRED:$I_IPred, gender:$I_IG, number:$I_IN, def:yes, sem:hyper], vform:tensed, $II_rest];
   //}
   //else {
     $II_Inh = [i:[PRED:__pro, gender:$I_IG, number:$I_IN, person:$I_IP], vform:tensed, $II_rest];
     //}
   ↓4 = $II_Inh ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];
}

/* **************************************************
 * Si aujourd'hui tu gagnais... 
 * Si hier tu avais gagné... 
 * Si demain tu gagnais... 
 ************************************************** */
@trace
premise → form si modalClause form {
  //↓1 = [FORM:"<VP line="+__LINE__+">"];
  //↓4 = [FORM:"</VP>"];
  ↓1 = [FORM:" "];
  ↓4 = [FORM:" "];
  [language_register:default] ⊂ ↑;
  [modSType:$modSType, modS:$modS, language_register:$language_register, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  $mode = indicative;
  if (¬ $aspect)
     $aspect = default;
  [modality:$modalityI] ⊂ ↑;
  if (¬ $tense ∨ ($tense == present)) { 
    if ($aspect == continuous) {
      $tense = present;
    }
    else {
      $tense = present;
    }
  }
  else if ($tense == past) { 
    if ($aspect == continuous) {
      $mode = indicative; $tense = past;
    }
    else {
      $mode = indicative; $tense = past; $aspect = pluperfect;
    }
  }
  else if ($tense == future) { 
    if ($aspect == continuous) {
      $mode = indicative; $tense = past;
    }
    else {
      $mode = indicative; $tense = past; $aspect = imperfect;
    }
  }
  
  [modality:$modality] ⊂ ↑;
  if (¬ $modality) 
    $modality = default;
  ↓2 = [];
  ↓3 = $rest ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:default, modality:$modality, language_register:$language_register, modSType:$modSType, modS:$modS];
  ⇑ = ⇓3;
}

/* **************************************************
 * je gagnerais
 ************************************************** */
@trace
premise → form modalClause form {
  //↓1 = [FORM:"<VP line="+__LINE__+">"];
  //↓3 = [FORM:"</VP>"];
  ↓1 = [FORM:" "];
  ↓3 = [FORM:" "];
  [language_register:familiar|slang];
  [modSType:$modSType, modS:$modS, language_register:$language_register, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  if (¬ $aspect)
     $aspect = default;
  [modality:$modality] ⊂ ↑;
  if (¬ $tense ∨ ($tense == present) ∨ ($tense == future)) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense = present; $aspect = continuous;
    }
    else {
      $mode = conditional; $tense = present;
    }
  }
  else if ($tense == past) { 
    if ($aspect == continuous) {
      print __FILE__; print "("; print __LINE__; println ")";
      println "à faire: deux auxiliaires (aurait été en train de)";
      $mode = conditional; $tense = past; $aspect = continuous;
    }
    else {
      $mode = conditional; $tense = past; $aspect = pluperfect;
    }
  }
  
  if (¬ $modality) 
    $modality = default;
  ↓2 = $rest ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:default, modality:$modality, language_register:$language_register, modSType:$modSType, modS:$modS];
  ⇑ = ⇓2;
  
}

/* **************************************************
 * Si aujourd'hui tu gagnes... tu remporteras le pactole
 * Si hier tu avais gagné... tu aurais remporté le pactole
 * Si demain tu gagnais... tu remporterais le pactole

 * Si aujourd'hui le garagiste répare ta voiture... tu pourras aller à la campagne.
 * Si aujourd'hui le garagiste répare ta voiture... elle pourra démarer.
 * Si hier tu avais gagné... tu aurais remporté le pactole
 * Si demain tu gagnais... tu remporterais le pactole

 ************************************************** */
@trace
conclusion → form modalClause form {
  //↓1 = [FORM:"<VP line="+__LINE__+">"];
  //↓3 = [FORM:"</VP>"];
  ↓1 = [FORM:" "];
  ↓3 = [FORM:" "];
  [language_register:default] ⊂ ↑;
  [language_register:$language_register, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  if (¬ $aspect)
     $aspect = default;
  if (¬ $tense ∨ ($tense == present)) { 
    if ($aspect == continuous) {
      $mode = indicative; $tense  = future; $aspect = default;
    }
    else {
      $mode = indicative; $tense = future;
      //$mode = conditional; $tense = present;
    }
  }
  else if ($tense == past) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense  = past;
    }
    else {
      $mode = conditional; $tense  = past;
    }
  }
  else if ($tense == future) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense  = present;
    }
    else {
      $mode = conditional; $tense  = present; $aspect = default;
    }
  }
  
  [modality:$modality, illocutionary:$illocutionary] ⊂ ↑;
  if (¬ $modality)
    $modality = default;
  if (¬ $illocutionary)
    $illocutionary = default;
  
  ↓2 = [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionary, modality:$modality, language_register:$language_register, $rest];
  
}

/* **************************************************
 * Je gagnerais le pactole
 ************************************************** */
@trace
conclusion → form modalClause form {
  //↓1 = [FORM:"<VP line="+__LINE__+">"];
  //↓3 = [FORM:"</VP>"];
  ↓1 = [FORM:" "];
  ↓3 = [FORM:" "];
  [language_register:familiar|slang];
  [language_register:$language_register, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  if (¬ $tense ∨ ($tense == present)) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense  = present; $aspect = default;
    }
    else {
      $mode = conditional; $tense = present;
    }
  }
  else if ($tense == past) { 
    if ($aspect == continuous) {
      print __FILE__; print "("; print __LINE__; println ")";
      println "à faire: deux auxiliaires (aurait été en train de)";
      $mode = conditional; $tense  = past; $aspect = default;
    }
    else {
      $mode = conditional; $tense  = past;
    }
  }
  else if ($tense == future) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense  = present; $aspect = default;
    }
    else {
      $mode = conditional; $tense  = present; $aspect = default;
    }
  }
  
  [modality:$modality, illocutionary:$illocutionary] ⊂ ↑;
  if (¬ $modality)
    $modality = default;
  if (¬ $illocutionary)
    $illocutionary = default;
  
  ↓2 = $rest ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionary, modality:$modality, language_register:$language_register];
  
}

/* **************************************************
 * succession
 ************************************************** */
@trace
rhetoricalStructure → modalClause et illocutionaryAct {
  [PRED:et, i:$I, ii:$II];
  [vform:$vform, mode:$mode, illocutionary:$illocutionary, modality:$modality] ⊂ ↑;
  if (¬ $mode)
    $mode = indicative;
  if (¬ $vform)
    $vform = tensed;
  ↓1 = $I ∪ [vform:$vform, mode:$mode, illocutionary:$illocutionary, modality:$modality];
  ↓2 = [];
  ↓3 = $II ∪ [vform:$vform, mode:$mode, illocutionary:$illocutionary, modality:$modality];
}

// /* **************************************************
//  * Coréférence objet de la cause avec agent de l'effet
//  * Si j'avais brûlé la voiture, elle marcherait forcément moins bien.
//  * J'ai brûlé une voiture. Le véhicule marche forcément moins bien.
//  ************************************************** */
// @trace
// rhetoricalStructure → form premise conclusion form {
//   ↓1 = [FORM:"<VP line="+__LINE__+">"];
//   ↓4 = [FORM:"</VP>"];
//   //↓1 = [FORM:" "];
//   //↓4 = [FORM:" "];
//   [PRED:cause, i:[ii:[id:$ID]], ii:[i:[idref:$ID]], $rest];
//   [i:$I, ii:[i:_, $iiRest]] ⊂ ↑;
//   [ii:$II] ⊂ ↑;
//   $inhI = $I;
//   [i:$iSynt, ii:$iiSynt] ⊂ ⇓2;

//   [modSType:$modSType, modS:$modS, language_register:$language_register, mode:$mode, tense:$tense, aspect:$aspect] ⊂ ↑;
//   if (¬ $aspect)
//      $aspect = default;
//   [modality:$modalityI] ⊂ $I;
//   if (¬ $modalityI) 
//     $modalityI = default;
//   [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;
//   if (¬ $modalityII)
//     $modalityII = default;
//   if (¬ $illocutionaryII)
//     $illocutionaryII = default;

//   [PRED:$pred, def:$iiD, gender:$iiG, number:$iiN, person:$iiP] ⊂ $iiSynt;
//   [gender:$iG, number:$iN, person:$iP] ⊂ $iSynt;
//   // indéfinie => hypéronyme défini
//   if ($iiD == no){
//     $inhII = [i:[PRED:$pred, gender:$iiG, number:$iiN, def:yes, sem:hyper], vform:tensed, $iiRest];
//   }
//   else if ($iN ≠ $iiN ∨ $iG ≠ $iiG)
//     $inhII = [i:[PRED:__pro, gender:$iiG, number:$iiN, person:$iiP], vform:tensed, $iiRest];
//   else 
//     $inhII = [i:[PRED:celui_ci, gender:$iiG, number:$iiN, person:$iiP, dem:yes], vform:tensed, $iiRest];
//   ↓2 = $inhI ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:default, modality:$modalityI, language_register:$language_register, modSType:$modSType, modS:$modS];
//   ↓3 = $inhII ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];
// }

// /* **************************************************
//  * Coréférence objet de la cause avec agent de l'effet
//  * Si j'avais brûlé la voiture, elle marcherait forcément moins bien.
//  * J'ai brûlé une voiture. Le véhicule marche forcément moins bien.
//  ************************************************** */
// @trace
// rhetoricalStructure → illocutionaryAct illocutionaryAct {
//   [PRED:cause, i:[i:[id:$ID]], ii:[i:[idref:$ID]]];
//   [i:$I, ii:[i:_, $iiRest]] ⊂ ↑;
//   ↓1 = $I ∪ [vform:tensed];
//   [i:$iSynt] ⊂ ⇓1;

//   // On cherche la référence précédente
//   [PRED:$pred, def:$D, gender:$G, number:$N, person:$P, human:$H] ⊂ $iSynt;
  
//   // indéfinie => hypéronyme défini
//   if ($D == no){
//     if ($H == yes)
//       ↓2 = [i:[PRED:$pred, gender:$G, number:$N, def:yes, sem:hyper], vform:tensed, $iiRest];
//     else
//       ↓2 = [i:[PRED:$pred, number:$N, def:yes, sem:hyper], vform:tensed, $iiRest];
//   }
//   else
//     ↓2 = [i:[PRED:__pro, gender:$G, number:$N, person:$P], vform:tensed, $iiRest];
// }

// /* **************************************************
//  * Succession
//  ************************************************** */
// @trace
// rhetoricalStructure → timeClause comma form illocutionaryAct {
//   [PRED:succ, i:[ii:[id:$ID]], ii:[i:[idref:$ID]]];
//   [i:$I, ii:[i:_, $iiRest]] ⊂ ↑;
//   ↓1 = $I ∪ [vform:tensed];
//   [i:$iSynt, ii:$iiSynt] ⊂ ⇓1;

//   [PRED:$pred, def:$iiD, gender:$iiG, number:$iiN, person:$iiP] ⊂ $iiSynt;

//   [gender:$iG, number:$iN, person:$iP] ⊂ $iSynt;

//   ↓2 = [];
//   ↓3 = [FORM:"puis"];

//   // indéfinie => hypéronyme défini
//   if ($iiD == no)
//     ↓4 = [i:[PRED:$pred, gender:$iiG, number:$iiN, def:yes, sem:hyper], vform:tensed, $iiRest];
//   else if ($iN ≠ $iiN ∨ $iG ≠ $iiG)
//     ↓4 = [i:[PRED:__pro, gender:$iiG, number:$iiN, person:$iiP], vform:tensed, $iiRest];
//   else 
//     ↓4 = [i:[PRED:celui_ci, gender:$iiG, number:$iiN, person:$iiP, dem:yes], vform:tensed, $iiRest];
// }

// @trace
// rhetoricalStructure → timeClause comma form illocutionaryAct {
//   [PRED:succ, i:[i:[id:$ID]], ii:[i:[idref:$ID]]];
//   [i:$I, ii:[i:_, $iiRest]] ⊂ ↑;
//   ↓1 = $I ∪ [vform:tensed];
//   [i:$iSynt] ⊂ ⇓1;

//   // On cherche la référence précédente
//   [PRED:$pred, def:$D, gender:$G, number:$N, person:$P, human:$H] ⊂ $iSynt;
  
//   ↓2 = [];

//   ↓3 = [FORM:"puis"];

//   // indéfinie => hypéronyme défini
//   if ($D == no){
//     if ($H == yes)
//       ↓4 = [i:[PRED:$pred, gender:$G, number:$N, def:yes, sem:hyper], vform:tensed, $iiRest];
//     else
//       ↓4 = [i:[PRED:$pred, number:$N, def:yes, sem:hyper], vform:tensed, $iiRest];
//   }
//   else
//     ↓4 = [i:[PRED:__pro, gender:$G, number:$N, person:$P], vform:tensed, $iiRest];
// }

