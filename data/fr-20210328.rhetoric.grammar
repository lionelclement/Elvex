// from fr-20210328.grammar
#include fr-20210328.illocution.grammar

/* **************************************************
 *  * Cause, reason
 * en effet, effectivement
 * à cause de, pour, par, grâce à, du fait de, en raison de
 * car
 * parce que, du fait que, comme, sachant que, puisque, comme, vu que, étant donné que
 *
 * 
 *  * consequence, effect
 * finalement, bref, ainsi, c’est pourquoi
 * donc, et
 * de sorte que, si bien que, si…que, tant…que, tellement…que, au point que
 * 
 * 
 * * but
 * pour, afin de, dans l’idée de, en vue de
 * pour que, afin que, de façon que, de peur que
 * 
 * * opposition ou concession
 * pourtant, cependant néanmoins, toutefois, certes, en revanche, au contraire, malgré tout
 * malgré, en dépit de
 * mais, or
 * bien que, quoique, alors que, même si
 * 
 * 
 * comparaison
 * comme, ainsi
 * ainsi que, comme, tel que
 * 
 * 
 * * hypothèse ou condition
 * en cas de
 * si, à condition que, pourvu que
 * 
 * 
 * * addition
 * d’abord, premièrement, de plus, en outre, mais encore, aussi, ensuite
 * et
 * 
 * 
 ************************************************** */

/* **************************************************
 * Default
 ************************************************** */
@trace
rhetoricalStructure → rhetoricalStructureCont {
  //print __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  [PRED:$pred, $rest] ⊂ ↑;
  if (($pred ≠ cause) ∧ ($pred ≠ succ) ∧ ($pred ≠ conc) ∧ ($pred ≠ polite)){
    ↓1 = ↑;
  } else {
    ↓1 = [rhet:$pred, $rest];
  }
  ⇑ = ⇓1;
}

/* **************************************************
 * Default
 ************************************************** */
@trace
rhetoricalStructureCont → illocutionaryAct {
  //print __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  [rhet:NIL, $rest];
  ↓1 = $rest;
  ⇑ = ⇓1;
}

/* **************************************************
 * Cause
 ************************************************** */
/* **************************************************
 * Coreference with synonym or hyperonym
 ************************************************** */
@trace
rhetoricalStructureCont → premise_conclusion {
  //println __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  [rhet:cause, i:$I, ii:$II, $rest];

  // Coréférence
  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;
  [ii:[i:[id:$ID_II_I]]] ⊂ ↑;
  [ii:[ii:[id:$ID_II_II]]] ⊂ ↑;

  $isI_I = $ID_I_I && $ID_II_I && ($ID_I_I == $ID_II_I);
  $isII_I = $ID_I_II && $ID_II_I && ($ID_I_II == $ID_II_I);
  $isI_II = $ID_I_I && $ID_II_II && ($ID_I_I == $ID_II_II);
  $isII_II = $ID_I_II && $ID_II_II && ($ID_I_II == $ID_II_II);

  // objet principale coréfère avec sujet subordonnée
  if ($isII_I) {
    //println __FILE__ + " (" + __LINE__ + ")";
    [i:[ii:[PRED:$P_I_II, id:_, def:_, $Rest_I_II]]] ⊂ ↑;
    [ii:[i:[id:_], $Rest_II]] ⊂ ↑;
    $IIbis = [i:[PRED:$P_I_II, sem:syn|hyper, def:yes], $Rest_II];
    [i:[ii:$I_II, $Rest_I]] ⊂ ↑;
    $Ibis = [ii:[$I_II], $Rest_I];

    [ii:[i:[LEMMA:$lemma]]] ⊂ ⇓1;
    //attest ($lemma != $P_I_II);

    [i:[ii:[number:$NSynth_I_II]], ii:[i:[number:$NSynth_II_I]]] ⊂ ⇓1;
    attest ($NSynth_I_II == $NSynth_II_I);
  }

  // Sujets coréfèrent
  else if ($isI_I) {
    println __FILE__ + " (" + __LINE__ + ")";
  }

  // Sujet principale coréfère avec objet subordonnée
  else if ($isI_II) {
    println __FILE__ + " (" + __LINE__ + ")";
  }

  // Objet principale coréfère avec objet subordonnée
  else if ($isII_II) {
    println __FILE__ + " (" + __LINE__ + ")";
  }

  else {
    //println __FILE__ + " (" + __LINE__ + ")";
    //println [i:$Ibis, ii:$IIbis, $rest];
    $Ibis = $I;
    $IIbis = $II;
  }

  ↓1 = [i:$Ibis, ii:$IIbis, $rest];
}

/* **************************************************
 * Coreference with pronoun
 ************************************************** */
@trace
rhetoricalStructureCont → premise_conclusion {
  //print __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  [rhet:cause, i:$I, ii:$II, $rest];

  // Coréférence
  [i:[i:[id:$ID_I_I]]] ⊂ ↑;
  [i:[ii:[id:$ID_I_II]]] ⊂ ↑;
  [ii:[i:[id:$ID_II_I]]] ⊂ ↑;
  [ii:[ii:[id:$ID_II_II]]] ⊂ ↑;

  $isI_I = $ID_I_I && $ID_II_I && ($ID_I_I == $ID_II_I);
  $isII_I = $ID_I_II && $ID_II_I && ($ID_I_II == $ID_II_I);
  $isI_II = $ID_I_I && $ID_II_II && ($ID_I_I == $ID_II_II);
  $isII_II = $ID_I_II && $ID_II_II && ($ID_I_II == $ID_II_II);

  // objet principale coréfère avec sujet subordonnée
  if ($isII_I) {
    //println __FILE__ + " (" + __LINE__ + ")";
    [i:[ii:[PRED:$P_I_II, id:_, def:_, $Rest_I_II]]] ⊂ ↑;
    [ii:[i:[id:_], $Rest_II]] ⊂ ↑;
    [i:[ii:[number:$NSynth]]] ⊂ ⇓1;
    $IIbis = [i:[PRED:_pro], $Rest_II];
    [i:[ii:$I_II, $Rest_I]] ⊂ ↑;
    //$Ibis = [ii:[sem:default, $I_II], $Rest_I];
    $Ibis = [ii:[$I_II], $Rest_I];

    [i:[ii:[number:$NSynth_I_II, gender:$GSynth_I_II, person:$PSynth_I_II]],
        ii:[i:[number:$NSynth_II_I, gender:$GSynth_II_I, person:$PSynth_II_I]]] ⊂ ⇓1;
    attest ($NSynth_I_II == $NSynth_II_I);
    attest ($GSynth_I_II == $GSynth_II_I);
    attest ($PSynth_I_II == $PSynth_II_I);
  }

  // Sujets coréfèrent
  else if ($isI_I) {
    println __FILE__ + " (" + __LINE__ + ")";
  }

  // Sujet principale coréfère avec objet subordonnée
  else if ($isI_II) {
    println __FILE__ + " (" + __LINE__ + ")";
  }

  // Objet principale coréfère avec objet subordonnée
  else if ($isII_II) {
    println __FILE__ + " (" + __LINE__ + ")";
  }

  ↓1 = [i:$Ibis, ii:$IIbis, $rest];
}

/* **************************************************
 ************************************************** */
@trace
premise_conclusion → premise [dots] conclusion dot {
  //println __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  [i:$I, ii:$II, $rest];
  [language_register:$language_register, mode:$mode] ⊂ $rest;
  [modality:$modalityI, illocutionary:$illocutionaryI, time:$timeI] ⊂ $I;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;

  if (¬ $mode)
    $mode = indicative;

  if (#2) {
    ↓2 = [];
    [language_register:familiar|slang];
  } else {
    [language_register:NIL];
  }

  ↓1 = $I ∪ [vform:tensed, mode:$mode, time:$timeI, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register];
  ↓3 = $II ∪ [vform:tensed, mode:$mode, time:$timeI, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];
  ↓4 = [];
  $ISynth = ⇓1;
  $IISynth = ⇓3;
  ⇑ = [i:$ISynth, ii:$IISynth];
}

@trace
premise_conclusion → conclusion parce_que | du_fait_que premise dot {
  //println __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  [i:$I, ii:$II, $rest];
  [language_register:familiar|slang];
  [language_register:$language_register, mode:$mode] ⊂ $rest;
  [modality:$modalityI, illocutionary:$illocutionaryI, time:$timeI] ⊂ $I;
  [modality:$modalityII, illocutionary:$illocutionaryII] ⊂ $II;

  if (¬ $mode)
    $mode = indicative;

  ↓3 = $I ∪ [vform:tensed, mode:$mode, time:$timeI, illocutionary:$illocutionaryI, modality:$modalityI, language_register:$language_register];
  ↓1 = $II ∪ [vform:tensed, mode:$mode, time:$timeI, illocutionary:$illocutionaryII, modality:$modalityII, language_register:$language_register];
  ↓2 = [];
  ↓4 = [];
  $ISynth = ⇓3;
  $IISynth = ⇓1;
  ⇑ = [i:$ISynth, ii:$IISynth];
}

/* **************************************************
 * Si hier tu avais gagné...
 * Si aujourd'hui tu gagnais...
 * Si demain tu gagnais...
 ************************************************** */
@trace
premise → form si modalClause comma form {
  //print __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  //↓1 = [FORM:"<premise line="+__LINE__+">"];
  //↓5 = [FORM:"</premise>"];
  ↓1 = [FORM:""];
  ↓5 = [FORM:""];
  [language_register:default] ⊂ ↑;
  [modSType:$modSType, modS:$modS, language_register:$language_register, time:$time, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  $mode = indicative;
  if (¬ $aspect)
     $aspect = default;

  [modality:$modalityI] ⊂ ↑;

  if ($time == tomorrow) {
      $tense = present;
  }
  else if ($time == yesterday) {
    if ($aspect == continuous) {
      $mode = indicative; $tense = past;
    }
    else {
      $mode = indicative; $tense = past; $aspect = pluperfect;
    }
  }
  else if (¬ $tense ∨ ($tense == present)) {
    if ($aspect == continuous) {
      $tense = present;
    }
    else {
      $tense = present;
    }
  }
  else if ($tense == past) {
    if ($aspect == continuous) {
      $mode = indicative; $tense = past;
    }
    else {
      $mode = indicative; $tense = past; $aspect = pluperfect;
    }
  }
  else if ($tense == future) {
    if ($aspect == continuous) {
      $mode = indicative; $tense = past;
    }
    else {
      $mode = indicative; $tense = present;
    }
  }

  [modality:$modality] ⊂ ↑;
  ↓2 = [];
  ↓3 = $rest ∪ [vform:tensed, time:$time, mode:$mode, tense:$tense, aspect:$aspect, modality:$modality, language_register:$language_register, modSType:$modSType, modS:$modS];
  ↓4 = [];
  ⇑ = ⇓3;
}

/* **************************************************
 * slang
 * je gagnerais
 ************************************************** */
@trace
premise → form modalClause form {
  //print __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  ↓1 = [FORM:"<premise line="+__LINE__+">"];
  ↓3 = [FORM:"</premise>"];
  ↓1 = [FORM:""];
  ↓3 = [FORM:""];
  [language_register:familiar|slang];
  [modSType:$modSType, modS:$modS, language_register:$language_register, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  if (¬ $aspect)
     $aspect = default;
  [modality:$modality] ⊂ ↑;
  if (¬ $tense ∨ ($tense == present) ∨ ($tense == future)) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense = present; $aspect = continuous;
    }
    else {
      $mode = conditional; $tense = present;
    }
  }
  else if ($tense == past) { 
    if ($aspect == continuous) {
      print __FILE__; print "("; print __LINE__; println ")";
      println "à faire: deux auxiliaires (aurait été en train de)";
      $mode = conditional; $tense = past; $aspect = continuous;
    }
    else {
      $mode = conditional; $tense = past; $aspect = pluperfect;
    }
  }
  
  ↓2 = $rest ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, modality:$modality, language_register:$language_register, modSType:$modSType, modS:$modS];
  ⇑ = ⇓2;
  
}

/* **************************************************
 * Si hier tu avais gagné... tu aurais remporté le pactole
 * Si aujourd'hui tu gagnes... tu remporteras le pactole
 * Si aujourd'hui le garagiste répare ta voiture... tu pourras aller à la campagne.
 * Si aujourd'hui le garagiste répare ta voiture... elle pourra démarer.
 * Si demain tu gagnais... tu remporterais le pactole
 ************************************************** */
@trace
conclusion → form modalClause form {
  //println __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  //↓1 = [FORM:"<conclusion line="+__LINE__+">"];
  //↓3 = [FORM:"</conclusion>"];
  ↓1 = [FORM:""];
  ↓3 = [FORM:""];
  [language_register:default] ⊂ ↑;
  [language_register:$language_register, mode:$mode, aspect:$aspect, tense:$tense, aspect:$aspect, time:$time, $rest] ⊂ ↑;

  if ($time == yesterday) {
      $mode = conditional; $tense = past; $aspect = default;
     }
  else if ($time == today|now) {
      $mode = indicative; $tense = future;
     }
  else if ($time == tomorrow) {
      $mode = indicative; $tense = future;
     }

  else if ($tense == future) {
    if ($aspect == continuous) {
      $mode = conditional; $tense  = present;
    }
    else {
      $mode = conditional; $tense  = present; $aspect = default;
    }
  }

  [modality:$modality, illocutionary:$illocutionary] ⊂ ↑;

  ↓2 = [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionary, modality:$modality, language_register:$language_register, $rest];
  
  ⇑ = ⇓2;
}

/* **************************************************
 * slang
 * Je gagnerais le pactole
 ************************************************** */
@trace
conclusion → form modalClause form {
  //print __FILE__ + " (" + __LINE__ + ")";
  //println ↑;
  //↓1 = [FORM:"<conclusion line="+__LINE__+">"];
  //↓3 = [FORM:"</conclusion>"];
  ↓1 = [FORM:""];
  ↓3 = [FORM:""];
  [language_register:familiar|slang];
  [language_register:$language_register, tense:$tense, mode:$mode, aspect:$aspect, $rest] ⊂ ↑;
  if (¬ $tense ∨ ($tense == present)) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense  = present; $aspect = default;
    }
    else {
      $mode = conditional; $tense = present;
    }
  }
  else if ($tense == past) { 
    if ($aspect == continuous) {
      print __FILE__; print "("; print __LINE__; println ")";
      println "à faire: deux auxiliaires (aurait été en train de)";
      $mode = conditional; $tense  = past; $aspect = default;
    }
    else {
      $mode = conditional; $tense  = past;
    }
  }
  else if ($tense == future) { 
    if ($aspect == continuous) {
      $mode = conditional; $tense  = present; $aspect = default;
    }
    else {
      $mode = conditional; $tense  = present; $aspect = default;
    }
  }
  
  [modality:$modality, illocutionary:$illocutionary] ⊂ ↑;

  ↓2 = $rest ∪ [vform:tensed, mode:$mode, tense:$tense, aspect:$aspect, illocutionary:$illocutionary, modality:$modality, language_register:$language_register];

  ⇑ = ⇓2;
}

/* **************************************************
 * Succ
 ************************************************** */
/* **************************************************
 * Without any Coreference
  ************************************************* */
@trace
rhetoricalStructureCont → rhetoricalStructureCont rhetoricalStructureCont {
  [rhet:succ, i:$I, ii:$II, iii:NIL, iv:NIL, v:NIL, vi:NIL];
  ↓1 = $I;
  ↓2 = $II;
}

@trace
rhetoricalStructureCont → rhetoricalStructureCont rhetoricalStructureCont rhetoricalStructureCont {
  [rhet:succ, i:$I, ii:$II, iii:$III, iv:NIL, v:NIL, vi:NIL];
  ↓1 = $I;
  ↓2 = $II;
  ↓3 = $III;
}

@trace
rhetoricalStructureCont → rhetoricalStructureCont rhetoricalStructureCont rhetoricalStructureCont  rhetoricalStructureCont {
  [rhet:succ, i:$I, ii:$II, iii:$III, iv:IV, v:NIL, vi:NIL];
  ↓1 = $I;
  ↓2 = $II;
  ↓3 = $III;
  ↓4 = $IV;
}

@trace
rhetoricalStructureCont → rhetoricalStructureCont rhetoricalStructureCont rhetoricalStructureCont  rhetoricalStructureCont rhetoricalStructureCont {
  [rhet:succ, i:$I, ii:$II, iii:$III, iv:IV, v:V, vi:NIL];
  ↓1 = $I;
  ↓2 = $II;
  ↓3 = $III;
  ↓4 = $IV;
  ↓5 = $V;
}

@trace
rhetoricalStructureCont → rhetoricalStructureCont rhetoricalStructureCont rhetoricalStructureCont  rhetoricalStructureCont rhetoricalStructureCont rhetoricalStructureCont {
  [rhet:succ, i:$I, ii:$II, iii:$III, iv:IV, v:V, vi:VI];
  ↓1 = $I;
  ↓2 = $II;
  ↓3 = $III;
  ↓4 = $IV;
  ↓5 = $V;
  ↓6 = $VI;
}

