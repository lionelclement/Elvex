
/* **************************************************
 * Groupe nominal
 ************************************************** */
@trace
NP → NP2 {
  // print __FILE__+" ("+__LINE__+")";
  // println ↑;
  [sem:$sem, language_register:$language_register, lexical_function:$lexical_function, $rest] ⊂ ↑;
  if ((¬ $sem) || ($sem == default))
    $s = [];
  else
    $s = [sem:$sem];
  if ((¬ $language_register) || ($language_register == default))
    $lr = [];
  else
    $lr = [language_register:$language_register];
  if (¬ $lexical_function)
    $lexical_function = default;
  ↓1 = [lexical_function:$lexical_function, $s, $lr, $rest];
  ⇑ = ⇓1;
}

@trace
NP2 → [det | detNum | detForm | detLex] N [form] {
  // print __FILE__+" ("+__LINE__+")";
  // println ↑;
  [sem:$sem, lexical_function:$lexical_function, $rest] ⊂ ↑;
  [number:$number, def:$def, poss:$poss, dem:$dem, part:$part, personPoss:$personPoss, numberPoss:$numberPoss] ⊂ ↑;
  ↓2 = ↑;
  if (#3) {
    [modForm:$ModForm];
    ↓3 = $ModForm;
  }
  else {
    [modForm:NIL];
  }
  if (#1.1) {
    [detNum:NIL, detForm:NIL, detLex:NIL];
    [det:yes] ⊂ ↑;
    [qual:$synthesizedQual, part:$synthesizedPart, $synthesizedRest] ⊂ ⇓2;
    if (¬ $synthesizedQual)
      $qual = no;
    else
      $qual = $synthesizedQual;
    if ((¬ $part) && (¬ $synthesizedPart))
      $part = no;
    if (¬ $def)
      $def = no;
    if (¬ $poss)
      $poss = no;
    if (¬ $dem)
      $dem = no;
    if (¬ $personPoss)
      $personPoss = three;
    if (¬ $numberPoss)
      $numberPoss = sg;
    ↓1 = ↑ ∪ ⇓2 ∪ [qual:$qual, part:$part, number:$number, def:$def, poss:$poss, dem:$dem, personPoss:$personPoss, numberPoss:$numberPoss, $synthesizedRest];
    ⇑ = ↑ ∪ ⇓1 ∪ ⇓2 ∪ [person:three, det:yes];
  }
  else if (#1.2) {
    [detNum:$num];
    ↓1 = $num;
    ⇑ = ↑ ∪ ⇓2 ∪ [person:three, det:yes];
  }
  else if (#1.3) {
    [detForm:$detForm];
    ↓1 = $detForm;
    ⇑ = ↑ ∪ ⇓2 ∪ [person:three, det:yes];
  }
  else if (#1.4) {
    [detLex:$detLex];
    ↓1 = ↑;
    ⇑ = ↑ ∪ ⇓2 ∪ [person:three, det:yes];
  }
  else {
    [detNum:NIL, det:no];
    if (¬ $number)
      $number = sg;
    ⇑ = ⇓2 U [number:$number];
  }
}

@trace
NP2 → pn {
  //print __FILE__+" ("+__LINE__+")";
  ↓1 = ↑;
  ⇑ = ⇓1 ∪ [person:three, det:yes];
}

@trace
NP2 → pro {
  //print __FILE__+" ("+__LINE__+")";
  [PRED:__pro];
  ↓1 = ↑;
  ⇑ = ⇓1;
}

@trace
NP2 → form {
  //print __FILE__+" ("+__LINE__+")";
  ↓1 = ↑;
  ⇑ = ⇓1 ∪ [person:three, det:yes];
}

// Le livre de Marc
N → N PP {
  //print __FILE__+" ("+__LINE__+")";
  //println ↑;
  [de_obj:$deObj, mod:NIL, $rest];
  [de_obj:[PRED:$P], language_register:$language_register] ⊂ ↑;
  attest $P ≠ _pro; 
  ↓1 = $rest;
  ↓2 = [$deObj, pcas:de, language_register:$language_register];
  ⇑ = ⇓1;
}

// Un livre à Marc
N → N PP {
  //print __FILE__+" ("+__LINE__+")";
  //println ↑;
  [à_obj:$àObj, mod:NIL, $rest];
  [à_obj:[PRED:$P], language_register:$language_register] ⊂ ↑;
  attest $P ≠ _pro; 
  ↓1 = $rest;
  ↓2 = [$àObj, pcas:à, language_register:$language_register];
  ⇑ = ⇓1;
}
 
@trace
N → [AP] N [AP] [comma] [AP] [et] [AP]
{
  // print __FILE__+" ("+__LINE__+")";
  // println ↑;
  [mod:<$head::$tail>, $rest];
  ↓2 = $rest;
  [mod:$list, language_register:$language_register] ⊂ ↑;
  if (⇓2) {
    [number:$synthesizedNumber, gender:$synthesizedGender] ⊂ ⇓2;
    foreach $i in $list {
      [pos:$posInherited] ⊂ $i;
      [PRED:$p, pos:$posSynthesized] ⊂ search(adj, $i);
      if ($posInherited)
	$pos = $posInherited;
      else
	if ($posSynthesized)
	  $pos = $posSynthesized;
      	else
	  $pos = none;
      if ($pos == pre) {
	attest (#1);
	↓1 = [number:$synthesizedNumber, gender:$synthesizedGender, language_register:$language_register, $i];
      } else {
	if (↓3) {
	  if (↓7) {
	    ↓4 = [];
	    ↓5 = [number:$synthesizedNumber, gender:$synthesizedGender, language_register:$language_register, $i];
	  }
	  else {
	    ↓6 = [];
	    ↓7 = [number:$synthesizedNumber, gender:$synthesizedGender, language_register:$language_register, $i];
	  }
	}
	else {
	  ↓3 = [number:$synthesizedNumber, gender:$synthesizedGender, language_register:$language_register, $i];
	  println $language_register;
	}
      }
    }
  }
  attest ($list => (#1 || #3));
  attest (↓3 => #3);
  attest (↓5 => #4);
  attest (↓5 => #5);
  attest (↓7 => #6);
  attest (↓7 => #7);
  ⇑ = ⇓2;
}

// un gros fumeur
@trace
N → AP N2 {
  // print __FILE__+" ("+__LINE__+")";
  // println ↑;
  [lexical_function:_, mod:NIL, $rest];
  ↓2 = $rest;
  [mod:<$head>, number:$synthesizedNumber, gender:$synthesizedGender] ⊂ ⇓2;
  [number:$adjSynthesizedNumber, gender:$adjSynthesizedGender] ⊂ ⇓1;
  ↓1 = [number:$synthesizedNumber, gender:$synthesizedGender, $head];
  [pos:$Pos] ⊂ ⇓1;
  attest ($Pos) ∧ ($Pos == pre);
  ⇑ = ⇓2 ∪ [number:$adjSynthesizedNumber, gender:$adjSynthesizedGender, qual:yes];
}

// un échec cuisant
@trace
N → N2 AP {
  // print __FILE__+" ("+__LINE__+")";
  // println ↑;
  [lexical_function:_, mod:NIL, $rest];
  ↓1 = $rest;
  [mod:<$head>, number:$synthesizedNumber, gender:$synthesizedGender] ⊂ ⇓1;
  [number:$adjSynthesizedNumber, gender:$adjSynthesizedGender] ⊂ ⇓2;
  ↓2 = [number:$synthesizedNumber, gender:$synthesizedGender, $head];
  [pos:$Pos] ⊂ ⇓2;
  attest ¬$Pos ∨ ($Pos == post);
  ⇑ = ⇓1 ∪ [number:$adjSynthesizedNumber, gender:$adjSynthesizedGender, qual:yes];
}

@trace
N → N2 {
  // print __FILE__+" ("+__LINE__+")";
  // println ↑;
  [lexical_function:default, mod:NIL, obj:NIL, de_obj:NIL, à_obj:NIL, i:NIL, $rest];
  ↓1 = $rest;
  ⇑ = ⇓1;
}

@trace
N2 → n [n] {
  // print __FILE__+" ("+__LINE__+")";
  // println ↑;
  [mod:NIL, obj:NIL, de_obj:NIL, à_obj:NIL, i:NIL];
  [obj:$obj, $rest] ⊂ ↑;
  [sem:$sem, language_register:$language_register] ⊂ $rest;
  ↓1 = $rest;
  [obj:$Synth_obj, sem:$Synth_sem, language_register:$Synth_language_register] ⊂ ⇓1;
  attest ($sem <=> $Synth_sem);
  attest ($language_register <=> $Synth_language_register);
  if (#2)
    ↓2 = [language_register:$language_register, $Synth_obj];
  else
    attest (!$Synth_obj);
  ⇑ = ⇓1 ∪ [language_register:$language_register];
}

AP → adv AP {
  //print __FILE__+" ("+__LINE__+")";
  //println ↑;
   [mod:<$head::$tail>, $rest];
   ↓1 = $head;
   ↓2 = [$rest, mod:$tail];
   ⇑ = ⇓2;
}

@trace
AP → adj {
  // print __FILE__+" ("+__LINE__+")";
  // println ↑;
  [subj:NIL, mod:NIL, $rest];
  [sem:$sem, language_register:$language_register] ⊂ $rest;
  [sem:$Synth_sem, language_register:$Synth_language_register] ⊂ ⇓1;
  attest ($sem <=> $Synth_sem);
  attest ($language_register <=> $Synth_language_register);
  ↓1 = $rest;
  ⇑ = ⇓1;
}

@trace
PP → prep NP {
   ↓1 = ↑;
   ↓2 = ↑;
   ⇑ = ⇓1 ∪ ⇓2;
}

